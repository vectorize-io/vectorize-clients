# coding: utf-8

"""
    Vectorize API (Beta)

    API for Vectorize services

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from vectorize_client.models.azureaisearch2 import Azureaisearch2
from vectorize_client.models.capella2 import Capella2
from vectorize_client.models.datastax2 import Datastax2
from vectorize_client.models.elastic2 import Elastic2
from vectorize_client.models.milvus2 import Milvus2
from vectorize_client.models.pinecone2 import Pinecone2
from vectorize_client.models.postgresql2 import Postgresql2
from vectorize_client.models.qdrant2 import Qdrant2
from vectorize_client.models.singlestore2 import Singlestore2
from vectorize_client.models.supabase2 import Supabase2
from vectorize_client.models.turbopuffer2 import Turbopuffer2
from vectorize_client.models.weaviate2 import Weaviate2
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

PIPELINEDESTINATIONCONNECTORREQUESTINNER_ONE_OF_SCHEMAS = ["Azureaisearch2", "Capella2", "Datastax2", "Elastic2", "Milvus2", "Pinecone2", "Postgresql2", "Qdrant2", "Singlestore2", "Supabase2", "Turbopuffer2", "Weaviate2"]

class PipelineDestinationConnectorRequestInner(BaseModel):
    """
    PipelineDestinationConnectorRequestInner
    """
    # data type: Capella2
    oneof_schema_1_validator: Optional[Capella2] = None
    # data type: Datastax2
    oneof_schema_2_validator: Optional[Datastax2] = None
    # data type: Elastic2
    oneof_schema_3_validator: Optional[Elastic2] = None
    # data type: Pinecone2
    oneof_schema_4_validator: Optional[Pinecone2] = None
    # data type: Singlestore2
    oneof_schema_5_validator: Optional[Singlestore2] = None
    # data type: Milvus2
    oneof_schema_6_validator: Optional[Milvus2] = None
    # data type: Postgresql2
    oneof_schema_7_validator: Optional[Postgresql2] = None
    # data type: Qdrant2
    oneof_schema_8_validator: Optional[Qdrant2] = None
    # data type: Supabase2
    oneof_schema_9_validator: Optional[Supabase2] = None
    # data type: Weaviate2
    oneof_schema_10_validator: Optional[Weaviate2] = None
    # data type: Azureaisearch2
    oneof_schema_11_validator: Optional[Azureaisearch2] = None
    # data type: Turbopuffer2
    oneof_schema_12_validator: Optional[Turbopuffer2] = None
    actual_instance: Optional[Union[Azureaisearch2, Capella2, Datastax2, Elastic2, Milvus2, Pinecone2, Postgresql2, Qdrant2, Singlestore2, Supabase2, Turbopuffer2, Weaviate2]] = None
    one_of_schemas: Set[str] = { "Azureaisearch2", "Capella2", "Datastax2", "Elastic2", "Milvus2", "Pinecone2", "Postgresql2", "Qdrant2", "Singlestore2", "Supabase2", "Turbopuffer2", "Weaviate2" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = PipelineDestinationConnectorRequestInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: Capella2
        if not isinstance(v, Capella2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Capella2`")
        else:
            match += 1
        # validate data type: Datastax2
        if not isinstance(v, Datastax2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Datastax2`")
        else:
            match += 1
        # validate data type: Elastic2
        if not isinstance(v, Elastic2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Elastic2`")
        else:
            match += 1
        # validate data type: Pinecone2
        if not isinstance(v, Pinecone2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Pinecone2`")
        else:
            match += 1
        # validate data type: Singlestore2
        if not isinstance(v, Singlestore2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Singlestore2`")
        else:
            match += 1
        # validate data type: Milvus2
        if not isinstance(v, Milvus2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Milvus2`")
        else:
            match += 1
        # validate data type: Postgresql2
        if not isinstance(v, Postgresql2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Postgresql2`")
        else:
            match += 1
        # validate data type: Qdrant2
        if not isinstance(v, Qdrant2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Qdrant2`")
        else:
            match += 1
        # validate data type: Supabase2
        if not isinstance(v, Supabase2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Supabase2`")
        else:
            match += 1
        # validate data type: Weaviate2
        if not isinstance(v, Weaviate2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Weaviate2`")
        else:
            match += 1
        # validate data type: Azureaisearch2
        if not isinstance(v, Azureaisearch2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Azureaisearch2`")
        else:
            match += 1
        # validate data type: Turbopuffer2
        if not isinstance(v, Turbopuffer2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Turbopuffer2`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in PipelineDestinationConnectorRequestInner with oneOf schemas: Azureaisearch2, Capella2, Datastax2, Elastic2, Milvus2, Pinecone2, Postgresql2, Qdrant2, Singlestore2, Supabase2, Turbopuffer2, Weaviate2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in PipelineDestinationConnectorRequestInner with oneOf schemas: Azureaisearch2, Capella2, Datastax2, Elastic2, Milvus2, Pinecone2, Postgresql2, Qdrant2, Singlestore2, Supabase2, Turbopuffer2, Weaviate2. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into Capella2
        try:
            instance.actual_instance = Capella2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Datastax2
        try:
            instance.actual_instance = Datastax2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Elastic2
        try:
            instance.actual_instance = Elastic2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Pinecone2
        try:
            instance.actual_instance = Pinecone2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Singlestore2
        try:
            instance.actual_instance = Singlestore2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Milvus2
        try:
            instance.actual_instance = Milvus2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Postgresql2
        try:
            instance.actual_instance = Postgresql2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Qdrant2
        try:
            instance.actual_instance = Qdrant2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Supabase2
        try:
            instance.actual_instance = Supabase2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Weaviate2
        try:
            instance.actual_instance = Weaviate2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Azureaisearch2
        try:
            instance.actual_instance = Azureaisearch2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Turbopuffer2
        try:
            instance.actual_instance = Turbopuffer2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into PipelineDestinationConnectorRequestInner with oneOf schemas: Azureaisearch2, Capella2, Datastax2, Elastic2, Milvus2, Pinecone2, Postgresql2, Qdrant2, Singlestore2, Supabase2, Turbopuffer2, Weaviate2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into PipelineDestinationConnectorRequestInner with oneOf schemas: Azureaisearch2, Capella2, Datastax2, Elastic2, Milvus2, Pinecone2, Postgresql2, Qdrant2, Singlestore2, Supabase2, Turbopuffer2, Weaviate2. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], Azureaisearch2, Capella2, Datastax2, Elastic2, Milvus2, Pinecone2, Postgresql2, Qdrant2, Singlestore2, Supabase2, Turbopuffer2, Weaviate2]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


