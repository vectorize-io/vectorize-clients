# coding: utf-8

"""
    Vectorize API (Beta)

    API for Vectorize services

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from vectorize_client.models.pipeline_ai_platform_request_inner import PipelineAIPlatformRequestInner
from vectorize_client.models.pipeline_destination_connector_request_inner import PipelineDestinationConnectorRequestInner
from vectorize_client.models.pipeline_source_connector_request_inner import PipelineSourceConnectorRequestInner
from vectorize_client.models.schedule_schema import ScheduleSchema
from typing import Optional, Set
from typing_extensions import Self

class PipelineConfigurationSchema(BaseModel):
    """
    PipelineConfigurationSchema
    """ # noqa: E501
    source_connectors: Annotated[List[PipelineSourceConnectorRequestInner], Field(min_length=1)] = Field(alias="sourceConnectors")
    destination_connector: Annotated[List[PipelineDestinationConnectorRequestInner], Field(min_length=1)] = Field(alias="destinationConnector")
    ai_platform: Annotated[List[PipelineAIPlatformRequestInner], Field(min_length=1)] = Field(alias="aiPlatform")
    pipeline_name: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="pipelineName")
    schedule: ScheduleSchema
    __properties: ClassVar[List[str]] = ["sourceConnectors", "destinationConnector", "aiPlatform", "pipelineName", "schedule"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PipelineConfigurationSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in source_connectors (list)
        _items = []
        if self.source_connectors:
            for _item_source_connectors in self.source_connectors:
                if _item_source_connectors:
                    _items.append(_item_source_connectors.to_dict())
            _dict['sourceConnectors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in destination_connector (list)
        _items = []
        if self.destination_connector:
            for _item_destination_connector in self.destination_connector:
                if _item_destination_connector:
                    _items.append(_item_destination_connector.to_dict())
            _dict['destinationConnector'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ai_platform (list)
        _items = []
        if self.ai_platform:
            for _item_ai_platform in self.ai_platform:
                if _item_ai_platform:
                    _items.append(_item_ai_platform.to_dict())
            _dict['aiPlatform'] = _items
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PipelineConfigurationSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceConnectors": [PipelineSourceConnectorRequestInner.from_dict(_item) for _item in obj["sourceConnectors"]] if obj.get("sourceConnectors") is not None else None,
            "destinationConnector": [PipelineDestinationConnectorRequestInner.from_dict(_item) for _item in obj["destinationConnector"]] if obj.get("destinationConnector") is not None else None,
            "aiPlatform": [PipelineAIPlatformRequestInner.from_dict(_item) for _item in obj["aiPlatform"]] if obj.get("aiPlatform") is not None else None,
            "pipelineName": obj.get("pipelineName"),
            "schedule": ScheduleSchema.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None
        })
        return _obj


