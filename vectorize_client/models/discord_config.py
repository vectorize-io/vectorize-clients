# coding: utf-8

"""
    Vectorize API (Beta)

    API for Vectorize services

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DISCORDConfig(BaseModel):
    """
    Configuration for Discord connector
    """ # noqa: E501
    emoji: Optional[StrictStr] = Field(default=None, description="Emoji Filter. Example: Enter custom emoji filter name")
    author: Optional[StrictStr] = Field(default=None, description="Author Filter. Example: Enter author name")
    ignore_author: Optional[StrictStr] = Field(default=None, description="Ignore Author Filter. Example: Enter ignore author name", alias="ignore-author")
    limit: Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]] = Field(default=10000, description="Limit. Example: Enter limit")
    thread_message_inclusion: Optional[StrictStr] = Field(default='ALL', description="Thread Message Inclusion", alias="thread-message-inclusion")
    filter_logic: Optional[StrictStr] = Field(default='AND', description="Filter Logic", alias="filter-logic")
    thread_message_mode: Optional[StrictStr] = Field(default='CONCATENATE', description="Thread Message Mode", alias="thread-message-mode")
    __properties: ClassVar[List[str]] = ["emoji", "author", "ignore-author", "limit", "thread-message-inclusion", "filter-logic", "thread-message-mode"]

    @field_validator('thread_message_inclusion')
    def thread_message_inclusion_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALL', 'FILTER']):
            raise ValueError("must be one of enum values ('ALL', 'FILTER')")
        return value

    @field_validator('filter_logic')
    def filter_logic_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AND', 'OR']):
            raise ValueError("must be one of enum values ('AND', 'OR')")
        return value

    @field_validator('thread_message_mode')
    def thread_message_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONCATENATE', 'SINGLE']):
            raise ValueError("must be one of enum values ('CONCATENATE', 'SINGLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DISCORDConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DISCORDConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "emoji": obj.get("emoji"),
            "author": obj.get("author"),
            "ignore-author": obj.get("ignore-author"),
            "limit": obj.get("limit") if obj.get("limit") is not None else 10000,
            "thread-message-inclusion": obj.get("thread-message-inclusion") if obj.get("thread-message-inclusion") is not None else 'ALL',
            "filter-logic": obj.get("filter-logic") if obj.get("filter-logic") is not None else 'AND',
            "thread-message-mode": obj.get("thread-message-mode") if obj.get("thread-message-mode") is not None else 'CONCATENATE'
        })
        return _obj


