# coding: utf-8

"""
    Vectorize API (Beta)

    API for Vectorize services

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from vectorize_client.models.amazon_s3 import AmazonS3
from vectorize_client.models.azure_blob_storage import AzureBlobStorage
from vectorize_client.models.confluence import Confluence
from vectorize_client.models.discord import Discord
from vectorize_client.models.dropbox import Dropbox
from vectorize_client.models.dropbox_oauth import DropboxOauth
from vectorize_client.models.dropbox_oauth_multi import DropboxOauthMulti
from vectorize_client.models.dropbox_oauth_multi_custom import DropboxOauthMultiCustom
from vectorize_client.models.file_upload import FileUpload
from vectorize_client.models.firecrawl import Firecrawl
from vectorize_client.models.fireflies import Fireflies
from vectorize_client.models.github import Github
from vectorize_client.models.google_cloud_storage import GoogleCloudStorage
from vectorize_client.models.google_drive import GoogleDrive
from vectorize_client.models.google_drive_o_auth import GoogleDriveOAuth
from vectorize_client.models.google_drive_oauth_multi import GoogleDriveOauthMulti
from vectorize_client.models.google_drive_oauth_multi_custom import GoogleDriveOauthMultiCustom
from vectorize_client.models.intercom import Intercom
from vectorize_client.models.notion import Notion
from vectorize_client.models.notion_oauth_multi import NotionOauthMulti
from vectorize_client.models.notion_oauth_multi_custom import NotionOauthMultiCustom
from vectorize_client.models.one_drive import OneDrive
from vectorize_client.models.sharepoint import Sharepoint
from vectorize_client.models.web_crawler import WebCrawler
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

CREATESOURCECONNECTORREQUESTINNER_ONE_OF_SCHEMAS = ["AmazonS3", "AzureBlobStorage", "Confluence", "Discord", "Dropbox", "DropboxOauth", "DropboxOauthMulti", "DropboxOauthMultiCustom", "FileUpload", "Firecrawl", "Fireflies", "Github", "GoogleCloudStorage", "GoogleDrive", "GoogleDriveOAuth", "GoogleDriveOauthMulti", "GoogleDriveOauthMultiCustom", "Intercom", "Notion", "NotionOauthMulti", "NotionOauthMultiCustom", "OneDrive", "Sharepoint", "WebCrawler"]

class CreateSourceConnectorRequestInner(BaseModel):
    """
    CreateSourceConnectorRequestInner
    """
    # data type: AmazonS3
    oneof_schema_1_validator: Optional[AmazonS3] = None
    # data type: AzureBlobStorage
    oneof_schema_2_validator: Optional[AzureBlobStorage] = None
    # data type: Confluence
    oneof_schema_3_validator: Optional[Confluence] = None
    # data type: Discord
    oneof_schema_4_validator: Optional[Discord] = None
    # data type: Dropbox
    oneof_schema_5_validator: Optional[Dropbox] = None
    # data type: DropboxOauth
    oneof_schema_6_validator: Optional[DropboxOauth] = None
    # data type: DropboxOauthMulti
    oneof_schema_7_validator: Optional[DropboxOauthMulti] = None
    # data type: DropboxOauthMultiCustom
    oneof_schema_8_validator: Optional[DropboxOauthMultiCustom] = None
    # data type: GoogleDriveOAuth
    oneof_schema_9_validator: Optional[GoogleDriveOAuth] = None
    # data type: GoogleDrive
    oneof_schema_10_validator: Optional[GoogleDrive] = None
    # data type: GoogleDriveOauthMulti
    oneof_schema_11_validator: Optional[GoogleDriveOauthMulti] = None
    # data type: GoogleDriveOauthMultiCustom
    oneof_schema_12_validator: Optional[GoogleDriveOauthMultiCustom] = None
    # data type: Firecrawl
    oneof_schema_13_validator: Optional[Firecrawl] = None
    # data type: GoogleCloudStorage
    oneof_schema_14_validator: Optional[GoogleCloudStorage] = None
    # data type: Intercom
    oneof_schema_15_validator: Optional[Intercom] = None
    # data type: Notion
    oneof_schema_16_validator: Optional[Notion] = None
    # data type: NotionOauthMulti
    oneof_schema_17_validator: Optional[NotionOauthMulti] = None
    # data type: NotionOauthMultiCustom
    oneof_schema_18_validator: Optional[NotionOauthMultiCustom] = None
    # data type: OneDrive
    oneof_schema_19_validator: Optional[OneDrive] = None
    # data type: Sharepoint
    oneof_schema_20_validator: Optional[Sharepoint] = None
    # data type: WebCrawler
    oneof_schema_21_validator: Optional[WebCrawler] = None
    # data type: FileUpload
    oneof_schema_22_validator: Optional[FileUpload] = None
    # data type: Github
    oneof_schema_23_validator: Optional[Github] = None
    # data type: Fireflies
    oneof_schema_24_validator: Optional[Fireflies] = None
    actual_instance: Optional[Union[AmazonS3, AzureBlobStorage, Confluence, Discord, Dropbox, DropboxOauth, DropboxOauthMulti, DropboxOauthMultiCustom, FileUpload, Firecrawl, Fireflies, Github, GoogleCloudStorage, GoogleDrive, GoogleDriveOAuth, GoogleDriveOauthMulti, GoogleDriveOauthMultiCustom, Intercom, Notion, NotionOauthMulti, NotionOauthMultiCustom, OneDrive, Sharepoint, WebCrawler]] = None
    one_of_schemas: Set[str] = { "AmazonS3", "AzureBlobStorage", "Confluence", "Discord", "Dropbox", "DropboxOauth", "DropboxOauthMulti", "DropboxOauthMultiCustom", "FileUpload", "Firecrawl", "Fireflies", "Github", "GoogleCloudStorage", "GoogleDrive", "GoogleDriveOAuth", "GoogleDriveOauthMulti", "GoogleDriveOauthMultiCustom", "Intercom", "Notion", "NotionOauthMulti", "NotionOauthMultiCustom", "OneDrive", "Sharepoint", "WebCrawler" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = CreateSourceConnectorRequestInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: AmazonS3
        if not isinstance(v, AmazonS3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AmazonS3`")
        else:
            match += 1
        # validate data type: AzureBlobStorage
        if not isinstance(v, AzureBlobStorage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AzureBlobStorage`")
        else:
            match += 1
        # validate data type: Confluence
        if not isinstance(v, Confluence):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Confluence`")
        else:
            match += 1
        # validate data type: Discord
        if not isinstance(v, Discord):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Discord`")
        else:
            match += 1
        # validate data type: Dropbox
        if not isinstance(v, Dropbox):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Dropbox`")
        else:
            match += 1
        # validate data type: DropboxOauth
        if not isinstance(v, DropboxOauth):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DropboxOauth`")
        else:
            match += 1
        # validate data type: DropboxOauthMulti
        if not isinstance(v, DropboxOauthMulti):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DropboxOauthMulti`")
        else:
            match += 1
        # validate data type: DropboxOauthMultiCustom
        if not isinstance(v, DropboxOauthMultiCustom):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DropboxOauthMultiCustom`")
        else:
            match += 1
        # validate data type: GoogleDriveOAuth
        if not isinstance(v, GoogleDriveOAuth):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleDriveOAuth`")
        else:
            match += 1
        # validate data type: GoogleDrive
        if not isinstance(v, GoogleDrive):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleDrive`")
        else:
            match += 1
        # validate data type: GoogleDriveOauthMulti
        if not isinstance(v, GoogleDriveOauthMulti):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleDriveOauthMulti`")
        else:
            match += 1
        # validate data type: GoogleDriveOauthMultiCustom
        if not isinstance(v, GoogleDriveOauthMultiCustom):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleDriveOauthMultiCustom`")
        else:
            match += 1
        # validate data type: Firecrawl
        if not isinstance(v, Firecrawl):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Firecrawl`")
        else:
            match += 1
        # validate data type: GoogleCloudStorage
        if not isinstance(v, GoogleCloudStorage):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleCloudStorage`")
        else:
            match += 1
        # validate data type: Intercom
        if not isinstance(v, Intercom):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Intercom`")
        else:
            match += 1
        # validate data type: Notion
        if not isinstance(v, Notion):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Notion`")
        else:
            match += 1
        # validate data type: NotionOauthMulti
        if not isinstance(v, NotionOauthMulti):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotionOauthMulti`")
        else:
            match += 1
        # validate data type: NotionOauthMultiCustom
        if not isinstance(v, NotionOauthMultiCustom):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotionOauthMultiCustom`")
        else:
            match += 1
        # validate data type: OneDrive
        if not isinstance(v, OneDrive):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OneDrive`")
        else:
            match += 1
        # validate data type: Sharepoint
        if not isinstance(v, Sharepoint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Sharepoint`")
        else:
            match += 1
        # validate data type: WebCrawler
        if not isinstance(v, WebCrawler):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebCrawler`")
        else:
            match += 1
        # validate data type: FileUpload
        if not isinstance(v, FileUpload):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FileUpload`")
        else:
            match += 1
        # validate data type: Github
        if not isinstance(v, Github):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Github`")
        else:
            match += 1
        # validate data type: Fireflies
        if not isinstance(v, Fireflies):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Fireflies`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in CreateSourceConnectorRequestInner with oneOf schemas: AmazonS3, AzureBlobStorage, Confluence, Discord, Dropbox, DropboxOauth, DropboxOauthMulti, DropboxOauthMultiCustom, FileUpload, Firecrawl, Fireflies, Github, GoogleCloudStorage, GoogleDrive, GoogleDriveOAuth, GoogleDriveOauthMulti, GoogleDriveOauthMultiCustom, Intercom, Notion, NotionOauthMulti, NotionOauthMultiCustom, OneDrive, Sharepoint, WebCrawler. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in CreateSourceConnectorRequestInner with oneOf schemas: AmazonS3, AzureBlobStorage, Confluence, Discord, Dropbox, DropboxOauth, DropboxOauthMulti, DropboxOauthMultiCustom, FileUpload, Firecrawl, Fireflies, Github, GoogleCloudStorage, GoogleDrive, GoogleDriveOAuth, GoogleDriveOauthMulti, GoogleDriveOauthMultiCustom, Intercom, Notion, NotionOauthMulti, NotionOauthMultiCustom, OneDrive, Sharepoint, WebCrawler. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AmazonS3
        try:
            instance.actual_instance = AmazonS3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AzureBlobStorage
        try:
            instance.actual_instance = AzureBlobStorage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Confluence
        try:
            instance.actual_instance = Confluence.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Discord
        try:
            instance.actual_instance = Discord.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Dropbox
        try:
            instance.actual_instance = Dropbox.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DropboxOauth
        try:
            instance.actual_instance = DropboxOauth.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DropboxOauthMulti
        try:
            instance.actual_instance = DropboxOauthMulti.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DropboxOauthMultiCustom
        try:
            instance.actual_instance = DropboxOauthMultiCustom.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleDriveOAuth
        try:
            instance.actual_instance = GoogleDriveOAuth.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleDrive
        try:
            instance.actual_instance = GoogleDrive.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleDriveOauthMulti
        try:
            instance.actual_instance = GoogleDriveOauthMulti.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleDriveOauthMultiCustom
        try:
            instance.actual_instance = GoogleDriveOauthMultiCustom.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Firecrawl
        try:
            instance.actual_instance = Firecrawl.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleCloudStorage
        try:
            instance.actual_instance = GoogleCloudStorage.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Intercom
        try:
            instance.actual_instance = Intercom.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Notion
        try:
            instance.actual_instance = Notion.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotionOauthMulti
        try:
            instance.actual_instance = NotionOauthMulti.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotionOauthMultiCustom
        try:
            instance.actual_instance = NotionOauthMultiCustom.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OneDrive
        try:
            instance.actual_instance = OneDrive.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Sharepoint
        try:
            instance.actual_instance = Sharepoint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WebCrawler
        try:
            instance.actual_instance = WebCrawler.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FileUpload
        try:
            instance.actual_instance = FileUpload.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Github
        try:
            instance.actual_instance = Github.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Fireflies
        try:
            instance.actual_instance = Fireflies.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into CreateSourceConnectorRequestInner with oneOf schemas: AmazonS3, AzureBlobStorage, Confluence, Discord, Dropbox, DropboxOauth, DropboxOauthMulti, DropboxOauthMultiCustom, FileUpload, Firecrawl, Fireflies, Github, GoogleCloudStorage, GoogleDrive, GoogleDriveOAuth, GoogleDriveOauthMulti, GoogleDriveOauthMultiCustom, Intercom, Notion, NotionOauthMulti, NotionOauthMultiCustom, OneDrive, Sharepoint, WebCrawler. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into CreateSourceConnectorRequestInner with oneOf schemas: AmazonS3, AzureBlobStorage, Confluence, Discord, Dropbox, DropboxOauth, DropboxOauthMulti, DropboxOauthMultiCustom, FileUpload, Firecrawl, Fireflies, Github, GoogleCloudStorage, GoogleDrive, GoogleDriveOAuth, GoogleDriveOauthMulti, GoogleDriveOauthMultiCustom, Intercom, Notion, NotionOauthMulti, NotionOauthMultiCustom, OneDrive, Sharepoint, WebCrawler. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AmazonS3, AzureBlobStorage, Confluence, Discord, Dropbox, DropboxOauth, DropboxOauthMulti, DropboxOauthMultiCustom, FileUpload, Firecrawl, Fireflies, Github, GoogleCloudStorage, GoogleDrive, GoogleDriveOAuth, GoogleDriveOauthMulti, GoogleDriveOauthMultiCustom, Intercom, Notion, NotionOauthMulti, NotionOauthMultiCustom, OneDrive, Sharepoint, WebCrawler]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


