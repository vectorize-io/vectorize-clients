# coding: utf-8

"""
    Vectorize API (Beta)

    API for Vectorize services

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AIPlatformConfigSchema(BaseModel):
    """
    AIPlatformConfigSchema
    """ # noqa: E501
    embedding_model: Optional[StrictStr] = Field(default=None, alias="embeddingModel")
    chunking_strategy: Optional[StrictStr] = Field(default=None, alias="chunkingStrategy")
    chunk_size: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, alias="chunkSize")
    chunk_overlap: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, alias="chunkOverlap")
    dimensions: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    extraction_strategy: Optional[StrictStr] = Field(default=None, alias="extractionStrategy")
    __properties: ClassVar[List[str]] = ["embeddingModel", "chunkingStrategy", "chunkSize", "chunkOverlap", "dimensions", "extractionStrategy"]

    @field_validator('embedding_model')
    def embedding_model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VECTORIZE_OPEN_AI_TEXT_EMBEDDING_2', 'VECTORIZE_OPEN_AI_TEXT_EMBEDDING_3_LARGE', 'VECTORIZE_OPEN_AI_TEXT_EMBEDDING_3_SMALL', 'VECTORIZE_VOYAGE_AI_2', 'VECTORIZE_VOYAGE_AI_3', 'VECTORIZE_VOYAGE_AI_3_LITE', 'VECTORIZE_VOYAGE_AI_3_LARGE', 'VECTORIZE_VOYAGE_AI_FINANCE_2', 'VECTORIZE_VOYAGE_AI_MULTILINGUAL_2', 'VECTORIZE_VOYAGE_AI_LAW_2', 'VECTORIZE_VOYAGE_AI_CODE_2', 'VECTORIZE_TITAN_TEXT_EMBEDDING_2', 'VECTORIZE_TITAN_TEXT_EMBEDDING_1', 'OPEN_AI_TEXT_EMBEDDING_2', 'OPEN_AI_TEXT_EMBEDDING_3_SMALL', 'OPEN_AI_TEXT_EMBEDDING_3_LARGE', 'VOYAGE_AI_2', 'VOYAGE_AI_3', 'VOYAGE_AI_3_LITE', 'VOYAGE_AI_3_LARGE', 'VOYAGE_AI_FINANCE_2', 'VOYAGE_AI_MULTILINGUAL_2', 'VOYAGE_AI_LAW_2', 'VOYAGE_AI_CODE_2', 'TITAN_TEXT_EMBEDDING_1', 'TITAN_TEXT_EMBEDDING_2', 'VERTEX_TEXT_EMBEDDING_4', 'VERTEX_TEXT_EMBEDDING_GECKO_3', 'VERTEX_GECKO_MULTILINGUAL_1', 'VERTEX_MULTILINGUAL_EMBEDDING_2']):
            raise ValueError("must be one of enum values ('VECTORIZE_OPEN_AI_TEXT_EMBEDDING_2', 'VECTORIZE_OPEN_AI_TEXT_EMBEDDING_3_LARGE', 'VECTORIZE_OPEN_AI_TEXT_EMBEDDING_3_SMALL', 'VECTORIZE_VOYAGE_AI_2', 'VECTORIZE_VOYAGE_AI_3', 'VECTORIZE_VOYAGE_AI_3_LITE', 'VECTORIZE_VOYAGE_AI_3_LARGE', 'VECTORIZE_VOYAGE_AI_FINANCE_2', 'VECTORIZE_VOYAGE_AI_MULTILINGUAL_2', 'VECTORIZE_VOYAGE_AI_LAW_2', 'VECTORIZE_VOYAGE_AI_CODE_2', 'VECTORIZE_TITAN_TEXT_EMBEDDING_2', 'VECTORIZE_TITAN_TEXT_EMBEDDING_1', 'OPEN_AI_TEXT_EMBEDDING_2', 'OPEN_AI_TEXT_EMBEDDING_3_SMALL', 'OPEN_AI_TEXT_EMBEDDING_3_LARGE', 'VOYAGE_AI_2', 'VOYAGE_AI_3', 'VOYAGE_AI_3_LITE', 'VOYAGE_AI_3_LARGE', 'VOYAGE_AI_FINANCE_2', 'VOYAGE_AI_MULTILINGUAL_2', 'VOYAGE_AI_LAW_2', 'VOYAGE_AI_CODE_2', 'TITAN_TEXT_EMBEDDING_1', 'TITAN_TEXT_EMBEDDING_2', 'VERTEX_TEXT_EMBEDDING_4', 'VERTEX_TEXT_EMBEDDING_GECKO_3', 'VERTEX_GECKO_MULTILINGUAL_1', 'VERTEX_MULTILINGUAL_EMBEDDING_2')")
        return value

    @field_validator('chunking_strategy')
    def chunking_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FIXED', 'SENTENCE', 'PARAGRAPH', 'MARKDOWN']):
            raise ValueError("must be one of enum values ('FIXED', 'SENTENCE', 'PARAGRAPH', 'MARKDOWN')")
        return value

    @field_validator('extraction_strategy')
    def extraction_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FAST', 'IRIS', 'MIXED']):
            raise ValueError("must be one of enum values ('FAST', 'IRIS', 'MIXED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AIPlatformConfigSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AIPlatformConfigSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "embeddingModel": obj.get("embeddingModel"),
            "chunkingStrategy": obj.get("chunkingStrategy"),
            "chunkSize": obj.get("chunkSize"),
            "chunkOverlap": obj.get("chunkOverlap"),
            "dimensions": obj.get("dimensions"),
            "extractionStrategy": obj.get("extractionStrategy")
        })
        return _obj


