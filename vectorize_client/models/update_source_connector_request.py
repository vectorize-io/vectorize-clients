# coding: utf-8

"""
    Vectorize API (Beta)

    API for Vectorize services

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from vectorize_client.models.amazon_s31 import AmazonS31
from vectorize_client.models.azure_blob_storage1 import AzureBlobStorage1
from vectorize_client.models.confluence1 import Confluence1
from vectorize_client.models.discord1 import Discord1
from vectorize_client.models.dropbox1 import Dropbox1
from vectorize_client.models.dropbox_oauth1 import DropboxOauth1
from vectorize_client.models.dropbox_oauth_multi1 import DropboxOauthMulti1
from vectorize_client.models.dropbox_oauth_multi_custom1 import DropboxOauthMultiCustom1
from vectorize_client.models.file_upload1 import FileUpload1
from vectorize_client.models.firecrawl1 import Firecrawl1
from vectorize_client.models.fireflies1 import Fireflies1
from vectorize_client.models.github1 import Github1
from vectorize_client.models.google_cloud_storage1 import GoogleCloudStorage1
from vectorize_client.models.google_drive1 import GoogleDrive1
from vectorize_client.models.google_drive_o_auth1 import GoogleDriveOAuth1
from vectorize_client.models.google_drive_oauth_multi1 import GoogleDriveOauthMulti1
from vectorize_client.models.google_drive_oauth_multi_custom1 import GoogleDriveOauthMultiCustom1
from vectorize_client.models.intercom1 import Intercom1
from vectorize_client.models.notion1 import Notion1
from vectorize_client.models.notion_oauth_multi1 import NotionOauthMulti1
from vectorize_client.models.notion_oauth_multi_custom1 import NotionOauthMultiCustom1
from vectorize_client.models.one_drive1 import OneDrive1
from vectorize_client.models.sharepoint1 import Sharepoint1
from vectorize_client.models.web_crawler1 import WebCrawler1
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

UPDATESOURCECONNECTORREQUEST_ONE_OF_SCHEMAS = ["AmazonS31", "AzureBlobStorage1", "Confluence1", "Discord1", "Dropbox1", "DropboxOauth1", "DropboxOauthMulti1", "DropboxOauthMultiCustom1", "FileUpload1", "Firecrawl1", "Fireflies1", "Github1", "GoogleCloudStorage1", "GoogleDrive1", "GoogleDriveOAuth1", "GoogleDriveOauthMulti1", "GoogleDriveOauthMultiCustom1", "Intercom1", "Notion1", "NotionOauthMulti1", "NotionOauthMultiCustom1", "OneDrive1", "Sharepoint1", "WebCrawler1"]

class UpdateSourceConnectorRequest(BaseModel):
    """
    UpdateSourceConnectorRequest
    """
    # data type: AmazonS31
    oneof_schema_1_validator: Optional[AmazonS31] = None
    # data type: AzureBlobStorage1
    oneof_schema_2_validator: Optional[AzureBlobStorage1] = None
    # data type: Confluence1
    oneof_schema_3_validator: Optional[Confluence1] = None
    # data type: Discord1
    oneof_schema_4_validator: Optional[Discord1] = None
    # data type: Dropbox1
    oneof_schema_5_validator: Optional[Dropbox1] = None
    # data type: DropboxOauth1
    oneof_schema_6_validator: Optional[DropboxOauth1] = None
    # data type: DropboxOauthMulti1
    oneof_schema_7_validator: Optional[DropboxOauthMulti1] = None
    # data type: DropboxOauthMultiCustom1
    oneof_schema_8_validator: Optional[DropboxOauthMultiCustom1] = None
    # data type: GoogleDriveOAuth1
    oneof_schema_9_validator: Optional[GoogleDriveOAuth1] = None
    # data type: GoogleDrive1
    oneof_schema_10_validator: Optional[GoogleDrive1] = None
    # data type: GoogleDriveOauthMulti1
    oneof_schema_11_validator: Optional[GoogleDriveOauthMulti1] = None
    # data type: GoogleDriveOauthMultiCustom1
    oneof_schema_12_validator: Optional[GoogleDriveOauthMultiCustom1] = None
    # data type: Firecrawl1
    oneof_schema_13_validator: Optional[Firecrawl1] = None
    # data type: GoogleCloudStorage1
    oneof_schema_14_validator: Optional[GoogleCloudStorage1] = None
    # data type: Intercom1
    oneof_schema_15_validator: Optional[Intercom1] = None
    # data type: Notion1
    oneof_schema_16_validator: Optional[Notion1] = None
    # data type: NotionOauthMulti1
    oneof_schema_17_validator: Optional[NotionOauthMulti1] = None
    # data type: NotionOauthMultiCustom1
    oneof_schema_18_validator: Optional[NotionOauthMultiCustom1] = None
    # data type: OneDrive1
    oneof_schema_19_validator: Optional[OneDrive1] = None
    # data type: Sharepoint1
    oneof_schema_20_validator: Optional[Sharepoint1] = None
    # data type: WebCrawler1
    oneof_schema_21_validator: Optional[WebCrawler1] = None
    # data type: FileUpload1
    oneof_schema_22_validator: Optional[FileUpload1] = None
    # data type: Github1
    oneof_schema_23_validator: Optional[Github1] = None
    # data type: Fireflies1
    oneof_schema_24_validator: Optional[Fireflies1] = None
    actual_instance: Optional[Union[AmazonS31, AzureBlobStorage1, Confluence1, Discord1, Dropbox1, DropboxOauth1, DropboxOauthMulti1, DropboxOauthMultiCustom1, FileUpload1, Firecrawl1, Fireflies1, Github1, GoogleCloudStorage1, GoogleDrive1, GoogleDriveOAuth1, GoogleDriveOauthMulti1, GoogleDriveOauthMultiCustom1, Intercom1, Notion1, NotionOauthMulti1, NotionOauthMultiCustom1, OneDrive1, Sharepoint1, WebCrawler1]] = None
    one_of_schemas: Set[str] = { "AmazonS31", "AzureBlobStorage1", "Confluence1", "Discord1", "Dropbox1", "DropboxOauth1", "DropboxOauthMulti1", "DropboxOauthMultiCustom1", "FileUpload1", "Firecrawl1", "Fireflies1", "Github1", "GoogleCloudStorage1", "GoogleDrive1", "GoogleDriveOAuth1", "GoogleDriveOauthMulti1", "GoogleDriveOauthMultiCustom1", "Intercom1", "Notion1", "NotionOauthMulti1", "NotionOauthMultiCustom1", "OneDrive1", "Sharepoint1", "WebCrawler1" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = UpdateSourceConnectorRequest.model_construct()
        error_messages = []
        match = 0
        # validate data type: AmazonS31
        if not isinstance(v, AmazonS31):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AmazonS31`")
        else:
            match += 1
        # validate data type: AzureBlobStorage1
        if not isinstance(v, AzureBlobStorage1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AzureBlobStorage1`")
        else:
            match += 1
        # validate data type: Confluence1
        if not isinstance(v, Confluence1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Confluence1`")
        else:
            match += 1
        # validate data type: Discord1
        if not isinstance(v, Discord1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Discord1`")
        else:
            match += 1
        # validate data type: Dropbox1
        if not isinstance(v, Dropbox1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Dropbox1`")
        else:
            match += 1
        # validate data type: DropboxOauth1
        if not isinstance(v, DropboxOauth1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DropboxOauth1`")
        else:
            match += 1
        # validate data type: DropboxOauthMulti1
        if not isinstance(v, DropboxOauthMulti1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DropboxOauthMulti1`")
        else:
            match += 1
        # validate data type: DropboxOauthMultiCustom1
        if not isinstance(v, DropboxOauthMultiCustom1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DropboxOauthMultiCustom1`")
        else:
            match += 1
        # validate data type: GoogleDriveOAuth1
        if not isinstance(v, GoogleDriveOAuth1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleDriveOAuth1`")
        else:
            match += 1
        # validate data type: GoogleDrive1
        if not isinstance(v, GoogleDrive1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleDrive1`")
        else:
            match += 1
        # validate data type: GoogleDriveOauthMulti1
        if not isinstance(v, GoogleDriveOauthMulti1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleDriveOauthMulti1`")
        else:
            match += 1
        # validate data type: GoogleDriveOauthMultiCustom1
        if not isinstance(v, GoogleDriveOauthMultiCustom1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleDriveOauthMultiCustom1`")
        else:
            match += 1
        # validate data type: Firecrawl1
        if not isinstance(v, Firecrawl1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Firecrawl1`")
        else:
            match += 1
        # validate data type: GoogleCloudStorage1
        if not isinstance(v, GoogleCloudStorage1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleCloudStorage1`")
        else:
            match += 1
        # validate data type: Intercom1
        if not isinstance(v, Intercom1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Intercom1`")
        else:
            match += 1
        # validate data type: Notion1
        if not isinstance(v, Notion1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Notion1`")
        else:
            match += 1
        # validate data type: NotionOauthMulti1
        if not isinstance(v, NotionOauthMulti1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotionOauthMulti1`")
        else:
            match += 1
        # validate data type: NotionOauthMultiCustom1
        if not isinstance(v, NotionOauthMultiCustom1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotionOauthMultiCustom1`")
        else:
            match += 1
        # validate data type: OneDrive1
        if not isinstance(v, OneDrive1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OneDrive1`")
        else:
            match += 1
        # validate data type: Sharepoint1
        if not isinstance(v, Sharepoint1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Sharepoint1`")
        else:
            match += 1
        # validate data type: WebCrawler1
        if not isinstance(v, WebCrawler1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebCrawler1`")
        else:
            match += 1
        # validate data type: FileUpload1
        if not isinstance(v, FileUpload1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FileUpload1`")
        else:
            match += 1
        # validate data type: Github1
        if not isinstance(v, Github1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Github1`")
        else:
            match += 1
        # validate data type: Fireflies1
        if not isinstance(v, Fireflies1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Fireflies1`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in UpdateSourceConnectorRequest with oneOf schemas: AmazonS31, AzureBlobStorage1, Confluence1, Discord1, Dropbox1, DropboxOauth1, DropboxOauthMulti1, DropboxOauthMultiCustom1, FileUpload1, Firecrawl1, Fireflies1, Github1, GoogleCloudStorage1, GoogleDrive1, GoogleDriveOAuth1, GoogleDriveOauthMulti1, GoogleDriveOauthMultiCustom1, Intercom1, Notion1, NotionOauthMulti1, NotionOauthMultiCustom1, OneDrive1, Sharepoint1, WebCrawler1. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in UpdateSourceConnectorRequest with oneOf schemas: AmazonS31, AzureBlobStorage1, Confluence1, Discord1, Dropbox1, DropboxOauth1, DropboxOauthMulti1, DropboxOauthMultiCustom1, FileUpload1, Firecrawl1, Fireflies1, Github1, GoogleCloudStorage1, GoogleDrive1, GoogleDriveOAuth1, GoogleDriveOauthMulti1, GoogleDriveOauthMultiCustom1, Intercom1, Notion1, NotionOauthMulti1, NotionOauthMultiCustom1, OneDrive1, Sharepoint1, WebCrawler1. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AmazonS31
        try:
            instance.actual_instance = AmazonS31.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AzureBlobStorage1
        try:
            instance.actual_instance = AzureBlobStorage1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Confluence1
        try:
            instance.actual_instance = Confluence1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Discord1
        try:
            instance.actual_instance = Discord1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Dropbox1
        try:
            instance.actual_instance = Dropbox1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DropboxOauth1
        try:
            instance.actual_instance = DropboxOauth1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DropboxOauthMulti1
        try:
            instance.actual_instance = DropboxOauthMulti1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DropboxOauthMultiCustom1
        try:
            instance.actual_instance = DropboxOauthMultiCustom1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleDriveOAuth1
        try:
            instance.actual_instance = GoogleDriveOAuth1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleDrive1
        try:
            instance.actual_instance = GoogleDrive1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleDriveOauthMulti1
        try:
            instance.actual_instance = GoogleDriveOauthMulti1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleDriveOauthMultiCustom1
        try:
            instance.actual_instance = GoogleDriveOauthMultiCustom1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Firecrawl1
        try:
            instance.actual_instance = Firecrawl1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleCloudStorage1
        try:
            instance.actual_instance = GoogleCloudStorage1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Intercom1
        try:
            instance.actual_instance = Intercom1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Notion1
        try:
            instance.actual_instance = Notion1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotionOauthMulti1
        try:
            instance.actual_instance = NotionOauthMulti1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotionOauthMultiCustom1
        try:
            instance.actual_instance = NotionOauthMultiCustom1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OneDrive1
        try:
            instance.actual_instance = OneDrive1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Sharepoint1
        try:
            instance.actual_instance = Sharepoint1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WebCrawler1
        try:
            instance.actual_instance = WebCrawler1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FileUpload1
        try:
            instance.actual_instance = FileUpload1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Github1
        try:
            instance.actual_instance = Github1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Fireflies1
        try:
            instance.actual_instance = Fireflies1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into UpdateSourceConnectorRequest with oneOf schemas: AmazonS31, AzureBlobStorage1, Confluence1, Discord1, Dropbox1, DropboxOauth1, DropboxOauthMulti1, DropboxOauthMultiCustom1, FileUpload1, Firecrawl1, Fireflies1, Github1, GoogleCloudStorage1, GoogleDrive1, GoogleDriveOAuth1, GoogleDriveOauthMulti1, GoogleDriveOauthMultiCustom1, Intercom1, Notion1, NotionOauthMulti1, NotionOauthMultiCustom1, OneDrive1, Sharepoint1, WebCrawler1. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into UpdateSourceConnectorRequest with oneOf schemas: AmazonS31, AzureBlobStorage1, Confluence1, Discord1, Dropbox1, DropboxOauth1, DropboxOauthMulti1, DropboxOauthMultiCustom1, FileUpload1, Firecrawl1, Fireflies1, Github1, GoogleCloudStorage1, GoogleDrive1, GoogleDriveOAuth1, GoogleDriveOauthMulti1, GoogleDriveOauthMultiCustom1, Intercom1, Notion1, NotionOauthMulti1, NotionOauthMultiCustom1, OneDrive1, Sharepoint1, WebCrawler1. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AmazonS31, AzureBlobStorage1, Confluence1, Discord1, Dropbox1, DropboxOauth1, DropboxOauthMulti1, DropboxOauthMultiCustom1, FileUpload1, Firecrawl1, Fireflies1, Github1, GoogleCloudStorage1, GoogleDrive1, GoogleDriveOAuth1, GoogleDriveOauthMulti1, GoogleDriveOauthMultiCustom1, Intercom1, Notion1, NotionOauthMulti1, NotionOauthMultiCustom1, OneDrive1, Sharepoint1, WebCrawler1]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


