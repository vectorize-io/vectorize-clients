# coding: utf-8

"""
    Vectorize API (Beta)

    API for Vectorize services

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from vectorize_client.models.amazon_s32 import AmazonS32
from vectorize_client.models.azure_blob_storage2 import AzureBlobStorage2
from vectorize_client.models.confluence2 import Confluence2
from vectorize_client.models.discord2 import Discord2
from vectorize_client.models.dropbox2 import Dropbox2
from vectorize_client.models.dropbox_oauth2 import DropboxOauth2
from vectorize_client.models.dropbox_oauth_multi2 import DropboxOauthMulti2
from vectorize_client.models.dropbox_oauth_multi_custom2 import DropboxOauthMultiCustom2
from vectorize_client.models.file_upload2 import FileUpload2
from vectorize_client.models.firecrawl2 import Firecrawl2
from vectorize_client.models.fireflies2 import Fireflies2
from vectorize_client.models.github2 import Github2
from vectorize_client.models.google_cloud_storage2 import GoogleCloudStorage2
from vectorize_client.models.google_drive2 import GoogleDrive2
from vectorize_client.models.google_drive_o_auth2 import GoogleDriveOAuth2
from vectorize_client.models.google_drive_oauth_multi2 import GoogleDriveOauthMulti2
from vectorize_client.models.google_drive_oauth_multi_custom2 import GoogleDriveOauthMultiCustom2
from vectorize_client.models.intercom2 import Intercom2
from vectorize_client.models.notion2 import Notion2
from vectorize_client.models.notion_oauth_multi2 import NotionOauthMulti2
from vectorize_client.models.notion_oauth_multi_custom2 import NotionOauthMultiCustom2
from vectorize_client.models.one_drive2 import OneDrive2
from vectorize_client.models.sharepoint2 import Sharepoint2
from vectorize_client.models.web_crawler2 import WebCrawler2
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

PIPELINESOURCECONNECTORREQUESTINNER_ONE_OF_SCHEMAS = ["AmazonS32", "AzureBlobStorage2", "Confluence2", "Discord2", "Dropbox2", "DropboxOauth2", "DropboxOauthMulti2", "DropboxOauthMultiCustom2", "FileUpload2", "Firecrawl2", "Fireflies2", "Github2", "GoogleCloudStorage2", "GoogleDrive2", "GoogleDriveOAuth2", "GoogleDriveOauthMulti2", "GoogleDriveOauthMultiCustom2", "Intercom2", "Notion2", "NotionOauthMulti2", "NotionOauthMultiCustom2", "OneDrive2", "Sharepoint2", "WebCrawler2"]

class PipelineSourceConnectorRequestInner(BaseModel):
    """
    PipelineSourceConnectorRequestInner
    """
    # data type: AmazonS32
    oneof_schema_1_validator: Optional[AmazonS32] = None
    # data type: AzureBlobStorage2
    oneof_schema_2_validator: Optional[AzureBlobStorage2] = None
    # data type: Confluence2
    oneof_schema_3_validator: Optional[Confluence2] = None
    # data type: Discord2
    oneof_schema_4_validator: Optional[Discord2] = None
    # data type: Dropbox2
    oneof_schema_5_validator: Optional[Dropbox2] = None
    # data type: DropboxOauth2
    oneof_schema_6_validator: Optional[DropboxOauth2] = None
    # data type: DropboxOauthMulti2
    oneof_schema_7_validator: Optional[DropboxOauthMulti2] = None
    # data type: DropboxOauthMultiCustom2
    oneof_schema_8_validator: Optional[DropboxOauthMultiCustom2] = None
    # data type: GoogleDriveOAuth2
    oneof_schema_9_validator: Optional[GoogleDriveOAuth2] = None
    # data type: GoogleDrive2
    oneof_schema_10_validator: Optional[GoogleDrive2] = None
    # data type: GoogleDriveOauthMulti2
    oneof_schema_11_validator: Optional[GoogleDriveOauthMulti2] = None
    # data type: GoogleDriveOauthMultiCustom2
    oneof_schema_12_validator: Optional[GoogleDriveOauthMultiCustom2] = None
    # data type: Firecrawl2
    oneof_schema_13_validator: Optional[Firecrawl2] = None
    # data type: GoogleCloudStorage2
    oneof_schema_14_validator: Optional[GoogleCloudStorage2] = None
    # data type: Intercom2
    oneof_schema_15_validator: Optional[Intercom2] = None
    # data type: Notion2
    oneof_schema_16_validator: Optional[Notion2] = None
    # data type: NotionOauthMulti2
    oneof_schema_17_validator: Optional[NotionOauthMulti2] = None
    # data type: NotionOauthMultiCustom2
    oneof_schema_18_validator: Optional[NotionOauthMultiCustom2] = None
    # data type: OneDrive2
    oneof_schema_19_validator: Optional[OneDrive2] = None
    # data type: Sharepoint2
    oneof_schema_20_validator: Optional[Sharepoint2] = None
    # data type: WebCrawler2
    oneof_schema_21_validator: Optional[WebCrawler2] = None
    # data type: FileUpload2
    oneof_schema_22_validator: Optional[FileUpload2] = None
    # data type: Github2
    oneof_schema_23_validator: Optional[Github2] = None
    # data type: Fireflies2
    oneof_schema_24_validator: Optional[Fireflies2] = None
    actual_instance: Optional[Union[AmazonS32, AzureBlobStorage2, Confluence2, Discord2, Dropbox2, DropboxOauth2, DropboxOauthMulti2, DropboxOauthMultiCustom2, FileUpload2, Firecrawl2, Fireflies2, Github2, GoogleCloudStorage2, GoogleDrive2, GoogleDriveOAuth2, GoogleDriveOauthMulti2, GoogleDriveOauthMultiCustom2, Intercom2, Notion2, NotionOauthMulti2, NotionOauthMultiCustom2, OneDrive2, Sharepoint2, WebCrawler2]] = None
    one_of_schemas: Set[str] = { "AmazonS32", "AzureBlobStorage2", "Confluence2", "Discord2", "Dropbox2", "DropboxOauth2", "DropboxOauthMulti2", "DropboxOauthMultiCustom2", "FileUpload2", "Firecrawl2", "Fireflies2", "Github2", "GoogleCloudStorage2", "GoogleDrive2", "GoogleDriveOAuth2", "GoogleDriveOauthMulti2", "GoogleDriveOauthMultiCustom2", "Intercom2", "Notion2", "NotionOauthMulti2", "NotionOauthMultiCustom2", "OneDrive2", "Sharepoint2", "WebCrawler2" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = PipelineSourceConnectorRequestInner.model_construct()
        error_messages = []
        match = 0
        # validate data type: AmazonS32
        if not isinstance(v, AmazonS32):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AmazonS32`")
        else:
            match += 1
        # validate data type: AzureBlobStorage2
        if not isinstance(v, AzureBlobStorage2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AzureBlobStorage2`")
        else:
            match += 1
        # validate data type: Confluence2
        if not isinstance(v, Confluence2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Confluence2`")
        else:
            match += 1
        # validate data type: Discord2
        if not isinstance(v, Discord2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Discord2`")
        else:
            match += 1
        # validate data type: Dropbox2
        if not isinstance(v, Dropbox2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Dropbox2`")
        else:
            match += 1
        # validate data type: DropboxOauth2
        if not isinstance(v, DropboxOauth2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DropboxOauth2`")
        else:
            match += 1
        # validate data type: DropboxOauthMulti2
        if not isinstance(v, DropboxOauthMulti2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DropboxOauthMulti2`")
        else:
            match += 1
        # validate data type: DropboxOauthMultiCustom2
        if not isinstance(v, DropboxOauthMultiCustom2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DropboxOauthMultiCustom2`")
        else:
            match += 1
        # validate data type: GoogleDriveOAuth2
        if not isinstance(v, GoogleDriveOAuth2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleDriveOAuth2`")
        else:
            match += 1
        # validate data type: GoogleDrive2
        if not isinstance(v, GoogleDrive2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleDrive2`")
        else:
            match += 1
        # validate data type: GoogleDriveOauthMulti2
        if not isinstance(v, GoogleDriveOauthMulti2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleDriveOauthMulti2`")
        else:
            match += 1
        # validate data type: GoogleDriveOauthMultiCustom2
        if not isinstance(v, GoogleDriveOauthMultiCustom2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleDriveOauthMultiCustom2`")
        else:
            match += 1
        # validate data type: Firecrawl2
        if not isinstance(v, Firecrawl2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Firecrawl2`")
        else:
            match += 1
        # validate data type: GoogleCloudStorage2
        if not isinstance(v, GoogleCloudStorage2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleCloudStorage2`")
        else:
            match += 1
        # validate data type: Intercom2
        if not isinstance(v, Intercom2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Intercom2`")
        else:
            match += 1
        # validate data type: Notion2
        if not isinstance(v, Notion2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Notion2`")
        else:
            match += 1
        # validate data type: NotionOauthMulti2
        if not isinstance(v, NotionOauthMulti2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotionOauthMulti2`")
        else:
            match += 1
        # validate data type: NotionOauthMultiCustom2
        if not isinstance(v, NotionOauthMultiCustom2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotionOauthMultiCustom2`")
        else:
            match += 1
        # validate data type: OneDrive2
        if not isinstance(v, OneDrive2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OneDrive2`")
        else:
            match += 1
        # validate data type: Sharepoint2
        if not isinstance(v, Sharepoint2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Sharepoint2`")
        else:
            match += 1
        # validate data type: WebCrawler2
        if not isinstance(v, WebCrawler2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebCrawler2`")
        else:
            match += 1
        # validate data type: FileUpload2
        if not isinstance(v, FileUpload2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FileUpload2`")
        else:
            match += 1
        # validate data type: Github2
        if not isinstance(v, Github2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Github2`")
        else:
            match += 1
        # validate data type: Fireflies2
        if not isinstance(v, Fireflies2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Fireflies2`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in PipelineSourceConnectorRequestInner with oneOf schemas: AmazonS32, AzureBlobStorage2, Confluence2, Discord2, Dropbox2, DropboxOauth2, DropboxOauthMulti2, DropboxOauthMultiCustom2, FileUpload2, Firecrawl2, Fireflies2, Github2, GoogleCloudStorage2, GoogleDrive2, GoogleDriveOAuth2, GoogleDriveOauthMulti2, GoogleDriveOauthMultiCustom2, Intercom2, Notion2, NotionOauthMulti2, NotionOauthMultiCustom2, OneDrive2, Sharepoint2, WebCrawler2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in PipelineSourceConnectorRequestInner with oneOf schemas: AmazonS32, AzureBlobStorage2, Confluence2, Discord2, Dropbox2, DropboxOauth2, DropboxOauthMulti2, DropboxOauthMultiCustom2, FileUpload2, Firecrawl2, Fireflies2, Github2, GoogleCloudStorage2, GoogleDrive2, GoogleDriveOAuth2, GoogleDriveOauthMulti2, GoogleDriveOauthMultiCustom2, Intercom2, Notion2, NotionOauthMulti2, NotionOauthMultiCustom2, OneDrive2, Sharepoint2, WebCrawler2. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AmazonS32
        try:
            instance.actual_instance = AmazonS32.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AzureBlobStorage2
        try:
            instance.actual_instance = AzureBlobStorage2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Confluence2
        try:
            instance.actual_instance = Confluence2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Discord2
        try:
            instance.actual_instance = Discord2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Dropbox2
        try:
            instance.actual_instance = Dropbox2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DropboxOauth2
        try:
            instance.actual_instance = DropboxOauth2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DropboxOauthMulti2
        try:
            instance.actual_instance = DropboxOauthMulti2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DropboxOauthMultiCustom2
        try:
            instance.actual_instance = DropboxOauthMultiCustom2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleDriveOAuth2
        try:
            instance.actual_instance = GoogleDriveOAuth2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleDrive2
        try:
            instance.actual_instance = GoogleDrive2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleDriveOauthMulti2
        try:
            instance.actual_instance = GoogleDriveOauthMulti2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleDriveOauthMultiCustom2
        try:
            instance.actual_instance = GoogleDriveOauthMultiCustom2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Firecrawl2
        try:
            instance.actual_instance = Firecrawl2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleCloudStorage2
        try:
            instance.actual_instance = GoogleCloudStorage2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Intercom2
        try:
            instance.actual_instance = Intercom2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Notion2
        try:
            instance.actual_instance = Notion2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotionOauthMulti2
        try:
            instance.actual_instance = NotionOauthMulti2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotionOauthMultiCustom2
        try:
            instance.actual_instance = NotionOauthMultiCustom2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OneDrive2
        try:
            instance.actual_instance = OneDrive2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Sharepoint2
        try:
            instance.actual_instance = Sharepoint2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WebCrawler2
        try:
            instance.actual_instance = WebCrawler2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FileUpload2
        try:
            instance.actual_instance = FileUpload2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Github2
        try:
            instance.actual_instance = Github2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Fireflies2
        try:
            instance.actual_instance = Fireflies2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into PipelineSourceConnectorRequestInner with oneOf schemas: AmazonS32, AzureBlobStorage2, Confluence2, Discord2, Dropbox2, DropboxOauth2, DropboxOauthMulti2, DropboxOauthMultiCustom2, FileUpload2, Firecrawl2, Fireflies2, Github2, GoogleCloudStorage2, GoogleDrive2, GoogleDriveOAuth2, GoogleDriveOauthMulti2, GoogleDriveOauthMultiCustom2, Intercom2, Notion2, NotionOauthMulti2, NotionOauthMultiCustom2, OneDrive2, Sharepoint2, WebCrawler2. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into PipelineSourceConnectorRequestInner with oneOf schemas: AmazonS32, AzureBlobStorage2, Confluence2, Discord2, Dropbox2, DropboxOauth2, DropboxOauthMulti2, DropboxOauthMultiCustom2, FileUpload2, Firecrawl2, Fireflies2, Github2, GoogleCloudStorage2, GoogleDrive2, GoogleDriveOAuth2, GoogleDriveOauthMulti2, GoogleDriveOauthMultiCustom2, Intercom2, Notion2, NotionOauthMulti2, NotionOauthMultiCustom2, OneDrive2, Sharepoint2, WebCrawler2. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AmazonS32, AzureBlobStorage2, Confluence2, Discord2, Dropbox2, DropboxOauth2, DropboxOauthMulti2, DropboxOauthMultiCustom2, FileUpload2, Firecrawl2, Fireflies2, Github2, GoogleCloudStorage2, GoogleDrive2, GoogleDriveOAuth2, GoogleDriveOauthMulti2, GoogleDriveOauthMultiCustom2, Intercom2, Notion2, NotionOauthMulti2, NotionOauthMultiCustom2, OneDrive2, Sharepoint2, WebCrawler2]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


