{
  "openapi": "3.0.0",
  "info": {
    "title": "Vectorize API",
    "version": "0.1.0",
    "description": "API for Vectorize services (Beta)",
    "contact": {
      "name": "Vectorize",
      "url": "https://vectorize.io"
    },
    "x-release-date": "2025-07-08"
  },
  "servers": [
    {
      "url": "https://api.vectorize.io/v1",
      "description": "Vectorize API"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "CreatePipelineResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ]
          }
        },
        "required": [
          "message",
          "data"
        ]
      },
      "SourceConnectorType": {
        "type": "string",
        "enum": [
          "AWS_S3",
          "AZURE_BLOB",
          "CONFLUENCE",
          "DISCORD",
          "DROPBOX",
          "DROPBOX_OAUTH",
          "DROPBOX_OAUTH_MULTI",
          "DROPBOX_OAUTH_MULTI_CUSTOM",
          "FILE_UPLOAD",
          "GOOGLE_DRIVE_OAUTH",
          "GOOGLE_DRIVE",
          "GOOGLE_DRIVE_OAUTH_MULTI",
          "GOOGLE_DRIVE_OAUTH_MULTI_CUSTOM",
          "FIRECRAWL",
          "GCS",
          "INTERCOM",
          "NOTION",
          "NOTION_OAUTH_MULTI",
          "NOTION_OAUTH_MULTI_CUSTOM",
          "ONE_DRIVE",
          "SHAREPOINT",
          "WEB_CRAWLER",
          "GITHUB",
          "FIREFLIES",
          "GMAIL"
        ]
      },
      "SourceConnectorSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/SourceConnectorType"
          },
          "config": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "required": [
          "id",
          "type",
          "config"
        ],
        "additionalProperties": false
      },
      "DestinationConnectorTypeForPipeline": {
        "type": "string",
        "enum": [
          "CAPELLA",
          "DATASTAX",
          "ELASTIC",
          "PINECONE",
          "SINGLESTORE",
          "MILVUS",
          "POSTGRESQL",
          "QDRANT",
          "SUPABASE",
          "WEAVIATE",
          "AZUREAISEARCH",
          "TURBOPUFFER",
          "VECTORIZE"
        ]
      },
      "DestinationConnectorSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/DestinationConnectorTypeForPipeline"
          },
          "config": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "required": [
          "id",
          "type"
        ],
        "additionalProperties": false
      },
      "AIPlatformTypeForPipeline": {
        "type": "string",
        "enum": [
          "BEDROCK",
          "VERTEX",
          "OPENAI",
          "VOYAGE",
          "VECTORIZE"
        ]
      },
      "AIPlatformConfigSchema": {
        "type": "object",
        "properties": {
          "embeddingModel": {
            "type": "string",
            "enum": [
              "VECTORIZE_OPEN_AI_TEXT_EMBEDDING_2",
              "VECTORIZE_OPEN_AI_TEXT_EMBEDDING_3_LARGE",
              "VECTORIZE_OPEN_AI_TEXT_EMBEDDING_3_SMALL",
              "VECTORIZE_VOYAGE_AI_2",
              "VECTORIZE_VOYAGE_AI_3",
              "VECTORIZE_VOYAGE_AI_3_LITE",
              "VECTORIZE_VOYAGE_AI_3_LARGE",
              "VECTORIZE_VOYAGE_AI_FINANCE_2",
              "VECTORIZE_VOYAGE_AI_MULTILINGUAL_2",
              "VECTORIZE_VOYAGE_AI_LAW_2",
              "VECTORIZE_VOYAGE_AI_CODE_2",
              "VECTORIZE_VOYAGE_AI_35",
              "VECTORIZE_VOYAGE_AI_35_LITE",
              "VECTORIZE_VOYAGE_AI_CODE_3",
              "VECTORIZE_TITAN_TEXT_EMBEDDING_2",
              "VECTORIZE_TITAN_TEXT_EMBEDDING_1",
              "OPEN_AI_TEXT_EMBEDDING_2",
              "OPEN_AI_TEXT_EMBEDDING_3_SMALL",
              "OPEN_AI_TEXT_EMBEDDING_3_LARGE",
              "VOYAGE_AI_2",
              "VOYAGE_AI_3",
              "VOYAGE_AI_3_LITE",
              "VOYAGE_AI_3_LARGE",
              "VOYAGE_AI_FINANCE_2",
              "VOYAGE_AI_MULTILINGUAL_2",
              "VOYAGE_AI_LAW_2",
              "VOYAGE_AI_CODE_2",
              "VOYAGE_AI_35",
              "VOYAGE_AI_35_LITE",
              "VOYAGE_AI_CODE_3",
              "TITAN_TEXT_EMBEDDING_1",
              "TITAN_TEXT_EMBEDDING_2",
              "VERTEX_TEXT_EMBEDDING_4",
              "VERTEX_TEXT_EMBEDDING_GECKO_3",
              "VERTEX_GECKO_MULTILINGUAL_1",
              "VERTEX_MULTILINGUAL_EMBEDDING_2"
            ]
          },
          "chunkingStrategy": {
            "type": "string",
            "enum": [
              "FIXED",
              "SENTENCE",
              "PARAGRAPH",
              "MARKDOWN"
            ]
          },
          "chunkSize": {
            "type": "integer",
            "minimum": 1
          },
          "chunkOverlap": {
            "type": "integer",
            "minimum": 0
          },
          "dimensions": {
            "type": "integer",
            "minimum": 1
          },
          "extractionStrategy": {
            "type": "string",
            "enum": [
              "FAST",
              "IRIS",
              "MIXED"
            ]
          }
        },
        "additionalProperties": false
      },
      "AIPlatformConnectorSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/AIPlatformTypeForPipeline"
          },
          "config": {
            "$ref": "#/components/schemas/AIPlatformConfigSchema"
          }
        },
        "required": [
          "id",
          "type",
          "config"
        ],
        "additionalProperties": false
      },
      "ScheduleSchemaType": {
        "type": "string",
        "enum": [
          "manual",
          "realtime",
          "custom"
        ]
      },
      "ScheduleSchema": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ScheduleSchemaType"
          }
        },
        "required": [
          "type"
        ]
      },
      "PipelineConfigurationSchema": {
        "type": "object",
        "properties": {
          "sourceConnectors": {
            "$ref": "#/components/schemas/PipelineSourceConnectorRequest"
          },
          "destinationConnector": {
            "$ref": "#/components/schemas/PipelineDestinationConnectorRequest"
          },
          "aiPlatformConnector": {
            "$ref": "#/components/schemas/AIPlatformConnectorSchema"
          },
          "pipelineName": {
            "type": "string",
            "minLength": 1
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleSchema"
          }
        },
        "required": [
          "sourceConnectors",
          "destinationConnector",
          "aiPlatformConnector",
          "pipelineName",
          "schedule"
        ],
        "additionalProperties": false
      },
      "PipelineListSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "documentCount": {
            "type": "number"
          },
          "sourceConnectorAuthIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "destinationConnectorAuthIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "aiPlatformAuthIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sourceConnectorTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "destinationConnectorTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "aiPlatformTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "configDoc": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "required": [
          "id",
          "name",
          "documentCount",
          "sourceConnectorAuthIds",
          "destinationConnectorAuthIds",
          "aiPlatformAuthIds",
          "sourceConnectorTypes",
          "destinationConnectorTypes",
          "aiPlatformTypes",
          "createdAt",
          "createdBy"
        ]
      },
      "GetPipelinesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelineListSummary"
            }
          }
        },
        "required": [
          "message",
          "data"
        ]
      },
      "SourceConnector": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "configDoc": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "createdAt": {
            "type": "string",
            "nullable": true
          },
          "createdById": {
            "type": "string"
          },
          "lastUpdatedById": {
            "type": "string"
          },
          "createdByEmail": {
            "type": "string"
          },
          "lastUpdatedByEmail": {
            "type": "string"
          },
          "errorMessage": {
            "type": "string"
          },
          "verificationStatus": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "name"
        ]
      },
      "DestinationConnector": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "configDoc": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "createdAt": {
            "type": "string",
            "nullable": true
          },
          "createdById": {
            "type": "string"
          },
          "lastUpdatedById": {
            "type": "string"
          },
          "createdByEmail": {
            "type": "string"
          },
          "lastUpdatedByEmail": {
            "type": "string"
          },
          "errorMessage": {
            "type": "string"
          },
          "verificationStatus": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "name"
        ]
      },
      "AIPlatform": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "configDoc": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "createdAt": {
            "type": "string",
            "nullable": true
          },
          "createdById": {
            "type": "string"
          },
          "lastUpdatedById": {
            "type": "string"
          },
          "createdByEmail": {
            "type": "string"
          },
          "lastUpdatedByEmail": {
            "type": "string"
          },
          "errorMessage": {
            "type": "string"
          },
          "verificationStatus": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "name"
        ]
      },
      "PipelineSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "documentCount": {
            "type": "number"
          },
          "sourceConnectorAuthIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "destinationConnectorAuthIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "aiPlatformAuthIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sourceConnectorTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "destinationConnectorTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "aiPlatformTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "configDoc": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "sourceConnectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceConnector"
            }
          },
          "destinationConnectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DestinationConnector"
            }
          },
          "aiPlatforms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AIPlatform"
            }
          }
        },
        "required": [
          "id",
          "name",
          "documentCount",
          "sourceConnectorAuthIds",
          "destinationConnectorAuthIds",
          "aiPlatformAuthIds",
          "sourceConnectorTypes",
          "destinationConnectorTypes",
          "aiPlatformTypes",
          "createdAt",
          "createdBy",
          "sourceConnectors",
          "destinationConnectors",
          "aiPlatforms"
        ]
      },
      "GetPipelineResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/PipelineSummary"
          }
        },
        "required": [
          "message",
          "data"
        ]
      },
      "DeletePipelineResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "PipelineEvents": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "summary": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "required": [
          "id",
          "type",
          "timestamp"
        ]
      },
      "GetPipelineEventsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "nextToken": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelineEvents"
            }
          }
        },
        "required": [
          "message",
          "data"
        ]
      },
      "PipelineMetrics": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "nullable": true
          },
          "newObjects": {
            "type": "number"
          },
          "changedObjects": {
            "type": "number"
          },
          "deletedObjects": {
            "type": "number"
          }
        },
        "required": [
          "timestamp",
          "newObjects",
          "changedObjects",
          "deletedObjects"
        ]
      },
      "GetPipelineMetricsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PipelineMetrics"
            }
          }
        },
        "required": [
          "message",
          "data"
        ]
      },
      "Document": {
        "type": "object",
        "properties": {
          "relevancy": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "chunk_id": {
            "type": "string"
          },
          "total_chunks": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "origin_id": {
            "type": "string"
          },
          "similarity": {
            "type": "number"
          },
          "source": {
            "type": "string"
          },
          "unique_source": {
            "type": "string"
          },
          "source_display_name": {
            "type": "string"
          },
          "pipeline_id": {
            "type": "string"
          },
          "org_id": {
            "type": "string"
          }
        },
        "required": [
          "relevancy",
          "id",
          "text",
          "chunk_id",
          "total_chunks",
          "origin",
          "origin_id",
          "similarity",
          "source",
          "unique_source",
          "source_display_name"
        ],
        "additionalProperties": true
      },
      "RetrieveDocumentsResponse": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "average_relevancy": {
            "type": "number"
          },
          "ndcg": {
            "type": "number"
          }
        },
        "required": [
          "question",
          "documents",
          "average_relevancy",
          "ndcg"
        ]
      },
      "RetrieveContextMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "role",
          "content"
        ]
      },
      "RetrieveContext": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RetrieveContextMessage"
            }
          }
        },
        "required": [
          "messages"
        ]
      },
      "AdvancedQuery": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "text",
              "vector",
              "hybrid"
            ],
            "default": "vector"
          },
          "text-fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "match-type": {
            "type": "string",
            "enum": [
              "match",
              "match_phrase",
              "multi_match"
            ]
          },
          "text-boost": {
            "type": "number",
            "default": 1
          },
          "filters": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "additionalProperties": true
      },
      "RetrieveDocumentsRequest": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string"
          },
          "numResults": {
            "type": "number",
            "minimum": 1
          },
          "rerank": {
            "type": "boolean",
            "default": true
          },
          "metadata-filters": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "nullable": true
              }
            }
          },
          "context": {
            "$ref": "#/components/schemas/RetrieveContext"
          },
          "advanced-query": {
            "$ref": "#/components/schemas/AdvancedQuery"
          }
        },
        "required": [
          "question",
          "numResults"
        ]
      },
      "StartPipelineResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "StopPipelineResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "StartDeepResearchResponse": {
        "type": "object",
        "properties": {
          "researchId": {
            "type": "string"
          }
        },
        "required": [
          "researchId"
        ]
      },
      "N8NConfig": {
        "type": "object",
        "properties": {
          "account": {
            "type": "string"
          },
          "webhookPath": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "account",
          "webhookPath"
        ]
      },
      "StartDeepResearchRequest": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "webSearch": {
            "type": "boolean",
            "default": false
          },
          "schema": {
            "type": "string"
          },
          "n8n": {
            "$ref": "#/components/schemas/N8NConfig"
          }
        },
        "required": [
          "query"
        ]
      },
      "DeepResearchResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "markdown": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "success"
        ]
      },
      "GetDeepResearchResponse": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/DeepResearchResult"
          }
        },
        "required": [
          "ready"
        ]
      },
      "CreatedSourceConnector": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "id"
        ]
      },
      "CreateSourceConnectorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "connector": {
            "$ref": "#/components/schemas/CreatedSourceConnector"
          }
        },
        "required": [
          "message",
          "connector"
        ]
      },
      "CreateSourceConnectorRequest": {
        "oneOf": [
          {
            "type": "object",
            "title": "AwsS3",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AWS_S3"
                ],
                "description": "Connector type (must be \"AWS_S3\")"
              },
              "config": {
                "$ref": "#/components/schemas/AWS_S3AuthConfig"
              }
            },
            "example": {
              "name": "Amazon S3 Example",
              "type": "AWS_S3",
              "config": {
                "access-key": "example-access-key",
                "secret-key": "example-secret-key",
                "bucket-name": "example-bucket-name",
                "region": "example-region",
                "archiver": false
              }
            }
          },
          {
            "type": "object",
            "title": "AzureBlob",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AZURE_BLOB"
                ],
                "description": "Connector type (must be \"AZURE_BLOB\")"
              },
              "config": {
                "$ref": "#/components/schemas/AZURE_BLOBAuthConfig"
              }
            },
            "example": {
              "name": "Azure Blob Storage Example",
              "type": "AZURE_BLOB",
              "config": {
                "storage-account-name": "example-storage-account-name",
                "storage-account-key": "example-storage-account-key",
                "container": "example-container"
              }
            }
          },
          {
            "type": "object",
            "title": "Confluence",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "CONFLUENCE"
                ],
                "description": "Connector type (must be \"CONFLUENCE\")"
              },
              "config": {
                "$ref": "#/components/schemas/CONFLUENCEAuthConfig"
              }
            },
            "example": {
              "name": "Confluence Example",
              "type": "CONFLUENCE",
              "config": {
                "username": "example-username",
                "api-token": "example-api-token",
                "domain": "example-domain"
              }
            }
          },
          {
            "type": "object",
            "title": "Discord",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "DISCORD"
                ],
                "description": "Connector type (must be \"DISCORD\")"
              },
              "config": {
                "$ref": "#/components/schemas/DISCORDAuthConfig"
              }
            },
            "example": {
              "name": "Discord Example",
              "type": "DISCORD",
              "config": {
                "server-id": "example-server-id",
                "bot-token": "example-bot-token",
                "channel-ids": "example-channel-ids"
              }
            }
          },
          {
            "type": "object",
            "title": "FileUpload",
            "required": [
              "name",
              "type"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "FILE_UPLOAD"
                ],
                "description": "Connector type (must be \"FILE_UPLOAD\")"
              }
            },
            "example": {
              "name": "File Upload Example",
              "type": "FILE_UPLOAD"
            }
          },
          {
            "type": "object",
            "title": "GoogleDrive",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "GOOGLE_DRIVE"
                ],
                "description": "Connector type (must be \"GOOGLE_DRIVE\")"
              },
              "config": {
                "$ref": "#/components/schemas/GOOGLE_DRIVEAuthConfig"
              }
            },
            "example": {
              "name": "Google Drive (Service Account) Example",
              "type": "GOOGLE_DRIVE",
              "config": {
                "service-account-json": "example-service-account-json"
              }
            }
          },
          {
            "type": "object",
            "title": "Firecrawl",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "FIRECRAWL"
                ],
                "description": "Connector type (must be \"FIRECRAWL\")"
              },
              "config": {
                "$ref": "#/components/schemas/FIRECRAWLAuthConfig"
              }
            },
            "example": {
              "name": "Firecrawl Example",
              "type": "FIRECRAWL",
              "config": {
                "api-key": "example-api-key"
              }
            }
          },
          {
            "type": "object",
            "title": "Gcs",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "GCS"
                ],
                "description": "Connector type (must be \"GCS\")"
              },
              "config": {
                "$ref": "#/components/schemas/GCSAuthConfig"
              }
            },
            "example": {
              "name": "GCP Cloud Storage Example",
              "type": "GCS",
              "config": {
                "service-account-json": "example-service-account-json",
                "bucket-name": "example-bucket-name"
              }
            }
          },
          {
            "type": "object",
            "title": "OneDrive",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ONE_DRIVE"
                ],
                "description": "Connector type (must be \"ONE_DRIVE\")"
              },
              "config": {
                "$ref": "#/components/schemas/ONE_DRIVEAuthConfig"
              }
            },
            "example": {
              "name": "OneDrive Example",
              "type": "ONE_DRIVE",
              "config": {
                "ms-client-id": "example-ms-client-id",
                "ms-tenant-id": "example-ms-tenant-id",
                "ms-client-secret": "example-ms-client-secret",
                "users": "example-users"
              }
            }
          },
          {
            "type": "object",
            "title": "Sharepoint",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "SHAREPOINT"
                ],
                "description": "Connector type (must be \"SHAREPOINT\")"
              },
              "config": {
                "$ref": "#/components/schemas/SHAREPOINTAuthConfig"
              }
            },
            "example": {
              "name": "SharePoint Example",
              "type": "SHAREPOINT",
              "config": {
                "ms-client-id": "example-ms-client-id",
                "ms-tenant-id": "example-ms-tenant-id",
                "ms-client-secret": "example-ms-client-secret"
              }
            }
          },
          {
            "type": "object",
            "title": "WebCrawler",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "WEB_CRAWLER"
                ],
                "description": "Connector type (must be \"WEB_CRAWLER\")"
              },
              "config": {
                "$ref": "#/components/schemas/WEB_CRAWLERAuthConfig"
              }
            },
            "example": {
              "name": "Web Crawler Example",
              "type": "WEB_CRAWLER",
              "config": {}
            }
          },
          {
            "type": "object",
            "title": "Github",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "GITHUB"
                ],
                "description": "Connector type (must be \"GITHUB\")"
              },
              "config": {
                "$ref": "#/components/schemas/GITHUBAuthConfig"
              }
            },
            "example": {
              "name": "GitHub Example",
              "type": "GITHUB",
              "config": {
                "oauth-token": "example-oauth-token"
              }
            }
          },
          {
            "type": "object",
            "title": "Fireflies",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "FIREFLIES"
                ],
                "description": "Connector type (must be \"FIREFLIES\")"
              },
              "config": {
                "$ref": "#/components/schemas/FIREFLIESAuthConfig"
              }
            },
            "example": {
              "name": "Fireflies.ai Example",
              "type": "FIREFLIES",
              "config": {
                "api-key": "example-api-key"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "UpdateSourceConnectorResponseData": {
        "type": "object",
        "properties": {
          "updatedConnector": {
            "$ref": "#/components/schemas/SourceConnector"
          },
          "pipelineIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "updatedConnector"
        ]
      },
      "UpdateSourceConnectorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/UpdateSourceConnectorResponseData"
          }
        },
        "required": [
          "message",
          "data"
        ]
      },
      "UpdateSourceConnectorRequest": {
        "oneOf": [
          {
            "type": "object",
            "title": "AwsS3",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/AWS_S3AuthConfig"
              }
            },
            "example": {
              "config": {
                "access-key": "Enter Access Key",
                "secret-key": "Enter Secret Key",
                "bucket-name": "Enter your S3 Bucket Name",
                "endpoint": "Enter Endpoint URL",
                "region": "Region Name",
                "archiver": false
              }
            }
          },
          {
            "type": "object",
            "title": "AzureBlob",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/AZURE_BLOBAuthConfig"
              }
            },
            "example": {
              "config": {
                "storage-account-name": "Enter Storage Account Name",
                "storage-account-key": "Enter Storage Account Key",
                "container": "Enter Container Name",
                "endpoint": "Enter Endpoint URL"
              }
            }
          },
          {
            "type": "object",
            "title": "Confluence",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/CONFLUENCEAuthConfig"
              }
            },
            "example": {
              "config": {
                "username": "Enter your Confluence username",
                "api-token": "Enter your Confluence API token",
                "domain": "Enter your Confluence domain (e.g. my-domain.atlassian.net or confluence.<my-company>.com)"
              }
            }
          },
          {
            "type": "object",
            "title": "Discord",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/DISCORDAuthConfig"
              }
            },
            "example": {
              "config": {
                "server-id": "Enter Server ID",
                "bot-token": "Enter Token",
                "channel-ids": "Enter channel ID"
              }
            }
          },
          {
            "type": "object",
            "title": "Dropbox",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/DROPBOXAuthConfig"
              }
            },
            "example": {
              "config": {}
            }
          },
          {
            "type": "object",
            "title": "DropboxOauth",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/DROPBOX_OAUTHAuthConfig"
              }
            },
            "example": {
              "config": {}
            }
          },
          {
            "type": "object",
            "title": "DropboxOauthMulti",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/DROPBOX_OAUTH_MULTIAuthConfig"
              }
            },
            "example": {
              "config": {}
            }
          },
          {
            "type": "object",
            "title": "DropboxOauthMultiCustom",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/DROPBOX_OAUTH_MULTI_CUSTOMAuthConfig"
              }
            },
            "example": {
              "config": {}
            }
          },
          {
            "type": "object",
            "title": "FileUpload",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/FILE_UPLOADAuthConfig"
              }
            },
            "example": {}
          },
          {
            "type": "object",
            "title": "GoogleDriveOauth",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/GOOGLE_DRIVE_OAUTHAuthConfig"
              }
            },
            "example": {
              "config": {}
            }
          },
          {
            "type": "object",
            "title": "GoogleDrive",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/GOOGLE_DRIVEAuthConfig"
              }
            },
            "example": {
              "config": {
                "service-account-json": "Enter the JSON key file for the service account"
              }
            }
          },
          {
            "type": "object",
            "title": "GoogleDriveOauthMulti",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/GOOGLE_DRIVE_OAUTH_MULTIAuthConfig"
              }
            },
            "example": {
              "config": {}
            }
          },
          {
            "type": "object",
            "title": "GoogleDriveOauthMultiCustom",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/GOOGLE_DRIVE_OAUTH_MULTI_CUSTOMAuthConfig"
              }
            },
            "example": {
              "config": {}
            }
          },
          {
            "type": "object",
            "title": "Firecrawl",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/FIRECRAWLAuthConfig"
              }
            },
            "example": {
              "config": {
                "api-key": "Enter your Firecrawl API Key"
              }
            }
          },
          {
            "type": "object",
            "title": "Gcs",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/GCSAuthConfig"
              }
            },
            "example": {
              "config": {
                "service-account-json": "Enter the JSON key file for the service account",
                "bucket-name": "Enter bucket name"
              }
            }
          },
          {
            "type": "object",
            "title": "Intercom",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/INTERCOMAuthConfig"
              }
            },
            "example": {
              "config": {}
            }
          },
          {
            "type": "object",
            "title": "Notion",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/NOTIONAuthConfig"
              }
            },
            "example": {
              "config": {}
            }
          },
          {
            "type": "object",
            "title": "NotionOauthMulti",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/NOTION_OAUTH_MULTIAuthConfig"
              }
            },
            "example": {
              "config": {}
            }
          },
          {
            "type": "object",
            "title": "NotionOauthMultiCustom",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/NOTION_OAUTH_MULTI_CUSTOMAuthConfig"
              }
            },
            "example": {
              "config": {}
            }
          },
          {
            "type": "object",
            "title": "OneDrive",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/ONE_DRIVEAuthConfig"
              }
            },
            "example": {
              "config": {
                "ms-client-id": "Enter Client Id",
                "ms-tenant-id": "Enter Tenant Id",
                "ms-client-secret": "Enter Client Secret",
                "users": "Enter users emails to import files from. Example: developer@vectorize.io"
              }
            }
          },
          {
            "type": "object",
            "title": "Sharepoint",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/SHAREPOINTAuthConfig"
              }
            },
            "example": {
              "config": {
                "ms-client-id": "Enter Client Id",
                "ms-tenant-id": "Enter Tenant Id",
                "ms-client-secret": "Enter Client Secret"
              }
            }
          },
          {
            "type": "object",
            "title": "WebCrawler",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/WEB_CRAWLERAuthConfig"
              }
            },
            "example": {
              "config": {
                "seed-urls": "(e.g. https://example.com)"
              }
            }
          },
          {
            "type": "object",
            "title": "Github",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/GITHUBAuthConfig"
              }
            },
            "example": {
              "config": {
                "oauth-token": "Enter your GitHub personal access token"
              }
            }
          },
          {
            "type": "object",
            "title": "Fireflies",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/FIREFLIESAuthConfig"
              }
            },
            "example": {
              "config": {
                "api-key": "Enter your Fireflies.ai API key"
              }
            }
          }
        ]
      },
      "DeleteSourceConnectorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "CreatedDestinationConnector": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "id"
        ]
      },
      "CreateDestinationConnectorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "connector": {
            "$ref": "#/components/schemas/CreatedDestinationConnector"
          }
        },
        "required": [
          "message",
          "connector"
        ]
      },
      "DestinationConnectorType": {
        "type": "string",
        "enum": [
          "CAPELLA",
          "DATASTAX",
          "ELASTIC",
          "PINECONE",
          "SINGLESTORE",
          "MILVUS",
          "POSTGRESQL",
          "QDRANT",
          "SUPABASE",
          "WEAVIATE",
          "AZUREAISEARCH",
          "TURBOPUFFER"
        ]
      },
      "CreateDestinationConnectorRequest": {
        "oneOf": [
          {
            "type": "object",
            "title": "Capella",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "CAPELLA"
                ],
                "description": "Connector type (must be \"CAPELLA\")"
              },
              "config": {
                "$ref": "#/components/schemas/CAPELLAAuthConfig"
              }
            },
            "example": {
              "name": "Couchbase Capella Example",
              "type": "CAPELLA",
              "config": {
                "bucket": "example-bucket",
                "scope": "example-scope",
                "collection": "example-collection",
                "index": "example-index"
              }
            }
          },
          {
            "type": "object",
            "title": "Datastax",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "DATASTAX"
                ],
                "description": "Connector type (must be \"DATASTAX\")"
              },
              "config": {
                "$ref": "#/components/schemas/DATASTAXAuthConfig"
              }
            },
            "example": {
              "name": "DataStax Astra Example",
              "type": "DATASTAX",
              "config": {
                "collection": "example-collection"
              }
            }
          },
          {
            "type": "object",
            "title": "Elastic",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ELASTIC"
                ],
                "description": "Connector type (must be \"ELASTIC\")"
              },
              "config": {
                "$ref": "#/components/schemas/ELASTICAuthConfig"
              }
            },
            "example": {
              "name": "Elasticsearch Example",
              "type": "ELASTIC",
              "config": {
                "index": "example-index"
              }
            }
          },
          {
            "type": "object",
            "title": "Pinecone",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "PINECONE"
                ],
                "description": "Connector type (must be \"PINECONE\")"
              },
              "config": {
                "$ref": "#/components/schemas/PINECONEAuthConfig"
              }
            },
            "example": {
              "name": "Pinecone Example",
              "type": "PINECONE",
              "config": {
                "index": "example-index",
                "namespace": "example-namespace"
              }
            }
          },
          {
            "type": "object",
            "title": "Singlestore",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "SINGLESTORE"
                ],
                "description": "Connector type (must be \"SINGLESTORE\")"
              },
              "config": {
                "$ref": "#/components/schemas/SINGLESTOREAuthConfig"
              }
            },
            "example": {
              "name": "SingleStore Example",
              "type": "SINGLESTORE",
              "config": {
                "table": "example-table"
              }
            }
          },
          {
            "type": "object",
            "title": "Milvus",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "MILVUS"
                ],
                "description": "Connector type (must be \"MILVUS\")"
              },
              "config": {
                "$ref": "#/components/schemas/MILVUSAuthConfig"
              }
            },
            "example": {
              "name": "Milvus Example",
              "type": "MILVUS",
              "config": {
                "collection": "example-collection"
              }
            }
          },
          {
            "type": "object",
            "title": "Postgresql",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "POSTGRESQL"
                ],
                "description": "Connector type (must be \"POSTGRESQL\")"
              },
              "config": {
                "$ref": "#/components/schemas/POSTGRESQLAuthConfig"
              }
            },
            "example": {
              "name": "PostgreSQL Example",
              "type": "POSTGRESQL",
              "config": {
                "table": "example-table"
              }
            }
          },
          {
            "type": "object",
            "title": "Qdrant",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "QDRANT"
                ],
                "description": "Connector type (must be \"QDRANT\")"
              },
              "config": {
                "$ref": "#/components/schemas/QDRANTAuthConfig"
              }
            },
            "example": {
              "name": "Qdrant Example",
              "type": "QDRANT",
              "config": {
                "collection": "example-collection"
              }
            }
          },
          {
            "type": "object",
            "title": "Supabase",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "SUPABASE"
                ],
                "description": "Connector type (must be \"SUPABASE\")"
              },
              "config": {
                "$ref": "#/components/schemas/SUPABASEAuthConfig"
              }
            },
            "example": {
              "name": "Supabase Example",
              "type": "SUPABASE",
              "config": {
                "table": "example-table"
              }
            }
          },
          {
            "type": "object",
            "title": "Weaviate",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "WEAVIATE"
                ],
                "description": "Connector type (must be \"WEAVIATE\")"
              },
              "config": {
                "$ref": "#/components/schemas/WEAVIATEAuthConfig"
              }
            },
            "example": {
              "name": "Weaviate Example",
              "type": "WEAVIATE",
              "config": {
                "collection": "example-collection"
              }
            }
          },
          {
            "type": "object",
            "title": "Azureaisearch",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "AZUREAISEARCH"
                ],
                "description": "Connector type (must be \"AZUREAISEARCH\")"
              },
              "config": {
                "$ref": "#/components/schemas/AZUREAISEARCHAuthConfig"
              }
            },
            "example": {
              "name": "Azure AI Search Example",
              "type": "AZUREAISEARCH",
              "config": {
                "index": "example-index"
              }
            }
          },
          {
            "type": "object",
            "title": "Turbopuffer",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "TURBOPUFFER"
                ],
                "description": "Connector type (must be \"TURBOPUFFER\")"
              },
              "config": {
                "$ref": "#/components/schemas/TURBOPUFFERAuthConfig"
              }
            },
            "example": {
              "name": "Turbopuffer Example",
              "type": "TURBOPUFFER",
              "config": {
                "namespace": "example-namespace"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "UpdatedDestinationConnectorData": {
        "type": "object",
        "properties": {
          "updatedConnector": {
            "$ref": "#/components/schemas/DestinationConnector"
          },
          "pipelineIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "updatedConnector"
        ]
      },
      "UpdateDestinationConnectorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/UpdatedDestinationConnectorData"
          }
        },
        "required": [
          "message",
          "data"
        ]
      },
      "UpdateDestinationConnectorRequest": {
        "oneOf": [
          {
            "type": "object",
            "title": "Capella",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/CAPELLAAuthConfig"
              }
            },
            "example": {
              "config": {
                "username": "Enter your cluster access name",
                "password": "Enter your cluster access password",
                "connection-string": "Enter your connection string"
              }
            }
          },
          {
            "type": "object",
            "title": "Datastax",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/DATASTAXAuthConfig"
              }
            },
            "example": {
              "config": {
                "endpoint_secret": "Enter your API endpoint",
                "token": "Enter your application token"
              }
            }
          },
          {
            "type": "object",
            "title": "Elastic",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/ELASTICAuthConfig"
              }
            },
            "example": {
              "config": {
                "host": "Enter your host",
                "port": "Enter your port",
                "api-key": "Enter your API key"
              }
            }
          },
          {
            "type": "object",
            "title": "Pinecone",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/PINECONEAuthConfig"
              }
            },
            "example": {
              "config": {
                "api-key": "Enter your API Key"
              }
            }
          },
          {
            "type": "object",
            "title": "Singlestore",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/SINGLESTOREAuthConfig"
              }
            },
            "example": {
              "config": {
                "host": "Enter the host of the deployment",
                "port": 100,
                "database": "Enter the database name",
                "username": "Enter the username",
                "password": "Enter the username's password"
              }
            }
          },
          {
            "type": "object",
            "title": "Milvus",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/MILVUSAuthConfig"
              }
            },
            "example": {
              "config": {
                "url": "Enter your public endpoint for your Milvus cluster",
                "token": "Enter your cluster token or Username/Password",
                "username": "Enter your cluster Username",
                "password": "Enter your cluster Password"
              }
            }
          },
          {
            "type": "object",
            "title": "Postgresql",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/POSTGRESQLAuthConfig"
              }
            },
            "example": {
              "config": {
                "host": "Enter the host of the deployment",
                "port": 5432,
                "database": "Enter the database name",
                "username": "Enter the username",
                "password": "Enter the username's password"
              }
            }
          },
          {
            "type": "object",
            "title": "Qdrant",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/QDRANTAuthConfig"
              }
            },
            "example": {
              "config": {
                "host": "Enter your host",
                "api-key": "Enter your API key"
              }
            }
          },
          {
            "type": "object",
            "title": "Supabase",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/SUPABASEAuthConfig"
              }
            },
            "example": {
              "config": {
                "host": "aws-0-us-east-1.pooler.supabase.com",
                "port": 5432,
                "database": "Enter the database name",
                "username": "Enter the username",
                "password": "Enter the username's password"
              }
            }
          },
          {
            "type": "object",
            "title": "Weaviate",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/WEAVIATEAuthConfig"
              }
            },
            "example": {
              "config": {
                "host": "Enter your Weaviate Cluster REST Endpoint",
                "api-key": "Enter your API key"
              }
            }
          },
          {
            "type": "object",
            "title": "Azureaisearch",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/AZUREAISEARCHAuthConfig"
              }
            },
            "example": {
              "config": {
                "service-name": "Enter your Azure AI Search service name",
                "api-key": "Enter your API key"
              }
            }
          },
          {
            "type": "object",
            "title": "Turbopuffer",
            "properties": {
              "config": {
                "$ref": "#/components/schemas/TURBOPUFFERAuthConfig"
              }
            },
            "example": {
              "config": {
                "api-key": "Enter your API key"
              }
            }
          }
        ]
      },
      "DeleteDestinationConnectorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "CreatedAIPlatformConnector": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "id"
        ]
      },
      "CreateAIPlatformConnectorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "connector": {
            "$ref": "#/components/schemas/CreatedAIPlatformConnector"
          }
        },
        "required": [
          "message",
          "connector"
        ]
      },
      "AIPlatformType": {
        "type": "string",
        "enum": [
          "BEDROCK",
          "VERTEX",
          "OPENAI",
          "VOYAGE"
        ]
      },
      "CreateAIPlatformConnectorRequest": {
        "oneOf": [
          {
            "type": "object",
            "title": "Bedrock",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "BEDROCK"
                ],
                "description": "Connector type (must be \"BEDROCK\")"
              },
              "config": {
                "$ref": "#/components/schemas/BEDROCKAuthConfig"
              }
            },
            "example": {
              "name": "Amazon Bedrock Example",
              "type": "BEDROCK",
              "config": {
                "access-key": "example-access-key",
                "key": "example-key"
              }
            }
          },
          {
            "type": "object",
            "title": "Vertex",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "VERTEX"
                ],
                "description": "Connector type (must be \"VERTEX\")"
              },
              "config": {
                "$ref": "#/components/schemas/VERTEXAuthConfig"
              }
            },
            "example": {
              "name": "Google Vertex AI Example",
              "type": "VERTEX",
              "config": {
                "key": "example-key",
                "region": "example-region"
              }
            }
          },
          {
            "type": "object",
            "title": "Openai",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "OPENAI"
                ],
                "description": "Connector type (must be \"OPENAI\")"
              },
              "config": {
                "$ref": "#/components/schemas/OPENAIAuthConfig"
              }
            },
            "example": {
              "name": "OpenAI Example",
              "type": "OPENAI",
              "config": {
                "key": "example-key"
              }
            }
          },
          {
            "type": "object",
            "title": "Voyage",
            "required": [
              "name",
              "type",
              "config"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the connector"
              },
              "type": {
                "type": "string",
                "enum": [
                  "VOYAGE"
                ],
                "description": "Connector type (must be \"VOYAGE\")"
              },
              "config": {
                "$ref": "#/components/schemas/VOYAGEAuthConfig"
              }
            },
            "example": {
              "name": "Voyage AI Example",
              "type": "VOYAGE",
              "config": {
                "key": "example-key"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "UpdatedAIPlatformConnectorData": {
        "type": "object",
        "properties": {
          "updatedConnector": {
            "$ref": "#/components/schemas/AIPlatform"
          },
          "pipelineIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "updatedConnector"
        ]
      },
      "UpdateAIPlatformConnectorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/UpdatedAIPlatformConnectorData"
          }
        },
        "required": [
          "message",
          "data"
        ]
      },
      "UpdateAIPlatformConnectorRequest": {
        "oneOf": [
          {
            "type": "object",
            "title": "Bedrock",
            "properties": {
              "config": {
                "type": "object",
                "description": "Configuration updates"
              }
            },
            "example": {
              "config": {}
            }
          },
          {
            "type": "object",
            "title": "Vertex",
            "properties": {
              "config": {
                "type": "object",
                "description": "Configuration updates"
              }
            },
            "example": {
              "config": {}
            }
          },
          {
            "type": "object",
            "title": "Openai",
            "properties": {
              "config": {
                "type": "object",
                "description": "Configuration updates"
              }
            },
            "example": {
              "config": {}
            }
          },
          {
            "type": "object",
            "title": "Voyage",
            "properties": {
              "config": {
                "type": "object",
                "description": "Configuration updates"
              }
            },
            "example": {
              "config": {}
            }
          }
        ]
      },
      "DeleteAIPlatformConnectorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "UploadFile": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "extension": {
            "type": "string"
          },
          "lastModified": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "required": [
          "key",
          "name",
          "size",
          "lastModified",
          "metadata"
        ]
      },
      "GetUploadFilesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UploadFile"
            }
          }
        },
        "required": [
          "message",
          "files"
        ]
      },
      "StartFileUploadToConnectorResponse": {
        "type": "object",
        "properties": {
          "uploadUrl": {
            "type": "string"
          }
        },
        "required": [
          "uploadUrl"
        ]
      },
      "StartFileUploadToConnectorRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "contentType"
        ]
      },
      "DeleteFileResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "fileName"
        ]
      },
      "StartExtractionResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "extractionId": {
            "type": "string"
          }
        },
        "required": [
          "message",
          "extractionId"
        ]
      },
      "ExtractionType": {
        "type": "string",
        "enum": [
          "iris"
        ],
        "default": "iris"
      },
      "ExtractionChunkingStrategy": {
        "type": "string",
        "enum": [
          "markdown"
        ],
        "default": "markdown"
      },
      "MetadataExtractionStrategySchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "schema": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "schema"
        ]
      },
      "MetadataExtractionStrategy": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataExtractionStrategySchema"
            }
          },
          "inferSchema": {
            "type": "boolean"
          }
        }
      },
      "StartExtractionRequest": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ExtractionType"
          },
          "chunkingStrategy": {
            "$ref": "#/components/schemas/ExtractionChunkingStrategy"
          },
          "chunkSize": {
            "type": "number",
            "default": 256
          },
          "metadata": {
            "$ref": "#/components/schemas/MetadataExtractionStrategy"
          }
        },
        "required": [
          "fileId"
        ]
      },
      "ExtractionResult": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "chunks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "text": {
            "type": "string"
          },
          "metadata": {
            "type": "string"
          },
          "metadataSchema": {
            "type": "string"
          },
          "chunksMetadata": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "chunksSchema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "success"
        ]
      },
      "ExtractionResultResponse": {
        "type": "object",
        "properties": {
          "ready": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/ExtractionResult"
          }
        },
        "required": [
          "ready"
        ]
      },
      "StartFileUploadResponse": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string"
          },
          "uploadUrl": {
            "type": "string"
          }
        },
        "required": [
          "fileId",
          "uploadUrl"
        ]
      },
      "StartFileUploadRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "contentType"
        ]
      },
      "AddUserFromSourceConnectorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "AddUserToSourceConnectorRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "selectedFiles": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "mimeType": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "mimeType"
                  ]
                }
              },
              {
                "type": "object",
                "properties": {
                  "pageIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "databaseIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "refreshToken": {
            "type": "string"
          },
          "accessToken": {
            "type": "string"
          }
        },
        "required": [
          "userId",
          "selectedFiles"
        ]
      },
      "UpdateUserInSourceConnectorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "UpdateUserInSourceConnectorRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "selectedFiles": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "mimeType": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "mimeType"
                  ]
                }
              },
              {
                "type": "object",
                "properties": {
                  "pageIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "databaseIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "refreshToken": {
            "type": "string"
          },
          "accessToken": {
            "type": "string"
          }
        },
        "required": [
          "userId"
        ]
      },
      "RemoveUserFromSourceConnectorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "RemoveUserFromSourceConnectorRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "userId"
        ]
      },
      "AWS_S3AuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Amazon S3",
        "properties": {
          "access-key": {
            "type": "string",
            "format": "password",
            "description": "Access Key. Example: Enter Access Key",
            "pattern": "^\\S.*\\S$|^\\S$"
          },
          "secret-key": {
            "type": "string",
            "format": "password",
            "description": "Secret Key. Example: Enter Secret Key",
            "pattern": "^\\S.*\\S$|^\\S$"
          },
          "bucket-name": {
            "type": "string",
            "description": "Bucket Name. Example: Enter your S3 Bucket Name"
          },
          "endpoint": {
            "type": "string",
            "description": "Endpoint. Example: Enter Endpoint URL"
          },
          "region": {
            "type": "string",
            "description": "Region. Example: Region Name"
          },
          "archiver": {
            "type": "boolean",
            "description": "Allow as archive destination",
            "default": false
          }
        },
        "required": [
          "access-key",
          "secret-key",
          "bucket-name",
          "archiver"
        ]
      },
      "AWS_S3Config": {
        "type": "object",
        "description": "Configuration for Amazon S3 connector",
        "properties": {
          "file-extensions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pdf",
                "doc,docx,gdoc,odt,rtf,epub",
                "ppt,pptx,gslides",
                "xls,xlsx,gsheets,ods",
                "eml,msg",
                "txt",
                "html,htm",
                "md",
                "jpg,jpeg,png,webp,svg,gif",
                "json",
                "csv"
              ]
            },
            "description": "File Extensions",
            "default": [
              "pdf",
              "doc",
              "docx",
              "gdoc",
              "odt",
              "rtf",
              "epub",
              "ppt",
              "pptx",
              "gslides",
              "xls",
              "xlsx",
              "gsheets",
              "ods",
              "eml",
              "msg",
              "txt",
              "html",
              "htm",
              "md",
              "jpg",
              "jpeg",
              "png",
              "webp",
              "svg",
              "gif"
            ],
            "enum": [
              "pdf",
              "doc,docx,gdoc,odt,rtf,epub",
              "ppt,pptx,gslides",
              "xls,xlsx,gsheets,ods",
              "eml,msg",
              "txt",
              "html,htm",
              "md",
              "jpg,jpeg,png,webp,svg,gif",
              "json",
              "csv"
            ]
          },
          "idle-time": {
            "type": "number",
            "description": "Check for updates every (seconds)",
            "minimum": 1,
            "default": 30
          },
          "recursive": {
            "type": "boolean",
            "description": "Recursively scan all folders in the bucket"
          },
          "path-prefix": {
            "type": "string",
            "description": "Path Prefix"
          },
          "path-metadata-regex": {
            "type": "string",
            "description": "Path Metadata Regex"
          },
          "path-regex-group-names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Path Regex Group Names. Example: Enter Group Name"
          }
        },
        "required": [
          "file-extensions",
          "idle-time"
        ]
      },
      "AZURE_BLOBAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Azure Blob Storage",
        "properties": {
          "storage-account-name": {
            "type": "string",
            "description": "Storage Account Name. Example: Enter Storage Account Name"
          },
          "storage-account-key": {
            "type": "string",
            "format": "password",
            "description": "Storage Account Key. Example: Enter Storage Account Key"
          },
          "container": {
            "type": "string",
            "description": "Container. Example: Enter Container Name"
          },
          "endpoint": {
            "type": "string",
            "description": "Endpoint. Example: Enter Endpoint URL"
          }
        },
        "required": [
          "storage-account-name",
          "storage-account-key",
          "container"
        ]
      },
      "AZURE_BLOBConfig": {
        "type": "object",
        "description": "Configuration for Azure Blob Storage connector",
        "properties": {
          "file-extensions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pdf",
                "doc,docx,gdoc,odt,rtf,epub",
                "ppt,pptx,gslides",
                "xls,xlsx,gsheets,ods",
                "eml,msg",
                "txt",
                "html,htm",
                "md",
                "jpg,jpeg,png,webp,svg,gif",
                "json",
                "csv"
              ]
            },
            "description": "File Extensions",
            "default": [
              "pdf",
              "doc",
              "docx",
              "gdoc",
              "odt",
              "rtf",
              "epub",
              "ppt",
              "pptx",
              "gslides",
              "xls",
              "xlsx",
              "gsheets",
              "ods",
              "eml",
              "msg",
              "txt",
              "html",
              "htm",
              "md",
              "jpg",
              "jpeg",
              "png",
              "webp",
              "svg",
              "gif"
            ],
            "enum": [
              "pdf",
              "doc,docx,gdoc,odt,rtf,epub",
              "ppt,pptx,gslides",
              "xls,xlsx,gsheets,ods",
              "eml,msg",
              "txt",
              "html,htm",
              "md",
              "jpg,jpeg,png,webp,svg,gif",
              "json",
              "csv"
            ]
          },
          "idle-time": {
            "type": "number",
            "description": "Polling Interval (seconds)",
            "minimum": 1,
            "default": 30
          },
          "recursive": {
            "type": "boolean",
            "description": "Recursively scan all folders in the bucket"
          },
          "path-prefix": {
            "type": "string",
            "description": "Path Prefix"
          },
          "path-metadata-regex": {
            "type": "string",
            "description": "Path Metadata Regex"
          },
          "path-regex-group-names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Path Regex Group Names. Example: Enter Group Name"
          }
        },
        "required": [
          "file-extensions",
          "idle-time"
        ]
      },
      "CONFLUENCEAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Confluence",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username. Example: Enter your Confluence username"
          },
          "api-token": {
            "type": "string",
            "format": "password",
            "description": "API Token. Example: Enter your Confluence API token",
            "pattern": "^\\S.*\\S$|^\\S$"
          },
          "domain": {
            "type": "string",
            "description": "Domain. Example: Enter your Confluence domain (e.g. my-domain.atlassian.net or confluence.<my-company>.com)"
          }
        },
        "required": [
          "username",
          "api-token",
          "domain"
        ]
      },
      "CONFLUENCEConfig": {
        "type": "object",
        "description": "Configuration for Confluence connector",
        "properties": {
          "spaces": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Spaces. Example: Spaces to include (name, key or id)"
          },
          "root-parents": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Root Parents. Example: Enter root parent pages"
          }
        },
        "required": [
          "spaces"
        ]
      },
      "DISCORDAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Discord",
        "properties": {
          "server-id": {
            "type": "string",
            "description": "Server ID. Example: Enter Server ID"
          },
          "bot-token": {
            "type": "string",
            "format": "password",
            "description": "Bot token. Example: Enter Token",
            "pattern": "^\\S.*\\S$|^\\S$"
          },
          "channel-ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Channel ID. Example: Enter channel ID"
          }
        },
        "required": [
          "server-id",
          "bot-token",
          "channel-ids"
        ]
      },
      "DISCORDConfig": {
        "type": "object",
        "description": "Configuration for Discord connector",
        "properties": {
          "emoji": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Emoji Filter. Example: Enter custom emoji filter name"
          },
          "author": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Author Filter. Example: Enter author name"
          },
          "ignore-author": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ignore Author Filter. Example: Enter ignore author name"
          },
          "limit": {
            "type": "number",
            "description": "Limit. Example: Enter limit",
            "minimum": 1,
            "default": 10000
          },
          "thread-message-inclusion": {
            "type": "string",
            "description": "Thread Message Inclusion",
            "default": "ALL",
            "enum": [
              "ALL",
              "FILTER"
            ]
          },
          "filter-logic": {
            "type": "string",
            "description": "Filter Logic",
            "default": "AND",
            "enum": [
              "AND",
              "OR"
            ]
          },
          "thread-message-mode": {
            "type": "string",
            "description": "Thread Message Mode",
            "default": "CONCATENATE",
            "enum": [
              "CONCATENATE",
              "SINGLE"
            ]
          }
        }
      },
      "DROPBOXAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Dropbox (Legacy)",
        "properties": {
          "refresh-token": {
            "type": "string",
            "format": "password",
            "description": "Connect Dropbox to Vectorize. Example: Authorize",
            "pattern": "^\\S.*\\S$|^\\S$"
          }
        },
        "required": [
          "refresh-token"
        ]
      },
      "DROPBOXConfig": {
        "type": "object",
        "description": "Configuration for Dropbox (Legacy) connector",
        "properties": {
          "path-prefix": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Read from these folders (optional). Example: Enter Path: /exampleFolder/subFolder",
            "pattern": "^\\/.*$"
          }
        }
      },
      "DROPBOX_OAUTHAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Dropbox OAuth",
        "properties": {
          "authorized-user": {
            "type": "string",
            "description": "Authorized User"
          },
          "selection-details": {
            "type": "string",
            "description": "Connect Dropbox to Vectorize. Example: Authorize"
          },
          "editedUsers": {
            "type": "object",
            "default": {}
          },
          "reconnectUsers": {
            "type": "object",
            "default": {}
          }
        },
        "required": [
          "selection-details"
        ]
      },
      "DROPBOX_OAUTH_MULTIAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Dropbox Multi-User (Vectorize)",
        "properties": {
          "authorized-users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Authorized Users"
          },
          "editedUsers": {
            "type": "object",
            "default": {}
          },
          "deletedUsers": {
            "type": "object",
            "default": {}
          }
        }
      },
      "DROPBOX_OAUTH_MULTI_CUSTOMAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Dropbox Multi-User (White Label)",
        "properties": {
          "app-key": {
            "type": "string",
            "format": "password",
            "description": "Dropbox App Key. Example: Enter App Key"
          },
          "app-secret": {
            "type": "string",
            "format": "password",
            "description": "Dropbox App Secret. Example: Enter App Secret"
          },
          "authorized-users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Authorized Users"
          },
          "editedUsers": {
            "type": "object",
            "default": {}
          },
          "deletedUsers": {
            "type": "object",
            "default": {}
          }
        },
        "required": [
          "app-key",
          "app-secret"
        ]
      },
      "FILE_UPLOADAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for File Upload",
        "properties": {
          "path-prefix": {
            "type": "string",
            "description": "Path Prefix"
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Choose files. Files uploaded to this connector can be used in pipelines to vectorize their contents. Note: files with the same name will be overwritten."
          }
        }
      },
      "FILE_UPLOADCreateConfig": {
        "type": "object",
        "description": "Create configuration for File Upload",
        "properties": {}
      },
      "GOOGLE_DRIVE_OAUTHAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Google Drive OAuth",
        "properties": {
          "authorized-user": {
            "type": "string",
            "description": "Authorized User"
          },
          "selection-details": {
            "type": "string",
            "description": "Connect Google Drive to Vectorize. Example: Authorize"
          },
          "editedUsers": {
            "type": "object",
            "default": {}
          },
          "reconnectUsers": {
            "type": "object",
            "default": {}
          }
        },
        "required": [
          "selection-details"
        ]
      },
      "GOOGLE_DRIVE_OAUTHConfig": {
        "type": "object",
        "description": "Configuration for Google Drive OAuth connector",
        "properties": {
          "file-extensions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pdf",
                "doc,docx,gdoc,odt,rtf,epub",
                "ppt,pptx,gslides",
                "xls,xlsx,gsheets,ods",
                "eml,msg",
                "txt",
                "html,htm",
                "md",
                "jpg,jpeg,png,webp,svg,gif",
                "json",
                "csv"
              ]
            },
            "description": "File Extensions",
            "default": [
              "pdf",
              "doc",
              "docx",
              "gdoc",
              "odt",
              "rtf",
              "epub",
              "ppt",
              "pptx",
              "gslides",
              "xls",
              "xlsx",
              "gsheets",
              "ods",
              "eml",
              "msg",
              "txt",
              "html",
              "htm",
              "md",
              "jpg",
              "jpeg",
              "png",
              "webp",
              "svg",
              "gif"
            ],
            "enum": [
              "pdf",
              "doc,docx,gdoc,odt,rtf,epub",
              "ppt,pptx,gslides",
              "xls,xlsx,gsheets,ods",
              "eml,msg",
              "txt",
              "html,htm",
              "md",
              "jpg,jpeg,png,webp,svg,gif",
              "json",
              "csv"
            ]
          },
          "idle-time": {
            "type": "number",
            "description": "Polling Interval (seconds). Example: Enter polling interval in seconds",
            "default": 30
          }
        },
        "required": [
          "file-extensions"
        ]
      },
      "GOOGLE_DRIVEAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Google Drive (Service Account)",
        "properties": {
          "service-account-json": {
            "type": "string",
            "format": "password",
            "description": "Service Account JSON. Example: Enter the JSON key file for the service account"
          }
        },
        "required": [
          "service-account-json"
        ]
      },
      "GOOGLE_DRIVEConfig": {
        "type": "object",
        "description": "Configuration for Google Drive (Service Account) connector",
        "properties": {
          "file-extensions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pdf",
                "doc,docx,gdoc,odt,rtf,epub",
                "ppt,pptx,gslides",
                "xls,xlsx,gsheets,ods",
                "eml,msg",
                "txt",
                "html,htm",
                "md",
                "jpg,jpeg,png,webp,svg,gif",
                "json",
                "csv"
              ]
            },
            "description": "File Extensions",
            "default": [
              "pdf",
              "doc",
              "docx",
              "gdoc",
              "odt",
              "rtf",
              "epub",
              "ppt",
              "pptx",
              "gslides",
              "xls",
              "xlsx",
              "gsheets",
              "ods",
              "eml",
              "msg",
              "txt",
              "html",
              "htm",
              "md",
              "jpg",
              "jpeg",
              "png",
              "webp",
              "svg",
              "gif"
            ],
            "enum": [
              "pdf",
              "doc,docx,gdoc,odt,rtf,epub",
              "ppt,pptx,gslides",
              "xls,xlsx,gsheets,ods",
              "eml,msg",
              "txt",
              "html,htm",
              "md",
              "jpg,jpeg,png,webp,svg,gif",
              "json",
              "csv"
            ]
          },
          "root-parents": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Restrict ingest to these folder URLs (optional). Example: Enter Folder URLs. Example: https://drive.google.com/drive/folders/1234aBCd5678_eFgH9012iJKL3456opqr",
            "pattern": "^https:\\/\\/drive\\.google\\.com\\/drive(\\/u\\/\\d+)?\\/folders\\/[a-zA-Z0-9_-]+(\\?.*)?$"
          },
          "idle-time": {
            "type": "number",
            "description": "Polling Interval (seconds). Example: Enter polling interval in seconds",
            "default": 30
          }
        },
        "required": [
          "file-extensions"
        ]
      },
      "GOOGLE_DRIVE_OAUTH_MULTIAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Google Drive Multi-User (Vectorize)",
        "properties": {
          "authorized-users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Authorized Users"
          },
          "editedUsers": {
            "type": "object",
            "default": {}
          },
          "deletedUsers": {
            "type": "object",
            "default": {}
          }
        }
      },
      "GOOGLE_DRIVE_OAUTH_MULTIConfig": {
        "type": "object",
        "description": "Configuration for Google Drive Multi-User (Vectorize) connector",
        "properties": {
          "file-extensions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pdf",
                "doc,docx,gdoc,odt,rtf,epub",
                "ppt,pptx,gslides",
                "xls,xlsx,gsheets,ods",
                "eml,msg",
                "txt",
                "html,htm",
                "md",
                "jpg,jpeg,png,webp,svg,gif",
                "json",
                "csv"
              ]
            },
            "description": "File Extensions",
            "default": [
              "pdf",
              "doc",
              "docx",
              "gdoc",
              "odt",
              "rtf",
              "epub",
              "ppt",
              "pptx",
              "gslides",
              "xls",
              "xlsx",
              "gsheets",
              "ods",
              "eml",
              "msg",
              "txt",
              "html",
              "htm",
              "md",
              "jpg",
              "jpeg",
              "png",
              "webp",
              "svg",
              "gif"
            ],
            "enum": [
              "pdf",
              "doc,docx,gdoc,odt,rtf,epub",
              "ppt,pptx,gslides",
              "xls,xlsx,gsheets,ods",
              "eml,msg",
              "txt",
              "html,htm",
              "md",
              "jpg,jpeg,png,webp,svg,gif",
              "json",
              "csv"
            ]
          },
          "idle-time": {
            "type": "number",
            "description": "Polling Interval (seconds). Example: Enter polling interval in seconds",
            "default": 30
          }
        },
        "required": [
          "file-extensions"
        ]
      },
      "GOOGLE_DRIVE_OAUTH_MULTI_CUSTOMAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Google Drive Multi-User (White Label)",
        "properties": {
          "oauth2-client-id": {
            "type": "string",
            "format": "password",
            "description": "OAuth2 Client Id. Example: Enter Client Id"
          },
          "oauth2-client-secret": {
            "type": "string",
            "format": "password",
            "description": "OAuth2 Client Secret. Example: Enter Client Secret"
          },
          "authorized-users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Authorized Users"
          },
          "editedUsers": {
            "type": "object",
            "default": {}
          },
          "deletedUsers": {
            "type": "object",
            "default": {}
          }
        },
        "required": [
          "oauth2-client-id",
          "oauth2-client-secret"
        ]
      },
      "GOOGLE_DRIVE_OAUTH_MULTI_CUSTOMConfig": {
        "type": "object",
        "description": "Configuration for Google Drive Multi-User (White Label) connector",
        "properties": {
          "file-extensions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pdf",
                "doc,docx,gdoc,odt,rtf,epub",
                "ppt,pptx,gslides",
                "xls,xlsx,gsheets,ods",
                "eml,msg",
                "txt",
                "html,htm",
                "md",
                "jpg,jpeg,png,webp,svg,gif",
                "json",
                "csv"
              ]
            },
            "description": "File Extensions",
            "default": [
              "pdf",
              "doc",
              "docx",
              "gdoc",
              "odt",
              "rtf",
              "epub",
              "ppt",
              "pptx",
              "gslides",
              "xls",
              "xlsx",
              "gsheets",
              "ods",
              "eml",
              "msg",
              "txt",
              "html",
              "htm",
              "md",
              "jpg",
              "jpeg",
              "png",
              "webp",
              "svg",
              "gif"
            ],
            "enum": [
              "pdf",
              "doc,docx,gdoc,odt,rtf,epub",
              "ppt,pptx,gslides",
              "xls,xlsx,gsheets,ods",
              "eml,msg",
              "txt",
              "html,htm",
              "md",
              "jpg,jpeg,png,webp,svg,gif",
              "json",
              "csv"
            ]
          },
          "idle-time": {
            "type": "number",
            "description": "Polling Interval (seconds). Example: Enter polling interval in seconds",
            "default": 30
          }
        },
        "required": [
          "file-extensions"
        ]
      },
      "FIRECRAWLAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Firecrawl",
        "properties": {
          "api-key": {
            "type": "string",
            "format": "password",
            "description": "API Key. Example: Enter your Firecrawl API Key"
          }
        },
        "required": [
          "api-key"
        ]
      },
      "FIRECRAWLConfig": {
        "type": "object",
        "description": "Configuration for Firecrawl connector",
        "properties": {
          "endpoint": {
            "type": "string",
            "description": "Endpoint. Example: Choose which api endpoint to use",
            "default": "Crawl",
            "enum": [
              "Crawl",
              "Scrape"
            ]
          },
          "request": {
            "type": "object",
            "description": "Request Body. Example: JSON config for firecrawl's /crawl or /scrape endpoint.",
            "default": {
              "url": "https://docs.vectorize.io/",
              "maxDepth": 25,
              "limit": 100
            }
          }
        },
        "required": [
          "endpoint",
          "request"
        ]
      },
      "GCSAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for GCP Cloud Storage",
        "properties": {
          "service-account-json": {
            "type": "string",
            "format": "password",
            "description": "Service Account JSON. Example: Enter the JSON key file for the service account"
          },
          "bucket-name": {
            "type": "string",
            "description": "Bucket. Example: Enter bucket name"
          }
        },
        "required": [
          "service-account-json",
          "bucket-name"
        ]
      },
      "GCSConfig": {
        "type": "object",
        "description": "Configuration for GCP Cloud Storage connector",
        "properties": {
          "file-extensions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pdf",
                "doc,docx,gdoc,odt,rtf,epub",
                "ppt,pptx,gslides",
                "xls,xlsx,gsheets,ods",
                "eml,msg",
                "txt",
                "html,htm",
                "md",
                "jpg,jpeg,png,webp,svg,gif",
                "json",
                "csv"
              ]
            },
            "description": "File Extensions",
            "default": [
              "pdf",
              "doc",
              "docx",
              "gdoc",
              "odt",
              "rtf",
              "epub",
              "ppt",
              "pptx",
              "gslides",
              "xls",
              "xlsx",
              "gsheets",
              "ods",
              "eml",
              "msg",
              "txt",
              "html",
              "htm",
              "md",
              "jpg",
              "jpeg",
              "png",
              "webp",
              "svg",
              "gif"
            ],
            "enum": [
              "pdf",
              "doc,docx,gdoc,odt,rtf,epub",
              "ppt,pptx,gslides",
              "xls,xlsx,gsheets,ods",
              "eml,msg",
              "txt",
              "html,htm",
              "md",
              "jpg,jpeg,png,webp,svg,gif",
              "json",
              "csv"
            ]
          },
          "idle-time": {
            "type": "number",
            "description": "Check for updates every (seconds)",
            "minimum": 1,
            "default": 30
          },
          "recursive": {
            "type": "boolean",
            "description": "Recursively scan all folders in the bucket"
          },
          "path-prefix": {
            "type": "string",
            "description": "Path Prefix"
          },
          "path-metadata-regex": {
            "type": "string",
            "description": "Path Metadata Regex"
          },
          "path-regex-group-names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Path Regex Group Names. Example: Enter Group Name"
          }
        },
        "required": [
          "file-extensions",
          "idle-time"
        ]
      },
      "INTERCOMAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Intercom",
        "properties": {
          "token": {
            "type": "string",
            "format": "password",
            "description": "Access Token. Example: Authorize Intercom Access"
          }
        },
        "required": [
          "token"
        ]
      },
      "INTERCOMConfig": {
        "type": "object",
        "description": "Configuration for Intercom connector",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date",
            "description": "Created After. Filter for conversations created after this date. Example: Enter a date: Example 2012-12-31",
            "default": "2025-07-08"
          },
          "updated_at": {
            "type": "string",
            "format": "date",
            "description": "Updated After. Filter for conversations updated after this date. Example: Enter a date: Example 2012-12-31"
          },
          "state": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "snoozed"
              ]
            },
            "description": "State",
            "default": [
              "open",
              "closed",
              "snoozed"
            ],
            "enum": [
              "open",
              "closed",
              "snoozed"
            ]
          }
        },
        "required": [
          "created_at"
        ]
      },
      "NOTIONAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Notion",
        "properties": {
          "access-token": {
            "type": "string",
            "format": "password",
            "description": "Connect Notion to Vectorize - Note this will effect existing connections. test. Example: Authorize"
          },
          "s3id": {
            "type": "string"
          },
          "editedToken": {
            "type": "string"
          }
        },
        "required": [
          "access-token"
        ]
      },
      "NOTIONConfig": {
        "type": "object",
        "description": "Configuration for Notion connector",
        "properties": {
          "select-resources": {
            "type": "string",
            "description": "Select Notion Resources"
          },
          "database-ids": {
            "type": "string",
            "description": "Database IDs"
          },
          "database-names": {
            "type": "string",
            "description": "Database Names"
          },
          "page-ids": {
            "type": "string",
            "description": "Page IDs"
          },
          "page-names": {
            "type": "string",
            "description": "Page Names"
          }
        },
        "required": [
          "select-resources",
          "database-ids",
          "database-names",
          "page-ids",
          "page-names"
        ]
      },
      "NOTION_OAUTH_MULTIAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Notion Multi-User (Vectorize)",
        "properties": {
          "authorized-users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Authorized Users. Users who have authorized access to their Notion content"
          },
          "editedUsers": {
            "type": "object",
            "default": {}
          },
          "deletedUsers": {
            "type": "object",
            "default": {}
          }
        }
      },
      "NOTION_OAUTH_MULTI_CUSTOMAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Notion Multi-User (White Label)",
        "properties": {
          "client-id": {
            "type": "string",
            "format": "password",
            "description": "Notion Client ID. Example: Enter Client ID"
          },
          "client-secret": {
            "type": "string",
            "format": "password",
            "description": "Notion Client Secret. Example: Enter Client Secret"
          },
          "authorized-users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Authorized Users"
          },
          "editedUsers": {
            "type": "object",
            "default": {}
          },
          "deletedUsers": {
            "type": "object",
            "default": {}
          }
        },
        "required": [
          "client-id",
          "client-secret"
        ]
      },
      "ONE_DRIVEAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for OneDrive",
        "properties": {
          "ms-client-id": {
            "type": "string",
            "description": "Client Id. Example: Enter Client Id"
          },
          "ms-tenant-id": {
            "type": "string",
            "description": "Tenant Id. Example: Enter Tenant Id"
          },
          "ms-client-secret": {
            "type": "string",
            "format": "password",
            "description": "Client Secret. Example: Enter Client Secret"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Users. Example: Enter users emails to import files from. Example: developer@vectorize.io"
          }
        },
        "required": [
          "ms-client-id",
          "ms-tenant-id",
          "ms-client-secret",
          "users"
        ]
      },
      "ONE_DRIVEConfig": {
        "type": "object",
        "description": "Configuration for OneDrive connector",
        "properties": {
          "file-extensions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pdf",
                "doc,docx,gdoc,odt,rtf,epub",
                "ppt,pptx,gslides",
                "xls,xlsx,gsheets,ods",
                "eml,msg",
                "txt",
                "html,htm",
                "md",
                "jpg,jpeg,png,webp,svg,gif",
                "json",
                "csv"
              ]
            },
            "description": "File Extensions",
            "default": [
              "pdf",
              "doc",
              "docx",
              "gdoc",
              "odt",
              "rtf",
              "epub",
              "ppt",
              "pptx",
              "gslides",
              "xls",
              "xlsx",
              "gsheets",
              "ods",
              "eml",
              "msg",
              "txt",
              "html",
              "htm",
              "md",
              "jpg",
              "jpeg",
              "png",
              "webp",
              "svg",
              "gif"
            ],
            "enum": [
              "pdf",
              "doc,docx,gdoc,odt,rtf,epub",
              "ppt,pptx,gslides",
              "xls,xlsx,gsheets,ods",
              "eml,msg",
              "txt",
              "html,htm",
              "md",
              "jpg,jpeg,png,webp,svg,gif",
              "json",
              "csv"
            ]
          },
          "path-prefix": {
            "type": "string",
            "description": "Read starting from this folder (optional). Example: Enter Folder path: /exampleFolder/subFolder"
          }
        },
        "required": [
          "file-extensions"
        ]
      },
      "SHAREPOINTAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for SharePoint",
        "properties": {
          "ms-client-id": {
            "type": "string",
            "description": "Client Id. Example: Enter Client Id"
          },
          "ms-tenant-id": {
            "type": "string",
            "description": "Tenant Id. Example: Enter Tenant Id"
          },
          "ms-client-secret": {
            "type": "string",
            "format": "password",
            "description": "Client Secret. Example: Enter Client Secret"
          }
        },
        "required": [
          "ms-client-id",
          "ms-tenant-id",
          "ms-client-secret"
        ]
      },
      "SHAREPOINTConfig": {
        "type": "object",
        "description": "Configuration for SharePoint connector",
        "properties": {
          "file-extensions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "pdf",
                "doc,docx,gdoc,odt,rtf,epub",
                "ppt,pptx,gslides",
                "xls,xlsx,gsheets,ods",
                "eml,msg",
                "txt",
                "html,htm",
                "jpg,jpeg,png,webp,svg,gif",
                "json",
                "csv"
              ]
            },
            "description": "File Extensions",
            "default": [
              "pdf",
              "doc",
              "docx",
              "gdoc",
              "odt",
              "rtf",
              "epub",
              "ppt",
              "pptx",
              "gslides",
              "xls",
              "xlsx",
              "gsheets",
              "ods",
              "eml",
              "msg",
              "txt",
              "html",
              "htm",
              "jpg",
              "jpeg",
              "png",
              "webp",
              "svg",
              "gif"
            ],
            "enum": [
              "pdf",
              "doc,docx,gdoc,odt,rtf,epub",
              "ppt,pptx,gslides",
              "xls,xlsx,gsheets,ods",
              "eml,msg",
              "txt",
              "html,htm",
              "jpg,jpeg,png,webp,svg,gif",
              "json",
              "csv"
            ]
          },
          "sites": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Site Name(s). Example: Filter by site name. All sites if empty.",
            "pattern": "^(?!.*(https?:\\/\\/|www\\.))[\\w\\s\\-.]+$"
          },
          "folder-path": {
            "type": "string",
            "description": "Read starting from this folder (optional). Example: Enter Folder path: /exampleFolder/subFolder"
          }
        },
        "required": [
          "file-extensions"
        ]
      },
      "WEB_CRAWLERAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Web Crawler",
        "properties": {
          "seed-urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Seed URL(s). Add one or more seed URLs to crawl. The crawler will start from these URLs and follow links to other pages.. Example: (e.g. https://example.com)"
          }
        },
        "required": [
          "seed-urls"
        ]
      },
      "WEB_CRAWLERConfig": {
        "type": "object",
        "description": "Configuration for Web Crawler connector",
        "properties": {
          "allowed-domains-opt": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Additional Allowed URLs or prefix(es). Add one or more allowed URLs or URL prefixes. The crawler will read URLs that match these patterns in addition to the seed URL(s).. Example: (e.g. https://docs.example.com)"
          },
          "forbidden-paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Forbidden Paths. Example: Enter forbidden paths (e.g. /admin)",
            "pattern": "^\\/([a-zA-Z0-9-_]+(\\/)?)+$"
          },
          "min-time-between-requests": {
            "type": "number",
            "description": "Throttle (ms). Example: Enter minimum time between requests in milliseconds",
            "default": 500
          },
          "max-error-count": {
            "type": "number",
            "description": "Max Error Count. Example: Enter maximum error count",
            "default": 5
          },
          "max-urls": {
            "type": "number",
            "description": "Max URLs. Example: Enter maximum number of URLs to crawl",
            "default": 1000
          },
          "max-depth": {
            "type": "number",
            "description": "Max Depth. Example: Enter maximum crawl depth",
            "default": 50
          },
          "reindex-interval-seconds": {
            "type": "number",
            "description": "Reindex Interval (seconds). Example: Enter reindex interval in seconds",
            "default": 3600
          }
        }
      },
      "GITHUBAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for GitHub",
        "properties": {
          "oauth-token": {
            "type": "string",
            "format": "password",
            "description": "Personal Access Token. Example: Enter your GitHub personal access token",
            "pattern": "^\\S.*\\S$|^\\S$"
          }
        },
        "required": [
          "oauth-token"
        ]
      },
      "GITHUBConfig": {
        "type": "object",
        "description": "Configuration for GitHub connector",
        "properties": {
          "repositories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Repositories. Example: Example: owner1/repo1",
            "pattern": "^[a-zA-Z0-9-]+\\/[a-zA-Z0-9-]+$"
          },
          "include-pull-requests": {
            "type": "boolean",
            "description": "Include Pull Requests",
            "default": true
          },
          "pull-request-status": {
            "type": "string",
            "description": "Pull Request Status",
            "default": "all",
            "enum": [
              "all",
              "open",
              "closed",
              "merged"
            ]
          },
          "pull-request-labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Pull Request Labels. Example: Optionally filter by label. E.g. fix"
          },
          "include-issues": {
            "type": "boolean",
            "description": "Include Issues",
            "default": true
          },
          "issue-status": {
            "type": "string",
            "description": "Issue Status",
            "default": "all",
            "enum": [
              "all",
              "open",
              "closed"
            ]
          },
          "issue-labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Issue Labels. Example: Optionally filter by label. E.g. bug"
          },
          "max-items": {
            "type": "number",
            "description": "Max Items. Example: Enter maximum number of items to fetch",
            "default": 1000
          },
          "created-after": {
            "type": "string",
            "format": "date",
            "description": "Created After. Filter for items created after this date. Example: Enter a date: Example 2012-12-31"
          }
        },
        "required": [
          "repositories",
          "include-pull-requests",
          "pull-request-status",
          "include-issues",
          "issue-status",
          "max-items"
        ]
      },
      "FIREFLIESAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Fireflies.ai",
        "properties": {
          "api-key": {
            "type": "string",
            "format": "password",
            "description": "API Key. Example: Enter your Fireflies.ai API key",
            "pattern": "^\\S.*\\S$|^\\S$"
          }
        },
        "required": [
          "api-key"
        ]
      },
      "FIREFLIESConfig": {
        "type": "object",
        "description": "Configuration for Fireflies.ai connector",
        "properties": {
          "start-date": {
            "type": "string",
            "format": "date",
            "description": "Start Date. Include meetings from this date forward. Example: Enter a date: Example 2023-12-31",
            "default": "2025-07-08"
          },
          "end-date": {
            "type": "string",
            "format": "date",
            "description": "End Date. Include meetings up to this date only. Example: Enter a date: Example 2023-12-31"
          },
          "title-filter-type": {
            "type": "string",
            "default": "AND"
          },
          "title-filter": {
            "type": "string",
            "description": "Title Filter. Only include meetings with this text in the title. Example: Enter meeting title"
          },
          "participant-filter-type": {
            "type": "string",
            "default": "AND"
          },
          "participant-filter": {
            "type": "string",
            "description": "Participant's Email Filter. Include meetings where these participants were invited. Example: Enter participant email"
          },
          "max-meetings": {
            "type": "number",
            "description": "Max Meetings. Enter -1 for all available meetings, or specify a limit. Example: Enter maximum number of meetings to retrieve. (-1 for all)",
            "default": -1
          }
        },
        "required": [
          "start-date",
          "title-filter-type",
          "participant-filter-type"
        ]
      },
      "GMAILAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Gmail",
        "properties": {
          "refresh-token": {
            "type": "string",
            "format": "password",
            "description": "Connect Gmail to Vectorize. Example: Authorize"
          }
        },
        "required": [
          "refresh-token"
        ]
      },
      "GMAILConfig": {
        "type": "object",
        "description": "Configuration for Gmail connector",
        "properties": {
          "from-filter-type": {
            "type": "string",
            "default": "OR"
          },
          "to-filter-type": {
            "type": "string",
            "default": "OR"
          },
          "cc-filter-type": {
            "type": "string",
            "default": "OR"
          },
          "subject-filter-type": {
            "type": "string",
            "default": "AND"
          },
          "label-filter-type": {
            "type": "string",
            "default": "AND"
          },
          "from": {
            "type": "string",
            "description": "From Address Filter. Only include emails from these senders. Example: Add sender email(s)",
            "pattern": "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$"
          },
          "to": {
            "type": "string",
            "description": "To Address Filter. Only include emails sent to these recipients. Example: Add recipient email(s)",
            "pattern": "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$"
          },
          "cc": {
            "type": "string",
            "description": "CC Address Filter. Only include emails with these addresses in CC field. Example: Add CC email(s)",
            "pattern": "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$"
          },
          "include-attachments": {
            "type": "boolean",
            "description": "Include Attachments. Include email attachments in the processed content",
            "default": false
          },
          "subject": {
            "type": "string",
            "description": "Subject Filter. Include emails with these keywords in the subject line. Example: Add subject keywords"
          },
          "start-date": {
            "type": "string",
            "format": "date",
            "description": "Start Date. Only include emails sent after this date (exclusive). Format: YYYY-MM-DD.. Example: e.g., 2024-01-01"
          },
          "end-date": {
            "type": "string",
            "format": "date",
            "description": "End Date. Only include emails sent before this date (exclusive). Format: YYYY-MM-DD.. Example: e.g., 2024-01-31"
          },
          "max-results": {
            "type": "number",
            "description": "Maximum Results. Enter -1 for all available emails, or specify a limit. . Example: Enter maximum number of threads to retrieve",
            "default": -1
          },
          "messages-to-fetch": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "all",
                "inbox",
                "sent",
                "archive",
                "spam-trash",
                "unread",
                "starred",
                "important"
              ]
            },
            "description": "Messages to Fetch. Select which categories of messages to include in the import.",
            "default": [
              "inbox"
            ],
            "enum": [
              "all",
              "inbox",
              "sent",
              "archive",
              "spam-trash",
              "unread",
              "starred",
              "important"
            ]
          },
          "label-ids": {
            "type": "string",
            "description": "Label Filters. Include emails with these labels. Example: e.g., INBOX, IMPORTANT, CATEGORY_SOCIAL"
          }
        },
        "required": [
          "from-filter-type",
          "to-filter-type",
          "cc-filter-type",
          "subject-filter-type",
          "label-filter-type"
        ]
      },
      "CAPELLAAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Couchbase Capella",
        "properties": {
          "username": {
            "type": "string",
            "description": "Cluster Access Name. Example: Enter your cluster access name"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Cluster Access Password. Example: Enter your cluster access password"
          },
          "connection-string": {
            "type": "string",
            "description": "Connection String. Example: Enter your connection string"
          }
        },
        "required": [
          "username",
          "password",
          "connection-string"
        ]
      },
      "CAPELLAConfig": {
        "type": "object",
        "description": "Configuration for Couchbase Capella connector",
        "properties": {
          "bucket": {
            "type": "string",
            "description": "Bucket Name. Example: Enter bucket name"
          },
          "scope": {
            "type": "string",
            "description": "Scope Name. Example: Enter scope name"
          },
          "collection": {
            "type": "string",
            "description": "Collection Name. Example: Enter collection name"
          },
          "index": {
            "type": "string",
            "description": "Search Index Name. Example: Enter search index name",
            "maxLength": 255
          }
        },
        "required": [
          "bucket",
          "scope",
          "collection",
          "index"
        ]
      },
      "DATASTAXAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for DataStax Astra",
        "properties": {
          "endpoint_secret": {
            "type": "string",
            "description": "API Endpoint. Example: Enter your API endpoint"
          },
          "token": {
            "type": "string",
            "format": "password",
            "description": "Application Token. Example: Enter your application token",
            "pattern": "^\\S.*\\S$|^\\S$"
          }
        },
        "required": [
          "endpoint_secret",
          "token"
        ]
      },
      "DATASTAXConfig": {
        "type": "object",
        "description": "Configuration for DataStax Astra connector",
        "properties": {
          "collection": {
            "type": "string",
            "description": "Collection Name. Example: Enter collection name",
            "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$"
          }
        },
        "required": [
          "collection"
        ]
      },
      "ELASTICAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Elasticsearch",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host. Example: Enter your host"
          },
          "port": {
            "type": "string",
            "description": "Port. Example: Enter your port"
          },
          "api-key": {
            "type": "string",
            "format": "password",
            "description": "API Key. Example: Enter your API key",
            "pattern": "^\\S.*\\S$|^\\S$"
          }
        },
        "required": [
          "host",
          "port",
          "api-key"
        ]
      },
      "ELASTICConfig": {
        "type": "object",
        "description": "Configuration for Elasticsearch connector",
        "properties": {
          "index": {
            "type": "string",
            "description": "Index Name. Example: Enter index name",
            "maxLength": 255,
            "pattern": "^(?!.*(--|\\.\\.))(?!^[\\-.])(?!.*[\\-.]$)[a-z0-9-.]*$"
          }
        },
        "required": [
          "index"
        ]
      },
      "PINECONEAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Pinecone",
        "properties": {
          "api-key": {
            "type": "string",
            "format": "password",
            "description": "API Key. Example: Enter your API Key",
            "pattern": "^\\S.*\\S$|^\\S$"
          }
        },
        "required": [
          "api-key"
        ]
      },
      "PINECONEConfig": {
        "type": "object",
        "description": "Configuration for Pinecone connector",
        "properties": {
          "index": {
            "type": "string",
            "description": "Index Name. Example: Enter index name",
            "maxLength": 45,
            "pattern": "^(?!.*--)(?!^-)(?!.*-$)[a-z0-9-]+$"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace. Example: Enter namespace",
            "maxLength": 45,
            "pattern": "^(?!.*--)(?!^-)(?!.*-$)[a-z0-9-]+$"
          }
        },
        "required": [
          "index"
        ]
      },
      "SINGLESTOREAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for SingleStore",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host. Example: Enter the host of the deployment"
          },
          "port": {
            "type": "number",
            "description": "Port. Example: Enter the port of the deployment"
          },
          "database": {
            "type": "string",
            "description": "Database. Example: Enter the database name"
          },
          "username": {
            "type": "string",
            "description": "Username. Example: Enter the username"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Password. Example: Enter the username's password"
          }
        },
        "required": [
          "host",
          "port",
          "database",
          "username",
          "password"
        ]
      },
      "SINGLESTOREConfig": {
        "type": "object",
        "description": "Configuration for SingleStore connector",
        "properties": {
          "table": {
            "type": "string",
            "description": "Table Name. Example: Enter table name",
            "maxLength": 45,
            "pattern": "^(?!\\b(add|alter|all|and|any|as|asc|avg|between|case|check|column|commit|constraint|create|cross|database|default|delete|desc|distinct|drop|else|exists|false|from|full|group|having|in|index|inner|insert|is|join|key|left|like|limit|max|min|not|null|on|or|order|outer|primary|right|rollback|select|set|sum|table|true|union|unique|update|values|view|where)\\b$)(?!.*--)(?!.*[-])[a-z][a-z0-9_]{0,44}$"
          }
        },
        "required": [
          "table"
        ]
      },
      "MILVUSAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Milvus",
        "properties": {
          "url": {
            "type": "string",
            "description": "Public Endpoint. Example: Enter your public endpoint for your Milvus cluster"
          },
          "token": {
            "type": "string",
            "format": "password",
            "description": "Token. Example: Enter your cluster token or Username/Password"
          },
          "username": {
            "type": "string",
            "description": "Username. Example: Enter your cluster Username"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Password. Example: Enter your cluster Password"
          }
        },
        "required": [
          "url"
        ]
      },
      "MILVUSConfig": {
        "type": "object",
        "description": "Configuration for Milvus connector",
        "properties": {
          "collection": {
            "type": "string",
            "description": "Collection Name. Example: Enter collection name",
            "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$"
          }
        },
        "required": [
          "collection"
        ]
      },
      "POSTGRESQLAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for PostgreSQL",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host. Example: Enter the host of the deployment"
          },
          "port": {
            "type": "number",
            "description": "Port. Example: Enter the port of the deployment",
            "default": 5432
          },
          "database": {
            "type": "string",
            "description": "Database. Example: Enter the database name"
          },
          "username": {
            "type": "string",
            "description": "Username. Example: Enter the username"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Password. Example: Enter the username's password"
          }
        },
        "required": [
          "host",
          "database",
          "username",
          "password"
        ]
      },
      "POSTGRESQLConfig": {
        "type": "object",
        "description": "Configuration for PostgreSQL connector",
        "properties": {
          "table": {
            "type": "string",
            "description": "Table Name. Example: Enter <table name> or <schema>.<table name>",
            "maxLength": 45,
            "pattern": "^(?!\\b(add|alter|all|and|any|as|asc|avg|between|case|check|column|commit|constraint|create|cross|database|default|delete|desc|distinct|drop|else|exists|false|from|full|group|having|in|index|inner|insert|is|join|key|left|like|limit|max|min|not|null|on|or|order|outer|primary|right|rollback|select|set|sum|table|true|union|unique|update|values|view|where)\\b$)(?!.*--)(?!.*[-])[a-z][a-z0-9._]{0,44}$"
          }
        },
        "required": [
          "table"
        ]
      },
      "QDRANTAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Qdrant",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host. Example: Enter your host"
          },
          "api-key": {
            "type": "string",
            "format": "password",
            "description": "API Key. Example: Enter your API key",
            "pattern": "^\\S.*\\S$|^\\S$"
          }
        },
        "required": [
          "host",
          "api-key"
        ]
      },
      "QDRANTConfig": {
        "type": "object",
        "description": "Configuration for Qdrant connector",
        "properties": {
          "collection": {
            "type": "string",
            "description": "Collection Name. Example: Enter collection name",
            "pattern": "^[a-zA-Z0-9_-]*$"
          }
        },
        "required": [
          "collection"
        ]
      },
      "SUPABASEAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Supabase",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host. Example: Enter the host of the deployment",
            "default": "aws-0-us-east-1.pooler.supabase.com"
          },
          "port": {
            "type": "number",
            "description": "Port. Example: Enter the port of the deployment",
            "default": 5432
          },
          "database": {
            "type": "string",
            "description": "Database. Example: Enter the database name"
          },
          "username": {
            "type": "string",
            "description": "Username. Example: Enter the username"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Password. Example: Enter the username's password"
          }
        },
        "required": [
          "host",
          "database",
          "username",
          "password"
        ]
      },
      "SUPABASEConfig": {
        "type": "object",
        "description": "Configuration for Supabase connector",
        "properties": {
          "table": {
            "type": "string",
            "description": "Table Name. Example: Enter <table name> or <schema>.<table name>",
            "maxLength": 45,
            "pattern": "^(?!\\b(add|alter|all|and|any|as|asc|avg|between|case|check|column|commit|constraint|create|cross|database|default|delete|desc|distinct|drop|else|exists|false|from|full|group|having|in|index|inner|insert|is|join|key|left|like|limit|max|min|not|null|on|or|order|outer|primary|right|rollback|select|set|sum|table|true|union|unique|update|values|view|where)\\b$)(?!.*--)(?!.*[-])[a-z][a-z0-9._]{0,44}$"
          }
        },
        "required": [
          "table"
        ]
      },
      "WEAVIATEAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Weaviate",
        "properties": {
          "host": {
            "type": "string",
            "description": "Endpoint. Example: Enter your Weaviate Cluster REST Endpoint"
          },
          "api-key": {
            "type": "string",
            "format": "password",
            "description": "API Key. Example: Enter your API key",
            "pattern": "^\\S.*\\S$|^\\S$"
          }
        },
        "required": [
          "host",
          "api-key"
        ]
      },
      "WEAVIATEConfig": {
        "type": "object",
        "description": "Configuration for Weaviate connector",
        "properties": {
          "collection": {
            "type": "string",
            "description": "Collection Name. Example: Enter collection name",
            "pattern": "^[A-Z][_0-9A-Za-z]*$"
          }
        },
        "required": [
          "collection"
        ]
      },
      "AZUREAISEARCHAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Azure AI Search",
        "properties": {
          "service-name": {
            "type": "string",
            "description": "Azure AI Search Service Name. Example: Enter your Azure AI Search service name"
          },
          "api-key": {
            "type": "string",
            "format": "password",
            "description": "API Key. Example: Enter your API key",
            "pattern": "^\\S.*\\S$|^\\S$"
          }
        },
        "required": [
          "service-name",
          "api-key"
        ]
      },
      "AZUREAISEARCHConfig": {
        "type": "object",
        "description": "Configuration for Azure AI Search connector",
        "properties": {
          "index": {
            "type": "string",
            "description": "Index Name. Example: Enter index name",
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        },
        "required": [
          "index"
        ]
      },
      "TURBOPUFFERAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Turbopuffer",
        "properties": {
          "api-key": {
            "type": "string",
            "format": "password",
            "description": "API Key. Example: Enter your API key",
            "pattern": "^\\S.*\\S$|^\\S$"
          }
        },
        "required": [
          "api-key"
        ]
      },
      "TURBOPUFFERConfig": {
        "type": "object",
        "description": "Configuration for Turbopuffer connector",
        "properties": {
          "namespace": {
            "type": "string",
            "description": "Namespace. Example: Enter namespace name"
          }
        },
        "required": [
          "namespace"
        ]
      },
      "BEDROCKAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Amazon Bedrock",
        "properties": {
          "access-key": {
            "type": "string",
            "format": "password",
            "description": "Access Key. Example: Enter your Amazon Bedrock Access Key",
            "pattern": "^\\S.*\\S$|^\\S$"
          },
          "key": {
            "type": "string",
            "format": "password",
            "description": "Secret Key. Example: Enter your Amazon Bedrock Secret Key",
            "pattern": "^\\S.*\\S$|^\\S$"
          },
          "region": {
            "type": "string",
            "description": "Region. Example: Region Name"
          }
        },
        "required": [
          "access-key",
          "key",
          "region"
        ]
      },
      "VERTEXAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Google Vertex AI",
        "properties": {
          "key": {
            "type": "string",
            "format": "password",
            "description": "Service Account Json. Example: Enter the contents of your Google Vertex AI Service Account JSON file"
          },
          "region": {
            "type": "string",
            "description": "Region. Example: Region Name, e.g. us-central1"
          }
        },
        "required": [
          "key",
          "region"
        ]
      },
      "OPENAIAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for OpenAI",
        "properties": {
          "key": {
            "type": "string",
            "format": "password",
            "description": "API Key. Example: Enter your OpenAI API Key",
            "pattern": "^\\S.*\\S$|^\\S$"
          }
        },
        "required": [
          "key"
        ]
      },
      "VOYAGEAuthConfig": {
        "type": "object",
        "description": "Authentication configuration for Voyage AI",
        "properties": {
          "key": {
            "type": "string",
            "format": "password",
            "description": "API Key. Example: Enter your Voyage AI API Key",
            "pattern": "^\\S.*\\S$|^\\S$"
          }
        },
        "required": [
          "key"
        ]
      },
      "SourceConnectorInput": {
        "type": "object",
        "description": "Source connector configuration",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the source connector"
          },
          "type": {
            "type": "string",
            "description": "Type of source connector",
            "enum": [
              "AWS_S3",
              "AZURE_BLOB",
              "CONFLUENCE",
              "DISCORD",
              "DROPBOX",
              "DROPBOX_OAUTH",
              "DROPBOX_OAUTH_MULTI",
              "DROPBOX_OAUTH_MULTI_CUSTOM",
              "FILE_UPLOAD",
              "GOOGLE_DRIVE_OAUTH",
              "GOOGLE_DRIVE",
              "GOOGLE_DRIVE_OAUTH_MULTI",
              "GOOGLE_DRIVE_OAUTH_MULTI_CUSTOM",
              "FIRECRAWL",
              "GCS",
              "INTERCOM",
              "NOTION",
              "NOTION_OAUTH_MULTI",
              "NOTION_OAUTH_MULTI_CUSTOM",
              "ONE_DRIVE",
              "SHAREPOINT",
              "WEB_CRAWLER",
              "GITHUB",
              "FIREFLIES",
              "GMAIL"
            ]
          },
          "config": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AWS_S3Config"
              },
              {
                "$ref": "#/components/schemas/AZURE_BLOBConfig"
              },
              {
                "$ref": "#/components/schemas/CONFLUENCEConfig"
              },
              {
                "$ref": "#/components/schemas/DISCORDConfig"
              },
              {
                "$ref": "#/components/schemas/DROPBOXConfig"
              },
              {
                "$ref": "#/components/schemas/GOOGLE_DRIVE_OAUTHConfig"
              },
              {
                "$ref": "#/components/schemas/GOOGLE_DRIVEConfig"
              },
              {
                "$ref": "#/components/schemas/GOOGLE_DRIVE_OAUTH_MULTIConfig"
              },
              {
                "$ref": "#/components/schemas/GOOGLE_DRIVE_OAUTH_MULTI_CUSTOMConfig"
              },
              {
                "$ref": "#/components/schemas/FIRECRAWLConfig"
              },
              {
                "$ref": "#/components/schemas/GCSConfig"
              },
              {
                "$ref": "#/components/schemas/INTERCOMConfig"
              },
              {
                "$ref": "#/components/schemas/NOTIONConfig"
              },
              {
                "$ref": "#/components/schemas/ONE_DRIVEConfig"
              },
              {
                "$ref": "#/components/schemas/SHAREPOINTConfig"
              },
              {
                "$ref": "#/components/schemas/WEB_CRAWLERConfig"
              },
              {
                "$ref": "#/components/schemas/GITHUBConfig"
              },
              {
                "$ref": "#/components/schemas/FIREFLIESConfig"
              },
              {
                "$ref": "#/components/schemas/GMAILConfig"
              }
            ],
            "description": "Configuration specific to the connector type"
          }
        },
        "required": [
          "id",
          "type",
          "config"
        ]
      },
      "DestinationConnectorInput": {
        "type": "object",
        "description": "Destination connector configuration",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the destination connector"
          },
          "type": {
            "type": "string",
            "description": "Type of destination connector",
            "enum": [
              "CAPELLA",
              "DATASTAX",
              "ELASTIC",
              "PINECONE",
              "SINGLESTORE",
              "MILVUS",
              "POSTGRESQL",
              "QDRANT",
              "SUPABASE",
              "WEAVIATE",
              "AZUREAISEARCH",
              "TURBOPUFFER"
            ]
          },
          "config": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CAPELLAConfig"
              },
              {
                "$ref": "#/components/schemas/DATASTAXConfig"
              },
              {
                "$ref": "#/components/schemas/ELASTICConfig"
              },
              {
                "$ref": "#/components/schemas/PINECONEConfig"
              },
              {
                "$ref": "#/components/schemas/SINGLESTOREConfig"
              },
              {
                "$ref": "#/components/schemas/MILVUSConfig"
              },
              {
                "$ref": "#/components/schemas/POSTGRESQLConfig"
              },
              {
                "$ref": "#/components/schemas/QDRANTConfig"
              },
              {
                "$ref": "#/components/schemas/SUPABASEConfig"
              },
              {
                "$ref": "#/components/schemas/WEAVIATEConfig"
              },
              {
                "$ref": "#/components/schemas/AZUREAISEARCHConfig"
              },
              {
                "$ref": "#/components/schemas/TURBOPUFFERConfig"
              }
            ],
            "description": "Configuration specific to the connector type"
          }
        },
        "required": [
          "id",
          "type",
          "config"
        ]
      },
      "AIPlatformConnectorInput": {
        "type": "object",
        "description": "AI platform configuration",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the AI platform"
          },
          "type": {
            "type": "string",
            "description": "Type of AI platform",
            "enum": [
              "BEDROCK",
              "VERTEX",
              "OPENAI",
              "VOYAGE"
            ]
          },
          "config": {
            "oneOf": [],
            "description": "Configuration specific to the AI platform"
          }
        },
        "required": [
          "id",
          "type",
          "config"
        ]
      },
      "PipelineSourceConnectorRequest": {
        "type": "array",
        "minItems": 1,
        "items": {
          "$ref": "#/components/schemas/SourceConnectorSchema"
        }
      },
      "PipelineDestinationConnectorRequest": {
        "$ref": "#/components/schemas/DestinationConnectorSchema"
      }
    },
    "parameters": {}
  },
  "paths": {
    "/org/{organizationId}/pipelines": {
      "post": {
        "operationId": "createPipeline",
        "summary": "Create a new pipeline",
        "description": "Creates a new pipeline with source connectors, destination connector, and AI platform configuration. The specific configuration fields required depend on the connector types selected.",
        "tags": [
          "Pipelines"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineConfigurationSchema"
              },
              "example": {
                "sourceConnectors": [
                  {
                    "id": "1232dcc0-32d5-4193-a6f1-3af334a4e4b7",
                    "type": "AWS_S3",
                    "config": {}
                  }
                ],
                "destinationConnector": {
                  "id": "7b5c0959-733f-4dfc-9732-12b72af0ccb2",
                  "type": "CAPELLA",
                  "config": {}
                },
                "aiPlatformConnector": {
                  "id": "6c7e3097-465b-4ebb-bd6f-60551b43e951",
                  "type": "BEDROCK",
                  "config": {
                    "embeddingModel": "VECTORIZE_OPEN_AI_TEXT_EMBEDDING_2",
                    "chunkingStrategy": "FIXED",
                    "chunkSize": 20,
                    "chunkOverlap": 100,
                    "dimensions": 100,
                    "extractionStrategy": "FAST"
                  }
                },
                "pipelineName": "Data Processing Pipeline",
                "schedule": {
                  "type": "manual"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pipeline created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePipelineResponse"
                },
                "example": {
                  "message": "Operation completed successfully",
                  "data": {}
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getPipelines",
        "summary": "Get all pipelines",
        "description": "Returns a list of all pipelines in the organization",
        "tags": [
          "Pipelines"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Pipelines retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPipelinesResponse"
                },
                "example": {
                  "message": "Operation completed successfully",
                  "data": [
                    {
                      "id": "06d0d149-3fc9-4056-8ce1-d0a5ca08ca52",
                      "name": "Example Item",
                      "type": "example-type",
                      "status": "active"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/pipelines/{pipelineId}": {
      "get": {
        "operationId": "getPipeline",
        "summary": "Get a pipeline",
        "description": "Get a pipeline",
        "tags": [
          "Pipelines"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the pipeline",
              "example": "pipe_456"
            },
            "required": true,
            "name": "pipelineId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPipelineResponse"
                },
                "example": {
                  "message": "Operation completed successfully",
                  "data": {
                    "id": "cd4ef558-69df-4f62-b018-0ebc5d33e9e3",
                    "name": "My PipelineSummary",
                    "documentCount": 42,
                    "sourceConnectorAuthIds": [],
                    "destinationConnectorAuthIds": [],
                    "aiPlatformAuthIds": [],
                    "sourceConnectorTypes": [],
                    "destinationConnectorTypes": [],
                    "aiPlatformTypes": [],
                    "createdAt": "example-createdAt",
                    "createdBy": "example-createdBy",
                    "status": "active",
                    "configDoc": {},
                    "sourceConnectors": [],
                    "destinationConnectors": [],
                    "aiPlatforms": []
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deletePipeline",
        "summary": "Delete a pipeline",
        "description": "Delete a pipeline",
        "tags": [
          "Pipelines"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the pipeline",
              "example": "pipe_456"
            },
            "required": true,
            "name": "pipelineId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePipelineResponse"
                },
                "example": {
                  "message": "Operation completed successfully"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/pipelines/{pipelineId}/events": {
      "get": {
        "operationId": "getPipelineEvents",
        "summary": "Get pipeline events",
        "description": "Get pipeline events",
        "tags": [
          "Pipelines"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the pipeline",
              "example": "pipe_456"
            },
            "required": true,
            "name": "pipelineId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "nextToken",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline events fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPipelineEventsResponse"
                },
                "example": {
                  "message": "Operation completed successfully",
                  "nextToken": "token_example_123456",
                  "data": [
                    {
                      "id": "34070554-7e46-441d-81d2-6c654b89d0e9",
                      "name": "Example Item",
                      "type": "example-type",
                      "status": "active"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/pipelines/{pipelineId}/metrics": {
      "get": {
        "operationId": "getPipelineMetrics",
        "summary": "Get pipeline metrics",
        "description": "Get pipeline metrics",
        "tags": [
          "Pipelines"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the pipeline",
              "example": "pipe_456"
            },
            "required": true,
            "name": "pipelineId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline metrics fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPipelineMetricsResponse"
                },
                "example": {
                  "message": "Operation completed successfully",
                  "data": [
                    {
                      "id": "13be51e7-8259-4ef5-82a2-b655419cda64",
                      "name": "Example Item",
                      "type": "example-type",
                      "status": "active"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/pipelines/{pipelineId}/retrieval": {
      "post": {
        "operationId": "retrieveDocuments",
        "summary": "Retrieve documents from a pipeline",
        "description": "Retrieve documents from a pipeline",
        "tags": [
          "Pipelines"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the pipeline",
              "example": "pipe_456"
            },
            "required": true,
            "name": "pipelineId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieveDocumentsRequest"
              },
              "example": {
                "question": "example-question",
                "numResults": 100,
                "rerank": true,
                "metadata-filters": [],
                "context": {
                  "messages": []
                },
                "advanced-query": {
                  "mode": "text",
                  "text-fields": [],
                  "match-type": "match",
                  "text-boost": 100,
                  "filters": {}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Documents retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveDocumentsResponse"
                },
                "example": {
                  "question": "example-question",
                  "documents": [],
                  "average_relevancy": 100,
                  "ndcg": 100
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/pipelines/{pipelineId}/start": {
      "post": {
        "operationId": "startPipeline",
        "summary": "Start a pipeline",
        "description": "Start a pipeline",
        "tags": [
          "Pipelines"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the pipeline",
              "example": "pipe_456"
            },
            "required": true,
            "name": "pipelineId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartPipelineResponse"
                },
                "example": {
                  "message": "Operation completed successfully"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/pipelines/{pipelineId}/stop": {
      "post": {
        "operationId": "stopPipeline",
        "summary": "Stop a pipeline",
        "description": "Stop a pipeline",
        "tags": [
          "Pipelines"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the pipeline",
              "example": "pipe_456"
            },
            "required": true,
            "name": "pipelineId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline stopped successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StopPipelineResponse"
                },
                "example": {
                  "message": "Operation completed successfully"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/pipelines/{pipelineId}/deep-research": {
      "post": {
        "operationId": "startDeepResearch",
        "summary": "Start a deep research",
        "description": "Start a deep research",
        "tags": [
          "Pipelines"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the pipeline",
              "example": "pipe_456"
            },
            "required": true,
            "name": "pipelineId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartDeepResearchRequest"
              },
              "example": {
                "query": "example-query",
                "webSearch": true,
                "schema": "example-schema",
                "n8n": {
                  "account": "example-account",
                  "webhookPath": "/example/path",
                  "headers": {}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deep Research started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartDeepResearchResponse"
                },
                "example": {
                  "researchId": "3ae63a29-7e0e-44e5-9c07-fcc2a7f37d85"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/pipelines/{pipelineId}/deep-research/{researchId}": {
      "get": {
        "operationId": "getDeepResearchResult",
        "summary": "Get deep research result",
        "description": "Get deep research result",
        "tags": [
          "Pipelines"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the pipeline",
              "example": "pipe_456"
            },
            "required": true,
            "name": "pipelineId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the deep research",
              "example": "8070"
            },
            "required": true,
            "name": "researchId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Deep Research was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeepResearchResponse"
                },
                "example": {
                  "ready": true,
                  "data": {
                    "success": true,
                    "events": [],
                    "markdown": "example-markdown",
                    "error": null
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/connectors/sources": {
      "post": {
        "operationId": "createSourceConnector",
        "summary": "Create a new source connector",
        "description": "Creates a new source connector for data ingestion. The specific configuration fields required depend on the connector type selected.",
        "tags": [
          "Source Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSourceConnectorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Connector successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSourceConnectorResponse"
                },
                "example": {
                  "message": "Operation completed successfully",
                  "connector": {
                    "name": "My CreatedSourceConnector",
                    "id": "d0cc6d80-ce20-4f41-9eca-599c73e92aa4"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getSourceConnectors",
        "summary": "Get all existing source connectors",
        "description": "Get all existing source connectors",
        "tags": [
          "Source Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all source connectors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sourceConnectors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SourceConnector"
                      }
                    }
                  },
                  "required": [
                    "sourceConnectors"
                  ]
                },
                "example": {
                  "sourceConnectors": [
                    {
                      "id": "223989b5-81ba-4833-b858-5614802dc830",
                      "type": "AWS_S3",
                      "name": "S3 Documents Bucket",
                      "createdAt": "2025-07-08T19:10:21.970Z",
                      "verificationStatus": "verified"
                    },
                    {
                      "id": "0f3b5bcc-7295-4301-a147-13d6c255edbf",
                      "type": "GOOGLE_DRIVE",
                      "name": "Team Shared Drive",
                      "createdAt": "2025-07-08T19:10:21.970Z",
                      "verificationStatus": "verified"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/connectors/sources/{sourceConnectorId}": {
      "get": {
        "operationId": "getSourceConnector",
        "summary": "Get a source connector",
        "description": "Get a source connector",
        "tags": [
          "Source Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the source connector",
              "example": "cb184aec-0fce-4f39-8c4a-919af8425cd5"
            },
            "required": true,
            "name": "sourceConnectorId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a source connector",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceConnector"
                },
                "example": {
                  "id": "6981ec06-1482-4bbf-b47e-ddc2222943dd",
                  "type": "example-type",
                  "name": "My SourceConnector",
                  "configDoc": {},
                  "createdAt": "example-createdAt",
                  "createdById": "4b8d2372-c7ea-4692-8eb8-fa07be7c2d3a",
                  "lastUpdatedById": "c466521b-f78c-4713-9ccb-2698645804e4",
                  "createdByEmail": "user@example.com",
                  "lastUpdatedByEmail": "user@example.com",
                  "errorMessage": "Operation completed successfully",
                  "verificationStatus": "verified"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "updateSourceConnector",
        "summary": "Update a source connector",
        "description": "Update a source connector",
        "tags": [
          "Source Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the source connector",
              "example": "cb184aec-0fce-4f39-8c4a-919af8425cd5"
            },
            "required": true,
            "name": "sourceConnectorId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSourceConnectorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Source connector successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSourceConnectorResponse"
                },
                "example": {
                  "message": "Operation completed successfully",
                  "data": {
                    "updatedConnector": {
                      "id": "c10c7b6c-dd13-4afe-a0ba-02e37060836d",
                      "type": "example-type",
                      "name": "My SourceConnector",
                      "configDoc": {},
                      "createdAt": "example-createdAt",
                      "createdById": "365405c1-0a92-4ba6-8079-49bae45abc2a",
                      "lastUpdatedById": "c24bb9e9-fb05-4e23-9c51-b8bd8b4cbdca",
                      "createdByEmail": "user@example.com",
                      "lastUpdatedByEmail": "user@example.com",
                      "errorMessage": "Operation completed successfully",
                      "verificationStatus": "verified"
                    },
                    "pipelineIds": []
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteSourceConnector",
        "summary": "Delete a source connector",
        "description": "Delete a source connector",
        "tags": [
          "Source Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the source connector",
              "example": "cb184aec-0fce-4f39-8c4a-919af8425cd5"
            },
            "required": true,
            "name": "sourceConnectorId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Source connector successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSourceConnectorResponse"
                },
                "example": {
                  "message": "Operation completed successfully"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/connectors/destinations": {
      "post": {
        "operationId": "createDestinationConnector",
        "summary": "Create a new destination connector",
        "description": "Creates a new destination connector for data storage. The specific configuration fields required depend on the connector type selected.",
        "tags": [
          "Destination Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDestinationConnectorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Connector successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDestinationConnectorResponse"
                },
                "example": {
                  "message": "Operation completed successfully",
                  "connector": {
                    "name": "My CreatedDestinationConnector",
                    "id": "3d3ff1ec-6c2c-487f-be44-c8274333c354"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getDestinationConnectors",
        "summary": "Get all existing destination connectors",
        "description": "Get all existing destination connectors",
        "tags": [
          "Destination Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all destination connectors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "destinationConnectors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DestinationConnector"
                      }
                    }
                  },
                  "required": [
                    "destinationConnectors"
                  ]
                },
                "example": {
                  "destinationConnectors": []
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/connectors/destinations/{destinationConnectorId}": {
      "get": {
        "operationId": "getDestinationConnector",
        "summary": "Get a destination connector",
        "description": "Get a destination connector",
        "tags": [
          "Destination Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the destination connector",
              "example": "cb184aec-0fce-4f39-8c4a-919af8425cd5"
            },
            "required": true,
            "name": "destinationConnectorId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a destination connector",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DestinationConnector"
                },
                "example": {
                  "id": "c1ccc757-6841-4338-911c-d266b3e645a4",
                  "type": "example-type",
                  "name": "My DestinationConnector",
                  "configDoc": {},
                  "createdAt": "example-createdAt",
                  "createdById": "c186a263-97a0-4f8b-8bac-bba5cf2f0748",
                  "lastUpdatedById": "6a0afe85-b82b-498c-b635-4fe2d4ab7b45",
                  "createdByEmail": "user@example.com",
                  "lastUpdatedByEmail": "user@example.com",
                  "errorMessage": "Operation completed successfully",
                  "verificationStatus": "verified"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "updateDestinationConnector",
        "summary": "Update a destination connector",
        "description": "Update a destination connector",
        "tags": [
          "Destination Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the destination connector",
              "example": "cb184aec-0fce-4f39-8c4a-919af8425cd5"
            },
            "required": true,
            "name": "destinationConnectorId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDestinationConnectorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Destination connector successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDestinationConnectorResponse"
                },
                "example": {
                  "message": "Operation completed successfully",
                  "data": {
                    "updatedConnector": {
                      "id": "2f8d9fd8-7d6b-4e99-bc98-2723c824e7dd",
                      "type": "example-type",
                      "name": "My DestinationConnector",
                      "configDoc": {},
                      "createdAt": "example-createdAt",
                      "createdById": "d6c8bc01-fae6-44e0-98ec-bd3a743e1bac",
                      "lastUpdatedById": "6b2be19e-b98c-4450-99e1-b311ca3e7ba8",
                      "createdByEmail": "user@example.com",
                      "lastUpdatedByEmail": "user@example.com",
                      "errorMessage": "Operation completed successfully",
                      "verificationStatus": "verified"
                    },
                    "pipelineIds": []
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteDestinationConnector",
        "summary": "Delete a destination connector",
        "description": "Delete a destination connector",
        "tags": [
          "Destination Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the destination connector",
              "example": "cb184aec-0fce-4f39-8c4a-919af8425cd5"
            },
            "required": true,
            "name": "destinationConnectorId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Destination connector successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDestinationConnectorResponse"
                },
                "example": {
                  "message": "Operation completed successfully"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/connectors/aiplatforms": {
      "post": {
        "operationId": "createAIPlatformConnector",
        "summary": "Create a new AI platform connector",
        "description": "Creates a new AI platform connector for embeddings and processing. The specific configuration fields required depend on the platform type selected.",
        "tags": [
          "AI Platform Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAIPlatformConnectorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Connector successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAIPlatformConnectorResponse"
                },
                "example": {
                  "message": "Operation completed successfully",
                  "connector": {
                    "name": "My CreatedAIPlatformConnector",
                    "id": "3f201fb0-329b-4e58-b964-761b8ac47823"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getAIPlatformConnectors",
        "summary": "Get all existing AI Platform connectors",
        "description": "Get all existing AI Platform connectors",
        "tags": [
          "AI Platform Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all existing AI Platform connectors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "aiPlatformConnectors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AIPlatform"
                      }
                    }
                  },
                  "required": [
                    "aiPlatformConnectors"
                  ]
                },
                "example": {
                  "aiPlatformConnectors": []
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/connectors/aiplatforms/{aiPlatformConnectorId}": {
      "get": {
        "operationId": "getAIPlatformConnector",
        "summary": "Get an AI platform connector",
        "description": "Get an AI platform connector",
        "tags": [
          "AI Platform Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the AI platform connector",
              "example": "cb184aec-0fce-4f39-8c4a-919af8425cd5"
            },
            "required": true,
            "name": "aiPlatformConnectorId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get an AI platform connector",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIPlatform"
                },
                "example": {
                  "id": "3a660f36-8e8b-46f0-8c4f-4135129e7b2d",
                  "type": "example-type",
                  "name": "My AIPlatform",
                  "configDoc": {},
                  "createdAt": "example-createdAt",
                  "createdById": "8a1c31aa-ef6b-44e5-bf2f-c7b11f343ea4",
                  "lastUpdatedById": "f17bca8a-315c-48f4-9a23-ac3f31ed1836",
                  "createdByEmail": "user@example.com",
                  "lastUpdatedByEmail": "user@example.com",
                  "errorMessage": "Operation completed successfully",
                  "verificationStatus": "verified"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "updateAIPlatformConnector",
        "summary": "Update an AI Platform connector",
        "description": "Update an AI Platform connector",
        "tags": [
          "AI Platform Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the AI platform connector",
              "example": "cb184aec-0fce-4f39-8c4a-919af8425cd5"
            },
            "required": true,
            "name": "aiPlatformConnectorId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAIPlatformConnectorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "AI Platform connector successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAIPlatformConnectorResponse"
                },
                "example": {
                  "message": "Operation completed successfully",
                  "data": {
                    "updatedConnector": {
                      "id": "4e0e6309-d187-400d-b446-cefc87ec20c1",
                      "type": "example-type",
                      "name": "My AIPlatform",
                      "configDoc": {},
                      "createdAt": "example-createdAt",
                      "createdById": "13de58a5-58f0-4060-9590-3e896e99aaf4",
                      "lastUpdatedById": "aedc8bc8-07ae-449f-845f-401f8e72b74c",
                      "createdByEmail": "user@example.com",
                      "lastUpdatedByEmail": "user@example.com",
                      "errorMessage": "Operation completed successfully",
                      "verificationStatus": "verified"
                    },
                    "pipelineIds": []
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAIPlatformConnector",
        "summary": "Delete an AI platform connector",
        "description": "Delete an AI platform connector",
        "tags": [
          "AI Platform Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the AI platform connector",
              "example": "cb184aec-0fce-4f39-8c4a-919af8425cd5"
            },
            "required": true,
            "name": "aiPlatformConnectorId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "AI Platform connector successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAIPlatformConnectorResponse"
                },
                "example": {
                  "message": "Operation completed successfully"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/uploads/{connectorId}/files": {
      "get": {
        "operationId": "getUploadFilesFromConnector",
        "summary": "Get uploaded files from a file upload connector",
        "description": "Get uploaded files from a file upload connector",
        "tags": [
          "Uploads"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the connector",
              "example": "pipe_456"
            },
            "required": true,
            "name": "connectorId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Files retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUploadFilesResponse"
                },
                "example": {
                  "message": "Operation completed successfully",
                  "files": []
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "startFileUploadToConnector",
        "summary": "Upload a file to a file upload connector",
        "description": "Upload a file to a file upload connector",
        "tags": [
          "Uploads"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the connector",
              "example": "pipe_456"
            },
            "required": true,
            "name": "connectorId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartFileUploadToConnectorRequest"
              },
              "example": {
                "name": "My StartFileUploadToConnectorRequest",
                "contentType": "document",
                "metadata": "example-metadata"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File ready to be uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartFileUploadToConnectorResponse"
                },
                "example": {
                  "uploadUrl": "https://api.example.com"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/uploads/{connectorId}/files/{fileName}": {
      "delete": {
        "operationId": "deleteFileFromConnector",
        "summary": "Delete a file from a File Upload connector",
        "description": "Delete a file from a File Upload connector",
        "tags": [
          "Uploads"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the connector",
              "example": "pipe_456"
            },
            "required": true,
            "name": "connectorId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the file name",
              "example": "pipe_456"
            },
            "required": true,
            "name": "fileName",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "File deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteFileResponse"
                },
                "example": {
                  "message": "Operation completed successfully",
                  "fileName": "document.pdf"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/extraction": {
      "post": {
        "operationId": "startExtraction",
        "summary": "Start content extraction from a file",
        "description": "Start content extraction from a file",
        "tags": [
          "Extraction"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartExtractionRequest"
              },
              "example": {
                "fileId": "b243e168-c6c9-4703-bd49-6251b5c00a50",
                "type": "iris",
                "chunkingStrategy": "markdown",
                "chunkSize": 20,
                "metadata": {
                  "schemas": [],
                  "inferSchema": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Extraction started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartExtractionResponse"
                },
                "example": {
                  "message": "Operation completed successfully",
                  "extractionId": "484e0687-7da3-40e2-8d37-f4ff0df362f4"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/extraction/{extractionId}": {
      "get": {
        "operationId": "getExtractionResult",
        "summary": "Get extraction result",
        "description": "Get extraction result",
        "tags": [
          "Extraction"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the extraction job",
              "example": "ext_789"
            },
            "required": true,
            "name": "extractionId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Extraction started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractionResultResponse"
                },
                "example": {
                  "ready": true,
                  "data": {
                    "success": true,
                    "chunks": [],
                    "text": "example-text",
                    "metadata": "example-metadata",
                    "metadataSchema": "example-metadataSchema",
                    "chunksMetadata": [],
                    "chunksSchema": [],
                    "error": null
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/files": {
      "post": {
        "operationId": "startFileUpload",
        "summary": "Upload a generic file to the platform",
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartFileUploadRequest"
              },
              "example": {
                "name": "My StartFileUploadRequest",
                "contentType": "document"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File upload started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartFileUploadResponse"
                },
                "example": {
                  "fileId": "3fedab3c-4116-41d6-94d3-818a16f4ce93",
                  "uploadUrl": "https://api.example.com"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    },
    "/org/{organizationId}/connectors/sources/{sourceConnectorId}/users": {
      "post": {
        "operationId": "addUserToSourceConnector",
        "summary": "Add a user to a source connector",
        "description": "Add a user to a source connector",
        "tags": [
          "Source Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the source connector",
              "example": "cb184aec-0fce-4f39-8c4a-919af8425cd5"
            },
            "required": true,
            "name": "sourceConnectorId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserToSourceConnectorRequest"
              },
              "example": {
                "userId": "b861f9a6-8674-4ead-8686-b16d162cdf1a",
                "selectedFiles": {},
                "refreshToken": "refresh_token_example_123456",
                "accessToken": "access_token_example_123456"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully added to the source connector",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddUserFromSourceConnectorResponse"
                },
                "example": {
                  "message": "Operation completed successfully"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "updateUserInSourceConnector",
        "summary": "Update a source connector user",
        "description": "Update a source connector user",
        "tags": [
          "Source Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the source connector",
              "example": "cb184aec-0fce-4f39-8c4a-919af8425cd5"
            },
            "required": true,
            "name": "sourceConnectorId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserInSourceConnectorRequest"
              },
              "example": {
                "userId": "6ccc57db-001c-4ebf-8c82-2f14e776de7c",
                "selectedFiles": {},
                "refreshToken": "refresh_token_example_123456",
                "accessToken": "access_token_example_123456"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully updated in the source connector",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserInSourceConnectorResponse"
                },
                "example": {
                  "message": "Operation completed successfully"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteUserFromSourceConnector",
        "summary": "Delete a source connector user",
        "description": "Delete a source connector user",
        "tags": [
          "Source Connectors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the organization",
              "example": "org_123"
            },
            "required": true,
            "name": "organizationId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The unique identifier of the source connector",
              "example": "cb184aec-0fce-4f39-8c4a-919af8425cd5"
            },
            "required": true,
            "name": "sourceConnectorId",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUserFromSourceConnectorRequest"
              },
              "example": {
                "userId": "5e1f47bf-eedf-43d4-86cf-d7075d841b61"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully removed from the source connector",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveUserFromSourceConnectorResponse"
                },
                "example": {
                  "message": "Operation completed successfully"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "details": {
                      "type": "string"
                    },
                    "failedUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "successfulUpdates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "error"
                  ]
                },
                "example": {
                  "error": "An error occurred",
                  "details": "example-details",
                  "failedUpdates": [],
                  "successfulUpdates": []
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Source Connectors",
      "description": "Operations related to source connectors",
      "x-category": "Connectors"
    },
    {
      "name": "Destination Connectors",
      "description": "Operations related to destination connectors",
      "x-category": "Connectors"
    },
    {
      "name": "AI Platform Connectors",
      "description": "Operations related to AI platform connectors",
      "x-category": "Connectors"
    },
    {
      "name": "Pipelines",
      "description": "Operations related to pipelines"
    },
    {
      "name": "Uploads",
      "description": "Operations related to file uploads"
    },
    {
      "name": "Extraction",
      "description": "Operations related to data extraction"
    },
    {
      "name": "Files",
      "description": "Operations related to file management"
    }
  ]
}