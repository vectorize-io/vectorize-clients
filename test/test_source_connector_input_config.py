# coding: utf-8

"""
    Vectorize API (Beta)

    API for Vectorize services

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vectorize_client.models.source_connector_input_config import SourceConnectorInputConfig

class TestSourceConnectorInputConfig(unittest.TestCase):
    """SourceConnectorInputConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SourceConnectorInputConfig:
        """Test SourceConnectorInputConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SourceConnectorInputConfig`
        """
        model = SourceConnectorInputConfig()
        if include_optional:
            return SourceConnectorInputConfig(
                file_extensions = pdf,
                idle_time = 1,
                recursive = True,
                path_prefix = '',
                path_metadata_regex = '',
                path_regex_group_names = '',
                spaces = '',
                root_parents = 'https://drive.google.com/drive/u/80728/folders/v2D2ylmgd10Z3UB6UkJSISSB512iz',
                emoji = '',
                author = '',
                ignore_author = '',
                limit = 1,
                thread_message_inclusion = 'ALL',
                filter_logic = 'AND',
                thread_message_mode = 'CONCATENATE',
                endpoint = 'Crawl',
                request = vectorize_client.models.request.request(),
                created_at = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                updated_at = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                state = open,
                select_resources = '',
                database_ids = '',
                database_names = '',
                page_ids = '',
                page_names = '',
                sites = 'UR,r8NBY08qY UboV 2Ow7qrz 0IL3 fR',
                allowed_domains_opt = '',
                forbidden_paths = '/BAMDT',
                min_time_between_requests = 1.337,
                max_error_count = 1.337,
                max_urls = 1.337,
                max_depth = 1.337,
                reindex_interval_seconds = 1.337,
                repositories = 'G/WzyBAw2ZuufUOHOEhA8IcFQXnuaZcdyyvKX7HzK',
                include_pull_requests = True,
                pull_request_status = 'all',
                pull_request_labels = '',
                include_issues = True,
                issue_status = 'all',
                issue_labels = '',
                max_items = 1.337,
                created_after = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                title_filter_type = 'AND',
                title_filter = '',
                participant_filter_type = 'AND',
                participant_filter = '',
                max_meetings = 1.337
            )
        else:
            return SourceConnectorInputConfig(
                file_extensions = pdf,
                idle_time = 1,
                spaces = '',
                endpoint = 'Crawl',
                request = vectorize_client.models.request.request(),
                created_at = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                select_resources = '',
                database_ids = '',
                database_names = '',
                page_ids = '',
                page_names = '',
                repositories = 'G/WzyBAw2ZuufUOHOEhA8IcFQXnuaZcdyyvKX7HzK',
                include_pull_requests = True,
                pull_request_status = 'all',
                include_issues = True,
                issue_status = 'all',
                max_items = 1.337,
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                title_filter_type = 'AND',
                participant_filter_type = 'AND',
        )
        """

    def testSourceConnectorInputConfig(self):
        """Test SourceConnectorInputConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
