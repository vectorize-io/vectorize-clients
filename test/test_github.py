# coding: utf-8

"""
    Vectorize API (Beta)

    API for Vectorize services

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vectorize_client.models.github import Github

class TestGithub(unittest.TestCase):
    """Github unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Github:
        """Test Github
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Github`
        """
        model = Github()
        if include_optional:
            return Github(
                name = '',
                type = 'GITHUB',
                config = vectorize_client.models.github_config.GITHUBConfig(
                    repositories = 'G/WzyBAw2ZuufUOHOEhA8IcFQXnuaZcdyyvKX7HzK', 
                    include_pull_requests = True, 
                    pull_request_status = 'all', 
                    pull_request_labels = '', 
                    include_issues = True, 
                    issue_status = 'all', 
                    issue_labels = '', 
                    max_items = 1.337, 
                    created_after = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
            )
        else:
            return Github(
                name = '',
                type = 'GITHUB',
                config = vectorize_client.models.github_config.GITHUBConfig(
                    repositories = 'G/WzyBAw2ZuufUOHOEhA8IcFQXnuaZcdyyvKX7HzK', 
                    include_pull_requests = True, 
                    pull_request_status = 'all', 
                    pull_request_labels = '', 
                    include_issues = True, 
                    issue_status = 'all', 
                    issue_labels = '', 
                    max_items = 1.337, 
                    created_after = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ),
        )
        """

    def testGithub(self):
        """Test Github"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
