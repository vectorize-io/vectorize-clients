# coding: utf-8

"""
    Vectorize API (Beta)

    API for Vectorize services

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vectorize_client.models.create_source_connector_request_inner import CreateSourceConnectorRequestInner

class TestCreateSourceConnectorRequestInner(unittest.TestCase):
    """CreateSourceConnectorRequestInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateSourceConnectorRequestInner:
        """Test CreateSourceConnectorRequestInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateSourceConnectorRequestInner`
        """
        model = CreateSourceConnectorRequestInner()
        if include_optional:
            return CreateSourceConnectorRequestInner(
                name = '',
                type = 'AWS_S3',
                config = vectorize_client.models.fireflies_config.FIREFLIESConfig(
                    start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    title_filter_type = 'AND', 
                    title_filter = '', 
                    participant_filter_type = 'AND', 
                    participant_filter = '', 
                    max_meetings = 1.337, )
            )
        else:
            return CreateSourceConnectorRequestInner(
                name = '',
                type = 'AWS_S3',
                config = vectorize_client.models.fireflies_config.FIREFLIESConfig(
                    start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    title_filter_type = 'AND', 
                    title_filter = '', 
                    participant_filter_type = 'AND', 
                    participant_filter = '', 
                    max_meetings = 1.337, ),
        )
        """

    def testCreateSourceConnectorRequestInner(self):
        """Test CreateSourceConnectorRequestInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
