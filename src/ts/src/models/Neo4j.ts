/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NEO4JAuthConfig } from './NEO4JAuthConfig';
import {
    NEO4JAuthConfigFromJSON,
    NEO4JAuthConfigFromJSONTyped,
    NEO4JAuthConfigToJSON,
    NEO4JAuthConfigToJSONTyped,
} from './NEO4JAuthConfig';

/**
 * 
 * @export
 * @interface Neo4j
 */
export interface Neo4j {
    /**
     * Name of the connector
     * @type {string}
     * @memberof Neo4j
     */
    name: string;
    /**
     * Connector type (must be "NEO4J")
     * @type {string}
     * @memberof Neo4j
     */
    type: Neo4jTypeEnum;
    /**
     * 
     * @type {NEO4JAuthConfig}
     * @memberof Neo4j
     */
    config: NEO4JAuthConfig;
}


/**
 * @export
 */
export const Neo4jTypeEnum = {
    Neo4J: 'NEO4J'
} as const;
export type Neo4jTypeEnum = typeof Neo4jTypeEnum[keyof typeof Neo4jTypeEnum];


/**
 * Check if a given object implements the Neo4j interface.
 */
export function instanceOfNeo4j(value: object): value is Neo4j {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('config' in value) || value['config'] === undefined) return false;
    return true;
}

export function Neo4jFromJSON(json: any): Neo4j {
    return Neo4jFromJSONTyped(json, false);
}

export function Neo4jFromJSONTyped(json: any, ignoreDiscriminator: boolean): Neo4j {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': json['type'],
        'config': NEO4JAuthConfigFromJSON(json['config']),
    };
}

export function Neo4jToJSON(json: any): Neo4j {
    return Neo4jToJSONTyped(json, false);
}

export function Neo4jToJSONTyped(value?: Neo4j | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'type': value['type'],
        'config': NEO4JAuthConfigToJSON(value['config']),
    };
}

