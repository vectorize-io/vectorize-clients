/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AddUserToSourceConnectorRequestSelectedFiles } from './AddUserToSourceConnectorRequestSelectedFiles';
import {
    AddUserToSourceConnectorRequestSelectedFilesFromJSON,
    AddUserToSourceConnectorRequestSelectedFilesFromJSONTyped,
    AddUserToSourceConnectorRequestSelectedFilesToJSON,
    AddUserToSourceConnectorRequestSelectedFilesToJSONTyped,
} from './AddUserToSourceConnectorRequestSelectedFiles';

/**
 * 
 * @export
 * @interface AddUserToSourceConnectorRequest
 */
export interface AddUserToSourceConnectorRequest {
    /**
     * Your application's unique identifier for this user. This is not a Dropbox/Google/Notion user ID, but rather an ID from your system to track which of your users has connected their account
     * @type {string}
     * @memberof AddUserToSourceConnectorRequest
     */
    userId: string;
    /**
     * 
     * @type {AddUserToSourceConnectorRequestSelectedFiles}
     * @memberof AddUserToSourceConnectorRequest
     */
    selectedFiles: AddUserToSourceConnectorRequestSelectedFiles;
    /**
     * OAuth refresh token obtained from the provider's OAuth callback. Required for Google Drive and Dropbox. This token is returned after the user completes the OAuth authorization flow and is used to obtain new access tokens when they expire
     * @type {string}
     * @memberof AddUserToSourceConnectorRequest
     */
    refreshToken?: string;
    /**
     * OAuth access token obtained from the provider's OAuth callback. Required for Notion (which doesn't use refresh tokens). This token is returned after the user completes the OAuth authorization flow
     * @type {string}
     * @memberof AddUserToSourceConnectorRequest
     */
    accessToken?: string;
}

/**
 * Check if a given object implements the AddUserToSourceConnectorRequest interface.
 */
export function instanceOfAddUserToSourceConnectorRequest(value: object): value is AddUserToSourceConnectorRequest {
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('selectedFiles' in value) || value['selectedFiles'] === undefined) return false;
    return true;
}

export function AddUserToSourceConnectorRequestFromJSON(json: any): AddUserToSourceConnectorRequest {
    return AddUserToSourceConnectorRequestFromJSONTyped(json, false);
}

export function AddUserToSourceConnectorRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddUserToSourceConnectorRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'userId': json['userId'],
        'selectedFiles': AddUserToSourceConnectorRequestSelectedFilesFromJSON(json['selectedFiles']),
        'refreshToken': json['refreshToken'] == null ? undefined : json['refreshToken'],
        'accessToken': json['accessToken'] == null ? undefined : json['accessToken'],
    };
}

export function AddUserToSourceConnectorRequestToJSON(json: any): AddUserToSourceConnectorRequest {
    return AddUserToSourceConnectorRequestToJSONTyped(json, false);
}

export function AddUserToSourceConnectorRequestToJSONTyped(value?: AddUserToSourceConnectorRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'userId': value['userId'],
        'selectedFiles': AddUserToSourceConnectorRequestSelectedFilesToJSON(value['selectedFiles']),
        'refreshToken': value['refreshToken'],
        'accessToken': value['accessToken'],
    };
}

