/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Configuration for Discord connector
 * @export
 * @interface DISCORDConfig
 */
export interface DISCORDConfig {
    /**
     * Emoji Filter. Example: Enter custom emoji filter name
     * @type {string}
     * @memberof DISCORDConfig
     */
    emoji?: string;
    /**
     * Author Filter. Example: Enter author name
     * @type {string}
     * @memberof DISCORDConfig
     */
    author?: string;
    /**
     * Ignore Author Filter. Example: Enter ignore author name
     * @type {string}
     * @memberof DISCORDConfig
     */
    ignoreAuthor?: string;
    /**
     * Limit. Example: Enter limit
     * @type {number}
     * @memberof DISCORDConfig
     */
    limit?: number;
    /**
     * Thread Message Inclusion
     * @type {string}
     * @memberof DISCORDConfig
     */
    threadMessageInclusion?: DISCORDConfigThreadMessageInclusionEnum;
    /**
     * Filter Logic
     * @type {string}
     * @memberof DISCORDConfig
     */
    filterLogic?: DISCORDConfigFilterLogicEnum;
    /**
     * Thread Message Mode
     * @type {string}
     * @memberof DISCORDConfig
     */
    threadMessageMode?: DISCORDConfigThreadMessageModeEnum;
}


/**
 * @export
 */
export const DISCORDConfigThreadMessageInclusionEnum = {
    All: 'ALL',
    Filter: 'FILTER'
} as const;
export type DISCORDConfigThreadMessageInclusionEnum = typeof DISCORDConfigThreadMessageInclusionEnum[keyof typeof DISCORDConfigThreadMessageInclusionEnum];

/**
 * @export
 */
export const DISCORDConfigFilterLogicEnum = {
    And: 'AND',
    Or: 'OR'
} as const;
export type DISCORDConfigFilterLogicEnum = typeof DISCORDConfigFilterLogicEnum[keyof typeof DISCORDConfigFilterLogicEnum];

/**
 * @export
 */
export const DISCORDConfigThreadMessageModeEnum = {
    Concatenate: 'CONCATENATE',
    Single: 'SINGLE'
} as const;
export type DISCORDConfigThreadMessageModeEnum = typeof DISCORDConfigThreadMessageModeEnum[keyof typeof DISCORDConfigThreadMessageModeEnum];


/**
 * Check if a given object implements the DISCORDConfig interface.
 */
export function instanceOfDISCORDConfig(value: object): value is DISCORDConfig {
    return true;
}

export function DISCORDConfigFromJSON(json: any): DISCORDConfig {
    return DISCORDConfigFromJSONTyped(json, false);
}

export function DISCORDConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): DISCORDConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'emoji': json['emoji'] == null ? undefined : json['emoji'],
        'author': json['author'] == null ? undefined : json['author'],
        'ignoreAuthor': json['ignore-author'] == null ? undefined : json['ignore-author'],
        'limit': json['limit'] == null ? undefined : json['limit'],
        'threadMessageInclusion': json['thread-message-inclusion'] == null ? undefined : json['thread-message-inclusion'],
        'filterLogic': json['filter-logic'] == null ? undefined : json['filter-logic'],
        'threadMessageMode': json['thread-message-mode'] == null ? undefined : json['thread-message-mode'],
    };
}

export function DISCORDConfigToJSON(json: any): DISCORDConfig {
    return DISCORDConfigToJSONTyped(json, false);
}

export function DISCORDConfigToJSONTyped(value?: DISCORDConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'emoji': value['emoji'],
        'author': value['author'],
        'ignore-author': value['ignoreAuthor'],
        'limit': value['limit'],
        'thread-message-inclusion': value['threadMessageInclusion'],
        'filter-logic': value['filterLogic'],
        'thread-message-mode': value['threadMessageMode'],
    };
}

