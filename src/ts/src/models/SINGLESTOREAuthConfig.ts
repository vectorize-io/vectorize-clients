/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Authentication configuration for SingleStore
 * @export
 * @interface SINGLESTOREAuthConfig
 */
export interface SINGLESTOREAuthConfig {
    /**
     * Name. Example: Enter a descriptive name for your SingleStore integration
     * @type {string}
     * @memberof SINGLESTOREAuthConfig
     */
    name: string;
    /**
     * Host. Example: Enter the host of the deployment
     * @type {string}
     * @memberof SINGLESTOREAuthConfig
     */
    host: string;
    /**
     * Port. Example: Enter the port of the deployment
     * @type {number}
     * @memberof SINGLESTOREAuthConfig
     */
    port: number;
    /**
     * Database. Example: Enter the database name
     * @type {string}
     * @memberof SINGLESTOREAuthConfig
     */
    database: string;
    /**
     * Username. Example: Enter the username
     * @type {string}
     * @memberof SINGLESTOREAuthConfig
     */
    username: string;
    /**
     * Password. Example: Enter the username's password
     * @type {string}
     * @memberof SINGLESTOREAuthConfig
     */
    password: string;
}

/**
 * Check if a given object implements the SINGLESTOREAuthConfig interface.
 */
export function instanceOfSINGLESTOREAuthConfig(value: object): value is SINGLESTOREAuthConfig {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('host' in value) || value['host'] === undefined) return false;
    if (!('port' in value) || value['port'] === undefined) return false;
    if (!('database' in value) || value['database'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('password' in value) || value['password'] === undefined) return false;
    return true;
}

export function SINGLESTOREAuthConfigFromJSON(json: any): SINGLESTOREAuthConfig {
    return SINGLESTOREAuthConfigFromJSONTyped(json, false);
}

export function SINGLESTOREAuthConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): SINGLESTOREAuthConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'host': json['host'],
        'port': json['port'],
        'database': json['database'],
        'username': json['username'],
        'password': json['password'],
    };
}

export function SINGLESTOREAuthConfigToJSON(json: any): SINGLESTOREAuthConfig {
    return SINGLESTOREAuthConfigToJSONTyped(json, false);
}

export function SINGLESTOREAuthConfigToJSONTyped(value?: SINGLESTOREAuthConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'host': value['host'],
        'port': value['port'],
        'database': value['database'],
        'username': value['username'],
        'password': value['password'],
    };
}

