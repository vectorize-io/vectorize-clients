/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Configuration for DocuSign connector
 * @export
 * @interface DOCUSIGNConfig
 */
export interface DOCUSIGNConfig {
    /**
     * Envelope Statuses. Filter envelopes by status
     * @type {Array<string>}
     * @memberof DOCUSIGNConfig
     */
    envelopeStatuses?: DOCUSIGNConfigEnvelopeStatusesEnum;
    /**
     * Created From Date. Include envelopes created on or after this date. Example: Enter start date (YYYY-MM-DD)
     * @type {Date}
     * @memberof DOCUSIGNConfig
     */
    fromDate: Date;
    /**
     * Created To Date. Include envelopes that were last updated up to this date. Example: Enter end date (YYYY-MM-DD)
     * @type {Date}
     * @memberof DOCUSIGNConfig
     */
    toDate?: Date;
    /**
     * Max Envelopes. Leave blank for no limit, or specify a maximum number. Example: Enter maximum number of documents to retrieve (leave blank for no limit)
     * @type {number}
     * @memberof DOCUSIGNConfig
     */
    maxDocuments?: number;
    /**
     * Search Text. Filter envelopes containing this text in the email subject, sender, body, or custom fields. Example: Enter text to search within envelope content
     * @type {string}
     * @memberof DOCUSIGNConfig
     */
    searchText?: string;
}


/**
 * @export
 */
export const DOCUSIGNConfigEnvelopeStatusesEnum = {
    Completed: 'completed',
    Correct: 'correct',
    Created: 'created',
    Declined: 'declined',
    Delivered: 'delivered',
    Sent: 'sent',
    Signed: 'signed',
    Voided: 'voided',
    All: 'all'
} as const;
export type DOCUSIGNConfigEnvelopeStatusesEnum = typeof DOCUSIGNConfigEnvelopeStatusesEnum[keyof typeof DOCUSIGNConfigEnvelopeStatusesEnum];


/**
 * Check if a given object implements the DOCUSIGNConfig interface.
 */
export function instanceOfDOCUSIGNConfig(value: object): value is DOCUSIGNConfig {
    if (!('fromDate' in value) || value['fromDate'] === undefined) return false;
    return true;
}

export function DOCUSIGNConfigFromJSON(json: any): DOCUSIGNConfig {
    return DOCUSIGNConfigFromJSONTyped(json, false);
}

export function DOCUSIGNConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): DOCUSIGNConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'envelopeStatuses': json['envelope-statuses'] == null ? undefined : json['envelope-statuses'],
        'fromDate': (new Date(json['from-date'])),
        'toDate': json['to-date'] == null ? undefined : (new Date(json['to-date'])),
        'maxDocuments': json['max-documents'] == null ? undefined : json['max-documents'],
        'searchText': json['search-text'] == null ? undefined : json['search-text'],
    };
}

export function DOCUSIGNConfigToJSON(json: any): DOCUSIGNConfig {
    return DOCUSIGNConfigToJSONTyped(json, false);
}

export function DOCUSIGNConfigToJSONTyped(value?: DOCUSIGNConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'envelope-statuses': value['envelopeStatuses'],
        'from-date': ((value['fromDate']).toISOString().substring(0,10)),
        'to-date': value['toDate'] == null ? undefined : ((value['toDate']).toISOString().substring(0,10)),
        'max-documents': value['maxDocuments'],
        'search-text': value['searchText'],
    };
}

