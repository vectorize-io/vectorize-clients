/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API (Beta)
 * API for Vectorize services
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AIPlatformType } from './AIPlatformType';
import {
    AIPlatformTypeFromJSON,
    AIPlatformTypeFromJSONTyped,
    AIPlatformTypeToJSON,
    AIPlatformTypeToJSONTyped,
} from './AIPlatformType';
import type { AIPlatformConfigSchema } from './AIPlatformConfigSchema';
import {
    AIPlatformConfigSchemaFromJSON,
    AIPlatformConfigSchemaFromJSONTyped,
    AIPlatformConfigSchemaToJSON,
    AIPlatformConfigSchemaToJSONTyped,
} from './AIPlatformConfigSchema';

/**
 * 
 * @export
 * @interface AIPlatformSchema
 */
export interface AIPlatformSchema {
    /**
     * 
     * @type {string}
     * @memberof AIPlatformSchema
     */
    id: string;
    /**
     * 
     * @type {AIPlatformType}
     * @memberof AIPlatformSchema
     */
    type: AIPlatformType;
    /**
     * 
     * @type {AIPlatformConfigSchema}
     * @memberof AIPlatformSchema
     */
    config: AIPlatformConfigSchema;
}



/**
 * Check if a given object implements the AIPlatformSchema interface.
 */
export function instanceOfAIPlatformSchema(value: object): value is AIPlatformSchema {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('config' in value) || value['config'] === undefined) return false;
    return true;
}

export function AIPlatformSchemaFromJSON(json: any): AIPlatformSchema {
    return AIPlatformSchemaFromJSONTyped(json, false);
}

export function AIPlatformSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): AIPlatformSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': AIPlatformTypeFromJSON(json['type']),
        'config': AIPlatformConfigSchemaFromJSON(json['config']),
    };
}

export function AIPlatformSchemaToJSON(json: any): AIPlatformSchema {
    return AIPlatformSchemaToJSONTyped(json, false);
}

export function AIPlatformSchemaToJSONTyped(value?: AIPlatformSchema | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': AIPlatformTypeToJSON(value['type']),
        'config': AIPlatformConfigSchemaToJSON(value['config']),
    };
}

