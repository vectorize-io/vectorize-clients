/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API (Beta)
 * API for Vectorize services
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ScheduleSchema } from './ScheduleSchema';
import {
    ScheduleSchemaFromJSON,
    ScheduleSchemaFromJSONTyped,
    ScheduleSchemaToJSON,
    ScheduleSchemaToJSONTyped,
} from './ScheduleSchema';
import type { SourceConnectorSchema } from './SourceConnectorSchema';
import {
    SourceConnectorSchemaFromJSON,
    SourceConnectorSchemaFromJSONTyped,
    SourceConnectorSchemaToJSON,
    SourceConnectorSchemaToJSONTyped,
} from './SourceConnectorSchema';
import type { DestinationConnectorSchema } from './DestinationConnectorSchema';
import {
    DestinationConnectorSchemaFromJSON,
    DestinationConnectorSchemaFromJSONTyped,
    DestinationConnectorSchemaToJSON,
    DestinationConnectorSchemaToJSONTyped,
} from './DestinationConnectorSchema';
import type { AIPlatformSchema } from './AIPlatformSchema';
import {
    AIPlatformSchemaFromJSON,
    AIPlatformSchemaFromJSONTyped,
    AIPlatformSchemaToJSON,
    AIPlatformSchemaToJSONTyped,
} from './AIPlatformSchema';

/**
 * 
 * @export
 * @interface PipelineConfigurationSchema
 */
export interface PipelineConfigurationSchema {
    /**
     * 
     * @type {Array<SourceConnectorSchema>}
     * @memberof PipelineConfigurationSchema
     */
    sourceConnectors: Array<SourceConnectorSchema>;
    /**
     * 
     * @type {DestinationConnectorSchema}
     * @memberof PipelineConfigurationSchema
     */
    destinationConnector: DestinationConnectorSchema;
    /**
     * 
     * @type {AIPlatformSchema}
     * @memberof PipelineConfigurationSchema
     */
    aiPlatform: AIPlatformSchema;
    /**
     * 
     * @type {string}
     * @memberof PipelineConfigurationSchema
     */
    pipelineName: string;
    /**
     * 
     * @type {ScheduleSchema}
     * @memberof PipelineConfigurationSchema
     */
    schedule: ScheduleSchema;
}

/**
 * Check if a given object implements the PipelineConfigurationSchema interface.
 */
export function instanceOfPipelineConfigurationSchema(value: object): value is PipelineConfigurationSchema {
    if (!('sourceConnectors' in value) || value['sourceConnectors'] === undefined) return false;
    if (!('destinationConnector' in value) || value['destinationConnector'] === undefined) return false;
    if (!('aiPlatform' in value) || value['aiPlatform'] === undefined) return false;
    if (!('pipelineName' in value) || value['pipelineName'] === undefined) return false;
    if (!('schedule' in value) || value['schedule'] === undefined) return false;
    return true;
}

export function PipelineConfigurationSchemaFromJSON(json: any): PipelineConfigurationSchema {
    return PipelineConfigurationSchemaFromJSONTyped(json, false);
}

export function PipelineConfigurationSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): PipelineConfigurationSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'sourceConnectors': ((json['sourceConnectors'] as Array<any>).map(SourceConnectorSchemaFromJSON)),
        'destinationConnector': DestinationConnectorSchemaFromJSON(json['destinationConnector']),
        'aiPlatform': AIPlatformSchemaFromJSON(json['aiPlatform']),
        'pipelineName': json['pipelineName'],
        'schedule': ScheduleSchemaFromJSON(json['schedule']),
    };
}

export function PipelineConfigurationSchemaToJSON(json: any): PipelineConfigurationSchema {
    return PipelineConfigurationSchemaToJSONTyped(json, false);
}

export function PipelineConfigurationSchemaToJSONTyped(value?: PipelineConfigurationSchema | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sourceConnectors': ((value['sourceConnectors'] as Array<any>).map(SourceConnectorSchemaToJSON)),
        'destinationConnector': DestinationConnectorSchemaToJSON(value['destinationConnector']),
        'aiPlatform': AIPlatformSchemaToJSON(value['aiPlatform']),
        'pipelineName': value['pipelineName'],
        'schedule': ScheduleSchemaToJSON(value['schedule']),
    };
}

