/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PipelineSourceConnectorSchema } from './PipelineSourceConnectorSchema';
import {
    PipelineSourceConnectorSchemaFromJSON,
    PipelineSourceConnectorSchemaFromJSONTyped,
    PipelineSourceConnectorSchemaToJSON,
    PipelineSourceConnectorSchemaToJSONTyped,
} from './PipelineSourceConnectorSchema';
import type { ScheduleSchema } from './ScheduleSchema';
import {
    ScheduleSchemaFromJSON,
    ScheduleSchemaFromJSONTyped,
    ScheduleSchemaToJSON,
    ScheduleSchemaToJSONTyped,
} from './ScheduleSchema';
import type { PipelineAIPlatformConnectorSchema } from './PipelineAIPlatformConnectorSchema';
import {
    PipelineAIPlatformConnectorSchemaFromJSON,
    PipelineAIPlatformConnectorSchemaFromJSONTyped,
    PipelineAIPlatformConnectorSchemaToJSON,
    PipelineAIPlatformConnectorSchemaToJSONTyped,
} from './PipelineAIPlatformConnectorSchema';
import type { PipelineDestinationConnectorSchema } from './PipelineDestinationConnectorSchema';
import {
    PipelineDestinationConnectorSchemaFromJSON,
    PipelineDestinationConnectorSchemaFromJSONTyped,
    PipelineDestinationConnectorSchemaToJSON,
    PipelineDestinationConnectorSchemaToJSONTyped,
} from './PipelineDestinationConnectorSchema';

/**
 * 
 * @export
 * @interface PipelineConfigurationSchema
 */
export interface PipelineConfigurationSchema {
    /**
     * 
     * @type {Array<PipelineSourceConnectorSchema>}
     * @memberof PipelineConfigurationSchema
     */
    sourceConnectors: Array<PipelineSourceConnectorSchema>;
    /**
     * 
     * @type {PipelineDestinationConnectorSchema}
     * @memberof PipelineConfigurationSchema
     */
    destinationConnector: PipelineDestinationConnectorSchema;
    /**
     * 
     * @type {PipelineAIPlatformConnectorSchema}
     * @memberof PipelineConfigurationSchema
     */
    aiPlatformConnector: PipelineAIPlatformConnectorSchema;
    /**
     * 
     * @type {string}
     * @memberof PipelineConfigurationSchema
     */
    pipelineName: string;
    /**
     * 
     * @type {ScheduleSchema}
     * @memberof PipelineConfigurationSchema
     */
    schedule: ScheduleSchema;
}

/**
 * Check if a given object implements the PipelineConfigurationSchema interface.
 */
export function instanceOfPipelineConfigurationSchema(value: object): value is PipelineConfigurationSchema {
    if (!('sourceConnectors' in value) || value['sourceConnectors'] === undefined) return false;
    if (!('destinationConnector' in value) || value['destinationConnector'] === undefined) return false;
    if (!('aiPlatformConnector' in value) || value['aiPlatformConnector'] === undefined) return false;
    if (!('pipelineName' in value) || value['pipelineName'] === undefined) return false;
    if (!('schedule' in value) || value['schedule'] === undefined) return false;
    return true;
}

export function PipelineConfigurationSchemaFromJSON(json: any): PipelineConfigurationSchema {
    return PipelineConfigurationSchemaFromJSONTyped(json, false);
}

export function PipelineConfigurationSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): PipelineConfigurationSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'sourceConnectors': ((json['sourceConnectors'] as Array<any>).map(PipelineSourceConnectorSchemaFromJSON)),
        'destinationConnector': PipelineDestinationConnectorSchemaFromJSON(json['destinationConnector']),
        'aiPlatformConnector': PipelineAIPlatformConnectorSchemaFromJSON(json['aiPlatformConnector']),
        'pipelineName': json['pipelineName'],
        'schedule': ScheduleSchemaFromJSON(json['schedule']),
    };
}

export function PipelineConfigurationSchemaToJSON(json: any): PipelineConfigurationSchema {
    return PipelineConfigurationSchemaToJSONTyped(json, false);
}

export function PipelineConfigurationSchemaToJSONTyped(value?: PipelineConfigurationSchema | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sourceConnectors': ((value['sourceConnectors'] as Array<any>).map(PipelineSourceConnectorSchemaToJSON)),
        'destinationConnector': PipelineDestinationConnectorSchemaToJSON(value['destinationConnector']),
        'aiPlatformConnector': PipelineAIPlatformConnectorSchemaToJSON(value['aiPlatformConnector']),
        'pipelineName': value['pipelineName'],
        'schedule': ScheduleSchemaToJSON(value['schedule']),
    };
}

