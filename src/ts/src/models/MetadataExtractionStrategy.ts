/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API (Beta)
 * API for Vectorize services
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MetadataExtractionStrategySchema } from './MetadataExtractionStrategySchema';
import {
    MetadataExtractionStrategySchemaFromJSON,
    MetadataExtractionStrategySchemaFromJSONTyped,
    MetadataExtractionStrategySchemaToJSON,
    MetadataExtractionStrategySchemaToJSONTyped,
} from './MetadataExtractionStrategySchema';

/**
 * 
 * @export
 * @interface MetadataExtractionStrategy
 */
export interface MetadataExtractionStrategy {
    /**
     * 
     * @type {Array<MetadataExtractionStrategySchema>}
     * @memberof MetadataExtractionStrategy
     */
    schemas?: Array<MetadataExtractionStrategySchema>;
    /**
     * 
     * @type {boolean}
     * @memberof MetadataExtractionStrategy
     */
    inferSchema?: boolean;
}

/**
 * Check if a given object implements the MetadataExtractionStrategy interface.
 */
export function instanceOfMetadataExtractionStrategy(value: object): value is MetadataExtractionStrategy {
    return true;
}

export function MetadataExtractionStrategyFromJSON(json: any): MetadataExtractionStrategy {
    return MetadataExtractionStrategyFromJSONTyped(json, false);
}

export function MetadataExtractionStrategyFromJSONTyped(json: any, ignoreDiscriminator: boolean): MetadataExtractionStrategy {
    if (json == null) {
        return json;
    }
    return {
        
        'schemas': json['schemas'] == null ? undefined : ((json['schemas'] as Array<any>).map(MetadataExtractionStrategySchemaFromJSON)),
        'inferSchema': json['inferSchema'] == null ? undefined : json['inferSchema'],
    };
}

export function MetadataExtractionStrategyToJSON(json: any): MetadataExtractionStrategy {
    return MetadataExtractionStrategyToJSONTyped(json, false);
}

export function MetadataExtractionStrategyToJSONTyped(value?: MetadataExtractionStrategy | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'schemas': value['schemas'] == null ? undefined : ((value['schemas'] as Array<any>).map(MetadataExtractionStrategySchemaToJSON)),
        'inferSchema': value['inferSchema'],
    };
}

