/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';

/**
 * AI platform configuration
 * @export
 * @interface AIPlatformConnectorInput
 */
export interface AIPlatformConnectorInput {
    /**
     * Unique identifier for the AI platform
     * @type {string}
     * @memberof AIPlatformConnectorInput
     */
    id: string;
    /**
     * Type of AI platform
     * @type {string}
     * @memberof AIPlatformConnectorInput
     */
    type: AIPlatformConnectorInputTypeEnum;
    /**
     * Configuration specific to the AI platform
     * @type {any}
     * @memberof AIPlatformConnectorInput
     */
    config: any | null;
}


/**
 * @export
 */
export const AIPlatformConnectorInputTypeEnum = {
    Bedrock: 'BEDROCK',
    Vertex: 'VERTEX',
    Openai: 'OPENAI',
    Voyage: 'VOYAGE'
} as const;
export type AIPlatformConnectorInputTypeEnum = typeof AIPlatformConnectorInputTypeEnum[keyof typeof AIPlatformConnectorInputTypeEnum];


/**
 * Check if a given object implements the AIPlatformConnectorInput interface.
 */
export function instanceOfAIPlatformConnectorInput(value: object): value is AIPlatformConnectorInput {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('config' in value) || value['config'] === undefined) return false;
    return true;
}

export function AIPlatformConnectorInputFromJSON(json: any): AIPlatformConnectorInput {
    return AIPlatformConnectorInputFromJSONTyped(json, false);
}

export function AIPlatformConnectorInputFromJSONTyped(json: any, ignoreDiscriminator: boolean): AIPlatformConnectorInput {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'config': json['config'],
    };
}

export function AIPlatformConnectorInputToJSON(json: any): AIPlatformConnectorInput {
    return AIPlatformConnectorInputToJSONTyped(json, false);
}

export function AIPlatformConnectorInputToJSONTyped(value?: AIPlatformConnectorInput | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'config': value['config'],
    };
}

