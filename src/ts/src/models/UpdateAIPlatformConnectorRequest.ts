/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Bedrock1 } from './Bedrock1';
import {
    instanceOfBedrock1,
    Bedrock1FromJSON,
    Bedrock1FromJSONTyped,
    Bedrock1ToJSON,
} from './Bedrock1';
import type { Openai1 } from './Openai1';
import {
    instanceOfOpenai1,
    Openai1FromJSON,
    Openai1FromJSONTyped,
    Openai1ToJSON,
} from './Openai1';
import type { Vertex1 } from './Vertex1';
import {
    instanceOfVertex1,
    Vertex1FromJSON,
    Vertex1FromJSONTyped,
    Vertex1ToJSON,
} from './Vertex1';
import type { Voyage1 } from './Voyage1';
import {
    instanceOfVoyage1,
    Voyage1FromJSON,
    Voyage1FromJSONTyped,
    Voyage1ToJSON,
} from './Voyage1';

/**
 * @type UpdateAIPlatformConnectorRequest
 * 
 * @export
 */
export type UpdateAIPlatformConnectorRequest = Bedrock1 | Openai1 | Vertex1 | Voyage1;

export function UpdateAIPlatformConnectorRequestFromJSON(json: any): UpdateAIPlatformConnectorRequest {
    return UpdateAIPlatformConnectorRequestFromJSONTyped(json, false);
}

export function UpdateAIPlatformConnectorRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateAIPlatformConnectorRequest {
    if (json == null) {
        return json;
    }
    if (typeof json !== 'object') {
        return json;
    }
    if (instanceOfBedrock1(json)) {
        return Bedrock1FromJSONTyped(json, true);
    }
    if (instanceOfOpenai1(json)) {
        return Openai1FromJSONTyped(json, true);
    }
    if (instanceOfVertex1(json)) {
        return Vertex1FromJSONTyped(json, true);
    }
    if (instanceOfVoyage1(json)) {
        return Voyage1FromJSONTyped(json, true);
    }

    return {} as any;
}

export function UpdateAIPlatformConnectorRequestToJSON(json: any): any {
    return UpdateAIPlatformConnectorRequestToJSONTyped(json, false);
}

export function UpdateAIPlatformConnectorRequestToJSONTyped(value?: UpdateAIPlatformConnectorRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    if (typeof value !== 'object') {
        return value;
    }
    if (instanceOfBedrock1(value)) {
        return Bedrock1ToJSON(value as Bedrock1);
    }
    if (instanceOfOpenai1(value)) {
        return Openai1ToJSON(value as Openai1);
    }
    if (instanceOfVertex1(value)) {
        return Vertex1ToJSON(value as Vertex1);
    }
    if (instanceOfVoyage1(value)) {
        return Voyage1ToJSON(value as Voyage1);
    }

    return {};
}

