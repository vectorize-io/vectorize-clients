/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Configuration for Zoom Admin connector
 * @export
 * @interface ZOOMADMINConfig
 */
export interface ZOOMADMINConfig {
    /**
     * Start Date. Include meetings from this date forward. Example: Enter a date: Example 2023-12-31
     * @type {Date}
     * @memberof ZOOMADMINConfig
     */
    startDate: Date;
    /**
     * End Date. Include meetings up to this date only. Example: Enter a date: Example 2023-12-31
     * @type {Date}
     * @memberof ZOOMADMINConfig
     */
    endDate?: Date;
    /**
     * Recording hosts. Specify user emails to automatically fetch their meeting recordings. When not provided, all users in the account will be processed.. Example: Enter user email addresses
     * @type {Array<string>}
     * @memberof ZOOMADMINConfig
     */
    userEmails?: Array<string>;
    /**
     * Title Filter. Only include meetings containing any of these keywords in the title. Example: Enter meeting title keywords
     * @type {Array<string>}
     * @memberof ZOOMADMINConfig
     */
    titleFilter?: Array<string>;
    /**
     * Maximum Meetings. Leave blank for no limit, or specify a maximum number. Example: Enter maximum number of meetings to retrieve (leave blank for no limit)
     * @type {number}
     * @memberof ZOOMADMINConfig
     */
    maxMeetings?: number;
    /**
     * 
     * @type {string}
     * @memberof ZOOMADMINConfig
     */
    participantFilterType: string;
    /**
     * Participant Filter (Admin Only). Only include meetings with these participants (requires admin permissions). Example: Enter participant email or name
     * @type {string}
     * @memberof ZOOMADMINConfig
     */
    participantFilter?: string;
}

/**
 * Check if a given object implements the ZOOMADMINConfig interface.
 */
export function instanceOfZOOMADMINConfig(value: object): value is ZOOMADMINConfig {
    if (!('startDate' in value) || value['startDate'] === undefined) return false;
    if (!('participantFilterType' in value) || value['participantFilterType'] === undefined) return false;
    return true;
}

export function ZOOMADMINConfigFromJSON(json: any): ZOOMADMINConfig {
    return ZOOMADMINConfigFromJSONTyped(json, false);
}

export function ZOOMADMINConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): ZOOMADMINConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'startDate': (new Date(json['start-date'])),
        'endDate': json['end-date'] == null ? undefined : (new Date(json['end-date'])),
        'userEmails': json['user-emails'] == null ? undefined : json['user-emails'],
        'titleFilter': json['title-filter'] == null ? undefined : json['title-filter'],
        'maxMeetings': json['max-meetings'] == null ? undefined : json['max-meetings'],
        'participantFilterType': json['participant-filter-type'],
        'participantFilter': json['participant-filter'] == null ? undefined : json['participant-filter'],
    };
}

export function ZOOMADMINConfigToJSON(json: any): ZOOMADMINConfig {
    return ZOOMADMINConfigToJSONTyped(json, false);
}

export function ZOOMADMINConfigToJSONTyped(value?: ZOOMADMINConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'start-date': ((value['startDate']).toISOString().substring(0,10)),
        'end-date': value['endDate'] == null ? undefined : ((value['endDate']).toISOString().substring(0,10)),
        'user-emails': value['userEmails'],
        'title-filter': value['titleFilter'],
        'max-meetings': value['maxMeetings'],
        'participant-filter-type': value['participantFilterType'],
        'participant-filter': value['participantFilter'],
    };
}

