/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API (Beta)
 * API for Vectorize services
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AIPlatform,
  AddUserFromSourceConnectorResponse,
  AddUserToSourceConnectorRequest,
  CreateAIPlatformConnector,
  CreateAIPlatformConnectorResponse,
  CreateDestinationConnector,
  CreateDestinationConnectorResponse,
  CreateSourceConnector,
  CreateSourceConnectorResponse,
  DeleteAIPlatformConnectorResponse,
  DeleteDestinationConnectorResponse,
  DeleteSourceConnectorResponse,
  DestinationConnector,
  GetAIPlatformConnectors200Response,
  GetDestinationConnectors200Response,
  GetPipelines400Response,
  GetSourceConnectors200Response,
  RemoveUserFromSourceConnectorRequest,
  RemoveUserFromSourceConnectorResponse,
  SourceConnector,
  UpdateAIPlatformConnectorRequest,
  UpdateAIPlatformConnectorResponse,
  UpdateDestinationConnectorRequest,
  UpdateDestinationConnectorResponse,
  UpdateSourceConnectorRequest,
  UpdateSourceConnectorResponse,
  UpdateUserInSourceConnectorRequest,
  UpdateUserInSourceConnectorResponse,
} from '../models/index';
import {
    AIPlatformFromJSON,
    AIPlatformToJSON,
    AddUserFromSourceConnectorResponseFromJSON,
    AddUserFromSourceConnectorResponseToJSON,
    AddUserToSourceConnectorRequestFromJSON,
    AddUserToSourceConnectorRequestToJSON,
    CreateAIPlatformConnectorFromJSON,
    CreateAIPlatformConnectorToJSON,
    CreateAIPlatformConnectorResponseFromJSON,
    CreateAIPlatformConnectorResponseToJSON,
    CreateDestinationConnectorFromJSON,
    CreateDestinationConnectorToJSON,
    CreateDestinationConnectorResponseFromJSON,
    CreateDestinationConnectorResponseToJSON,
    CreateSourceConnectorFromJSON,
    CreateSourceConnectorToJSON,
    CreateSourceConnectorResponseFromJSON,
    CreateSourceConnectorResponseToJSON,
    DeleteAIPlatformConnectorResponseFromJSON,
    DeleteAIPlatformConnectorResponseToJSON,
    DeleteDestinationConnectorResponseFromJSON,
    DeleteDestinationConnectorResponseToJSON,
    DeleteSourceConnectorResponseFromJSON,
    DeleteSourceConnectorResponseToJSON,
    DestinationConnectorFromJSON,
    DestinationConnectorToJSON,
    GetAIPlatformConnectors200ResponseFromJSON,
    GetAIPlatformConnectors200ResponseToJSON,
    GetDestinationConnectors200ResponseFromJSON,
    GetDestinationConnectors200ResponseToJSON,
    GetPipelines400ResponseFromJSON,
    GetPipelines400ResponseToJSON,
    GetSourceConnectors200ResponseFromJSON,
    GetSourceConnectors200ResponseToJSON,
    RemoveUserFromSourceConnectorRequestFromJSON,
    RemoveUserFromSourceConnectorRequestToJSON,
    RemoveUserFromSourceConnectorResponseFromJSON,
    RemoveUserFromSourceConnectorResponseToJSON,
    SourceConnectorFromJSON,
    SourceConnectorToJSON,
    UpdateAIPlatformConnectorRequestFromJSON,
    UpdateAIPlatformConnectorRequestToJSON,
    UpdateAIPlatformConnectorResponseFromJSON,
    UpdateAIPlatformConnectorResponseToJSON,
    UpdateDestinationConnectorRequestFromJSON,
    UpdateDestinationConnectorRequestToJSON,
    UpdateDestinationConnectorResponseFromJSON,
    UpdateDestinationConnectorResponseToJSON,
    UpdateSourceConnectorRequestFromJSON,
    UpdateSourceConnectorRequestToJSON,
    UpdateSourceConnectorResponseFromJSON,
    UpdateSourceConnectorResponseToJSON,
    UpdateUserInSourceConnectorRequestFromJSON,
    UpdateUserInSourceConnectorRequestToJSON,
    UpdateUserInSourceConnectorResponseFromJSON,
    UpdateUserInSourceConnectorResponseToJSON,
} from '../models/index';

export interface AddUserToSourceConnectorOperationRequest {
    organization: string;
    sourceConnectorId: string;
    addUserToSourceConnectorRequest: AddUserToSourceConnectorRequest;
}

export interface CreateAIPlatformConnectorRequest {
    organization: string;
    createAIPlatformConnector: Array<CreateAIPlatformConnector>;
}

export interface CreateDestinationConnectorRequest {
    organization: string;
    createDestinationConnector: Array<CreateDestinationConnector>;
}

export interface CreateSourceConnectorRequest {
    organization: string;
    createSourceConnector: Array<CreateSourceConnector>;
}

export interface DeleteAIPlatformRequest {
    organization: string;
    aiplatformId: string;
}

export interface DeleteDestinationConnectorRequest {
    organization: string;
    destinationConnectorId: string;
}

export interface DeleteSourceConnectorRequest {
    organization: string;
    sourceConnectorId: string;
}

export interface DeleteUserFromSourceConnectorRequest {
    organization: string;
    sourceConnectorId: string;
    removeUserFromSourceConnectorRequest: RemoveUserFromSourceConnectorRequest;
}

export interface GetAIPlatformConnectorRequest {
    organization: string;
    aiplatformId: string;
}

export interface GetAIPlatformConnectorsRequest {
    organization: string;
}

export interface GetDestinationConnectorRequest {
    organization: string;
    destinationConnectorId: string;
}

export interface GetDestinationConnectorsRequest {
    organization: string;
}

export interface GetSourceConnectorRequest {
    organization: string;
    sourceConnectorId: string;
}

export interface GetSourceConnectorsRequest {
    organization: string;
}

export interface UpdateAIPlatformConnectorOperationRequest {
    organization: string;
    aiplatformId: string;
    updateAIPlatformConnectorRequest: UpdateAIPlatformConnectorRequest;
}

export interface UpdateDestinationConnectorOperationRequest {
    organization: string;
    destinationConnectorId: string;
    updateDestinationConnectorRequest: UpdateDestinationConnectorRequest;
}

export interface UpdateSourceConnectorOperationRequest {
    organization: string;
    sourceConnectorId: string;
    updateSourceConnectorRequest: UpdateSourceConnectorRequest;
}

export interface UpdateUserInSourceConnectorOperationRequest {
    organization: string;
    sourceConnectorId: string;
    updateUserInSourceConnectorRequest: UpdateUserInSourceConnectorRequest;
}

/**
 * 
 */
export class ConnectorsApi extends runtime.BaseAPI {

    /**
     * Add a user to a source connector
     */
    async addUserToSourceConnectorRaw(requestParameters: AddUserToSourceConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddUserFromSourceConnectorResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling addUserToSourceConnector().'
            );
        }

        if (requestParameters['sourceConnectorId'] == null) {
            throw new runtime.RequiredError(
                'sourceConnectorId',
                'Required parameter "sourceConnectorId" was null or undefined when calling addUserToSourceConnector().'
            );
        }

        if (requestParameters['addUserToSourceConnectorRequest'] == null) {
            throw new runtime.RequiredError(
                'addUserToSourceConnectorRequest',
                'Required parameter "addUserToSourceConnectorRequest" was null or undefined when calling addUserToSourceConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/sources/{sourceConnectorId}/users`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"sourceConnectorId"}}`, encodeURIComponent(String(requestParameters['sourceConnectorId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddUserToSourceConnectorRequestToJSON(requestParameters['addUserToSourceConnectorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddUserFromSourceConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Add a user to a source connector
     */
    async addUserToSourceConnector(requestParameters: AddUserToSourceConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddUserFromSourceConnectorResponse> {
        const response = await this.addUserToSourceConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new AI Platform connector. Config values: Amazon Bedrock (BEDROCK):  Name (name): text, Access Key (access-key): text, Secret Key (key): text) | Google Vertex AI (VERTEX):  Name (name): text, Service Account Json (key): textarea, Region (region): text) | OpenAI (OPENAI):  Name (name): text, API Key (key): text) | Voyage AI (VOYAGE):  Name (name): text, API Key (key): text) | Built-in (VECTORIZE):  )
     */
    async createAIPlatformConnectorRaw(requestParameters: CreateAIPlatformConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAIPlatformConnectorResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling createAIPlatformConnector().'
            );
        }

        if (requestParameters['createAIPlatformConnector'] == null) {
            throw new runtime.RequiredError(
                'createAIPlatformConnector',
                'Required parameter "createAIPlatformConnector" was null or undefined when calling createAIPlatformConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/aiplatforms`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createAIPlatformConnector']!.map(CreateAIPlatformConnectorToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAIPlatformConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Create a new AI Platform connector. Config values: Amazon Bedrock (BEDROCK):  Name (name): text, Access Key (access-key): text, Secret Key (key): text) | Google Vertex AI (VERTEX):  Name (name): text, Service Account Json (key): textarea, Region (region): text) | OpenAI (OPENAI):  Name (name): text, API Key (key): text) | Voyage AI (VOYAGE):  Name (name): text, API Key (key): text) | Built-in (VECTORIZE):  )
     */
    async createAIPlatformConnector(requestParameters: CreateAIPlatformConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAIPlatformConnectorResponse> {
        const response = await this.createAIPlatformConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new destination connector. Config values: Couchbase Capella (CAPELLA):  Name (name): text, Cluster Access Name (username): text, Cluster Access Password (password): text, Connection String (connection-string): text) | DataStax Astra (DATASTAX):  Name (name): text, API Endpoint (endpoint_secret): text, Application Token (token): text) | Elasticsearch (ELASTIC):  Name (name): text, Host (host): text, Port (port): text, API Key (api-key): text) | Pinecone (PINECONE):  Name (name): text, API Key (api-key): text) | SingleStore (SINGLESTORE):  Name (name): text, Host (host): text, Port (port): number, Database (database): text, Username (username): text, Password (password): text) | Milvus (MILVUS):  Name (name): text, Public Endpoint (url): text, Token (token): text, Username (username): text, Password (password): text) | PostgreSQL (POSTGRESQL):  Name (name): text, Host (host): text, Port (port): number, Database (database): text, Username (username): text, Password (password): text) | Qdrant (QDRANT):  Name (name): text, Host (host): text, API Key (api-key): text) | Weaviate (WEAVIATE):  Name (name): text, Endpoint (host): text, API Key (api-key): text) | Azure AI Search (AZUREAISEARCH):  Name (name): text, Azure AI Search Service Name (service-name): text, API Key (api-key): text) | Built-in (VECTORIZE):  ) | Chroma (CHROMA):  Name (name): text, API Key (apiKey): text) | MongoDB (MONGODB):  Name (name): text, API Key (apiKey): text)
     */
    async createDestinationConnectorRaw(requestParameters: CreateDestinationConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateDestinationConnectorResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling createDestinationConnector().'
            );
        }

        if (requestParameters['createDestinationConnector'] == null) {
            throw new runtime.RequiredError(
                'createDestinationConnector',
                'Required parameter "createDestinationConnector" was null or undefined when calling createDestinationConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/destinations`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createDestinationConnector']!.map(CreateDestinationConnectorToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateDestinationConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Create a new destination connector. Config values: Couchbase Capella (CAPELLA):  Name (name): text, Cluster Access Name (username): text, Cluster Access Password (password): text, Connection String (connection-string): text) | DataStax Astra (DATASTAX):  Name (name): text, API Endpoint (endpoint_secret): text, Application Token (token): text) | Elasticsearch (ELASTIC):  Name (name): text, Host (host): text, Port (port): text, API Key (api-key): text) | Pinecone (PINECONE):  Name (name): text, API Key (api-key): text) | SingleStore (SINGLESTORE):  Name (name): text, Host (host): text, Port (port): number, Database (database): text, Username (username): text, Password (password): text) | Milvus (MILVUS):  Name (name): text, Public Endpoint (url): text, Token (token): text, Username (username): text, Password (password): text) | PostgreSQL (POSTGRESQL):  Name (name): text, Host (host): text, Port (port): number, Database (database): text, Username (username): text, Password (password): text) | Qdrant (QDRANT):  Name (name): text, Host (host): text, API Key (api-key): text) | Weaviate (WEAVIATE):  Name (name): text, Endpoint (host): text, API Key (api-key): text) | Azure AI Search (AZUREAISEARCH):  Name (name): text, Azure AI Search Service Name (service-name): text, API Key (api-key): text) | Built-in (VECTORIZE):  ) | Chroma (CHROMA):  Name (name): text, API Key (apiKey): text) | MongoDB (MONGODB):  Name (name): text, API Key (apiKey): text)
     */
    async createDestinationConnector(requestParameters: CreateDestinationConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateDestinationConnectorResponse> {
        const response = await this.createDestinationConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new source connector. Config values: Amazon S3 (AWS_S3):  Name (name): text, Access Key (access-key): text, Secret Key (secret-key): text, Bucket Name (bucket-name): text, Endpoint (endpoint): url, Region (region): text, Allow as archive destination (archiver): boolean) | Azure Blob Storage (AZURE_BLOB):  Name (name): text, Storage Account Name (storage-account-name): text, Storage Account Key (storage-account-key): text, Container (container): text, Endpoint (endpoint): url) | Confluence (CONFLUENCE):  Name (name): text, Username (username): text, API Token (api-token): text, Domain (domain): text) | Discord (DISCORD):  Name (name): text, Server ID (guild-id): text, Bot token (bot-token): text, Channel ID (channel-ids): array oftext) | Dropbox (DROPBOX):  Name (name): text) | Google Drive OAuth (GOOGLE_DRIVE_OAUTH):  Name (name): text) | Google Drive OAuth (Multi-user) (GOOGLE_DRIVE_OAUTH_MULTI):  Name (name): text) | Google Drive OAuth (Multi-user with white label) (GOOGLE_DRIVE_OAUTH_MULTI_CUSTOM):  Name (name): text, OAuth2 Client Id (oauth2-client-id): text, OAuth2 Client Secret (oauth2-client-secret): text) | Firecrawl (FIRECRAWL):  Name (name): text, API Key (api-key): text) | GCP Cloud Storage (GCS):  Name (name): text, Service Account JSON (service-account-json): textarea, Bucket (bucket-name): text) | Google Drive (GOOGLE_DRIVE):  Name (name): text, Service Account JSON (service-account-json): textarea) | Intercom (INTERCOM):  Name (name): text, Access Token (intercomAccessToken): text) | OneDrive (ONE_DRIVE):  Name (name): text, Client Id (ms-client-id): text, Tenant Id (ms-tenant-id): text, Client Secret (ms-client-secret): text, Users (users): array oftext) | SharePoint (SHAREPOINT):  Name (name): text, Client Id (ms-client-id): text, Tenant Id (ms-tenant-id): text, Client Secret (ms-client-secret): text) | Web Crawler (WEB_CRAWLER):  Name (name): text, Seed URL(s) (seed-urls): array ofurl) | File Upload (FILE_UPLOAD):  Name (name): text)
     */
    async createSourceConnectorRaw(requestParameters: CreateSourceConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSourceConnectorResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling createSourceConnector().'
            );
        }

        if (requestParameters['createSourceConnector'] == null) {
            throw new runtime.RequiredError(
                'createSourceConnector',
                'Required parameter "createSourceConnector" was null or undefined when calling createSourceConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/sources`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createSourceConnector']!.map(CreateSourceConnectorToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSourceConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Create a new source connector. Config values: Amazon S3 (AWS_S3):  Name (name): text, Access Key (access-key): text, Secret Key (secret-key): text, Bucket Name (bucket-name): text, Endpoint (endpoint): url, Region (region): text, Allow as archive destination (archiver): boolean) | Azure Blob Storage (AZURE_BLOB):  Name (name): text, Storage Account Name (storage-account-name): text, Storage Account Key (storage-account-key): text, Container (container): text, Endpoint (endpoint): url) | Confluence (CONFLUENCE):  Name (name): text, Username (username): text, API Token (api-token): text, Domain (domain): text) | Discord (DISCORD):  Name (name): text, Server ID (guild-id): text, Bot token (bot-token): text, Channel ID (channel-ids): array oftext) | Dropbox (DROPBOX):  Name (name): text) | Google Drive OAuth (GOOGLE_DRIVE_OAUTH):  Name (name): text) | Google Drive OAuth (Multi-user) (GOOGLE_DRIVE_OAUTH_MULTI):  Name (name): text) | Google Drive OAuth (Multi-user with white label) (GOOGLE_DRIVE_OAUTH_MULTI_CUSTOM):  Name (name): text, OAuth2 Client Id (oauth2-client-id): text, OAuth2 Client Secret (oauth2-client-secret): text) | Firecrawl (FIRECRAWL):  Name (name): text, API Key (api-key): text) | GCP Cloud Storage (GCS):  Name (name): text, Service Account JSON (service-account-json): textarea, Bucket (bucket-name): text) | Google Drive (GOOGLE_DRIVE):  Name (name): text, Service Account JSON (service-account-json): textarea) | Intercom (INTERCOM):  Name (name): text, Access Token (intercomAccessToken): text) | OneDrive (ONE_DRIVE):  Name (name): text, Client Id (ms-client-id): text, Tenant Id (ms-tenant-id): text, Client Secret (ms-client-secret): text, Users (users): array oftext) | SharePoint (SHAREPOINT):  Name (name): text, Client Id (ms-client-id): text, Tenant Id (ms-tenant-id): text, Client Secret (ms-client-secret): text) | Web Crawler (WEB_CRAWLER):  Name (name): text, Seed URL(s) (seed-urls): array ofurl) | File Upload (FILE_UPLOAD):  Name (name): text)
     */
    async createSourceConnector(requestParameters: CreateSourceConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSourceConnectorResponse> {
        const response = await this.createSourceConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an AI platform connector
     */
    async deleteAIPlatformRaw(requestParameters: DeleteAIPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteAIPlatformConnectorResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling deleteAIPlatform().'
            );
        }

        if (requestParameters['aiplatformId'] == null) {
            throw new runtime.RequiredError(
                'aiplatformId',
                'Required parameter "aiplatformId" was null or undefined when calling deleteAIPlatform().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/aiplatforms/{aiplatformId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"aiplatformId"}}`, encodeURIComponent(String(requestParameters['aiplatformId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteAIPlatformConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Delete an AI platform connector
     */
    async deleteAIPlatform(requestParameters: DeleteAIPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteAIPlatformConnectorResponse> {
        const response = await this.deleteAIPlatformRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a destination connector
     */
    async deleteDestinationConnectorRaw(requestParameters: DeleteDestinationConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteDestinationConnectorResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling deleteDestinationConnector().'
            );
        }

        if (requestParameters['destinationConnectorId'] == null) {
            throw new runtime.RequiredError(
                'destinationConnectorId',
                'Required parameter "destinationConnectorId" was null or undefined when calling deleteDestinationConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/destinations/{destinationConnectorId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"destinationConnectorId"}}`, encodeURIComponent(String(requestParameters['destinationConnectorId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteDestinationConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Delete a destination connector
     */
    async deleteDestinationConnector(requestParameters: DeleteDestinationConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteDestinationConnectorResponse> {
        const response = await this.deleteDestinationConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a source connector
     */
    async deleteSourceConnectorRaw(requestParameters: DeleteSourceConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteSourceConnectorResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling deleteSourceConnector().'
            );
        }

        if (requestParameters['sourceConnectorId'] == null) {
            throw new runtime.RequiredError(
                'sourceConnectorId',
                'Required parameter "sourceConnectorId" was null or undefined when calling deleteSourceConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/sources/{sourceConnectorId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"sourceConnectorId"}}`, encodeURIComponent(String(requestParameters['sourceConnectorId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteSourceConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Delete a source connector
     */
    async deleteSourceConnector(requestParameters: DeleteSourceConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteSourceConnectorResponse> {
        const response = await this.deleteSourceConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a source connector user
     */
    async deleteUserFromSourceConnectorRaw(requestParameters: DeleteUserFromSourceConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoveUserFromSourceConnectorResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling deleteUserFromSourceConnector().'
            );
        }

        if (requestParameters['sourceConnectorId'] == null) {
            throw new runtime.RequiredError(
                'sourceConnectorId',
                'Required parameter "sourceConnectorId" was null or undefined when calling deleteUserFromSourceConnector().'
            );
        }

        if (requestParameters['removeUserFromSourceConnectorRequest'] == null) {
            throw new runtime.RequiredError(
                'removeUserFromSourceConnectorRequest',
                'Required parameter "removeUserFromSourceConnectorRequest" was null or undefined when calling deleteUserFromSourceConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/sources/{sourceConnectorId}/users`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"sourceConnectorId"}}`, encodeURIComponent(String(requestParameters['sourceConnectorId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveUserFromSourceConnectorRequestToJSON(requestParameters['removeUserFromSourceConnectorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemoveUserFromSourceConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Delete a source connector user
     */
    async deleteUserFromSourceConnector(requestParameters: DeleteUserFromSourceConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoveUserFromSourceConnectorResponse> {
        const response = await this.deleteUserFromSourceConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an AI platform connector
     */
    async getAIPlatformConnectorRaw(requestParameters: GetAIPlatformConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AIPlatform>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getAIPlatformConnector().'
            );
        }

        if (requestParameters['aiplatformId'] == null) {
            throw new runtime.RequiredError(
                'aiplatformId',
                'Required parameter "aiplatformId" was null or undefined when calling getAIPlatformConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/aiplatforms/{aiplatformId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"aiplatformId"}}`, encodeURIComponent(String(requestParameters['aiplatformId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AIPlatformFromJSON(jsonValue));
    }

    /**
     * Get an AI platform connector
     */
    async getAIPlatformConnector(requestParameters: GetAIPlatformConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AIPlatform> {
        const response = await this.getAIPlatformConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all existing AI Platform connectors
     */
    async getAIPlatformConnectorsRaw(requestParameters: GetAIPlatformConnectorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAIPlatformConnectors200Response>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getAIPlatformConnectors().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/aiplatforms`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAIPlatformConnectors200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all existing AI Platform connectors
     */
    async getAIPlatformConnectors(requestParameters: GetAIPlatformConnectorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAIPlatformConnectors200Response> {
        const response = await this.getAIPlatformConnectorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a destination connector
     */
    async getDestinationConnectorRaw(requestParameters: GetDestinationConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestinationConnector>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getDestinationConnector().'
            );
        }

        if (requestParameters['destinationConnectorId'] == null) {
            throw new runtime.RequiredError(
                'destinationConnectorId',
                'Required parameter "destinationConnectorId" was null or undefined when calling getDestinationConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/destinations/{destinationConnectorId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"destinationConnectorId"}}`, encodeURIComponent(String(requestParameters['destinationConnectorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationConnectorFromJSON(jsonValue));
    }

    /**
     * Get a destination connector
     */
    async getDestinationConnector(requestParameters: GetDestinationConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestinationConnector> {
        const response = await this.getDestinationConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all existing destination connectors
     */
    async getDestinationConnectorsRaw(requestParameters: GetDestinationConnectorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDestinationConnectors200Response>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getDestinationConnectors().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/destinations`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDestinationConnectors200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all existing destination connectors
     */
    async getDestinationConnectors(requestParameters: GetDestinationConnectorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDestinationConnectors200Response> {
        const response = await this.getDestinationConnectorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a source connector
     */
    async getSourceConnectorRaw(requestParameters: GetSourceConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SourceConnector>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getSourceConnector().'
            );
        }

        if (requestParameters['sourceConnectorId'] == null) {
            throw new runtime.RequiredError(
                'sourceConnectorId',
                'Required parameter "sourceConnectorId" was null or undefined when calling getSourceConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/sources/{sourceConnectorId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"sourceConnectorId"}}`, encodeURIComponent(String(requestParameters['sourceConnectorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceConnectorFromJSON(jsonValue));
    }

    /**
     * Get a source connector
     */
    async getSourceConnector(requestParameters: GetSourceConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SourceConnector> {
        const response = await this.getSourceConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all existing source connectors
     */
    async getSourceConnectorsRaw(requestParameters: GetSourceConnectorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSourceConnectors200Response>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getSourceConnectors().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/sources`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSourceConnectors200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all existing source connectors
     */
    async getSourceConnectors(requestParameters: GetSourceConnectorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSourceConnectors200Response> {
        const response = await this.getSourceConnectorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an AI Platform connector
     */
    async updateAIPlatformConnectorRaw(requestParameters: UpdateAIPlatformConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateAIPlatformConnectorResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling updateAIPlatformConnector().'
            );
        }

        if (requestParameters['aiplatformId'] == null) {
            throw new runtime.RequiredError(
                'aiplatformId',
                'Required parameter "aiplatformId" was null or undefined when calling updateAIPlatformConnector().'
            );
        }

        if (requestParameters['updateAIPlatformConnectorRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAIPlatformConnectorRequest',
                'Required parameter "updateAIPlatformConnectorRequest" was null or undefined when calling updateAIPlatformConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/aiplatforms/{aiplatformId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"aiplatformId"}}`, encodeURIComponent(String(requestParameters['aiplatformId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAIPlatformConnectorRequestToJSON(requestParameters['updateAIPlatformConnectorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateAIPlatformConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Update an AI Platform connector
     */
    async updateAIPlatformConnector(requestParameters: UpdateAIPlatformConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateAIPlatformConnectorResponse> {
        const response = await this.updateAIPlatformConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a destination connector
     */
    async updateDestinationConnectorRaw(requestParameters: UpdateDestinationConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateDestinationConnectorResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling updateDestinationConnector().'
            );
        }

        if (requestParameters['destinationConnectorId'] == null) {
            throw new runtime.RequiredError(
                'destinationConnectorId',
                'Required parameter "destinationConnectorId" was null or undefined when calling updateDestinationConnector().'
            );
        }

        if (requestParameters['updateDestinationConnectorRequest'] == null) {
            throw new runtime.RequiredError(
                'updateDestinationConnectorRequest',
                'Required parameter "updateDestinationConnectorRequest" was null or undefined when calling updateDestinationConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/destinations/{destinationConnectorId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"destinationConnectorId"}}`, encodeURIComponent(String(requestParameters['destinationConnectorId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDestinationConnectorRequestToJSON(requestParameters['updateDestinationConnectorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateDestinationConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Update a destination connector
     */
    async updateDestinationConnector(requestParameters: UpdateDestinationConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateDestinationConnectorResponse> {
        const response = await this.updateDestinationConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a source connector
     */
    async updateSourceConnectorRaw(requestParameters: UpdateSourceConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateSourceConnectorResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling updateSourceConnector().'
            );
        }

        if (requestParameters['sourceConnectorId'] == null) {
            throw new runtime.RequiredError(
                'sourceConnectorId',
                'Required parameter "sourceConnectorId" was null or undefined when calling updateSourceConnector().'
            );
        }

        if (requestParameters['updateSourceConnectorRequest'] == null) {
            throw new runtime.RequiredError(
                'updateSourceConnectorRequest',
                'Required parameter "updateSourceConnectorRequest" was null or undefined when calling updateSourceConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/sources/{sourceConnectorId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"sourceConnectorId"}}`, encodeURIComponent(String(requestParameters['sourceConnectorId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSourceConnectorRequestToJSON(requestParameters['updateSourceConnectorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateSourceConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Update a source connector
     */
    async updateSourceConnector(requestParameters: UpdateSourceConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateSourceConnectorResponse> {
        const response = await this.updateSourceConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a source connector user
     */
    async updateUserInSourceConnectorRaw(requestParameters: UpdateUserInSourceConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserInSourceConnectorResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling updateUserInSourceConnector().'
            );
        }

        if (requestParameters['sourceConnectorId'] == null) {
            throw new runtime.RequiredError(
                'sourceConnectorId',
                'Required parameter "sourceConnectorId" was null or undefined when calling updateUserInSourceConnector().'
            );
        }

        if (requestParameters['updateUserInSourceConnectorRequest'] == null) {
            throw new runtime.RequiredError(
                'updateUserInSourceConnectorRequest',
                'Required parameter "updateUserInSourceConnectorRequest" was null or undefined when calling updateUserInSourceConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/connectors/sources/{sourceConnectorId}/users`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"sourceConnectorId"}}`, encodeURIComponent(String(requestParameters['sourceConnectorId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserInSourceConnectorRequestToJSON(requestParameters['updateUserInSourceConnectorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserInSourceConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Update a source connector user
     */
    async updateUserInSourceConnector(requestParameters: UpdateUserInSourceConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserInSourceConnectorResponse> {
        const response = await this.updateUserInSourceConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
