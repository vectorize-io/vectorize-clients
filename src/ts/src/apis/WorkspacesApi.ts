/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetWorkspaceByIdResponse,
  GetWorkspaces400Response,
  GetWorkspacesResponse,
} from '../models/index';
import {
    GetWorkspaceByIdResponseFromJSON,
    GetWorkspaceByIdResponseToJSON,
    GetWorkspaces400ResponseFromJSON,
    GetWorkspaces400ResponseToJSON,
    GetWorkspacesResponseFromJSON,
    GetWorkspacesResponseToJSON,
} from '../models/index';

export interface GetWorkspaceByIdRequest {
    organizationId: string;
    workspaceId: string;
}

export interface GetWorkspacesRequest {
    organizationId: string;
    limit?: number;
    nextToken?: string;
}

/**
 * 
 */
export class WorkspacesApi extends runtime.BaseAPI {

    /**
     * Returns details of a specific workspace within the organization
     * Get a specific workspace by ID
     */
    async getWorkspaceByIdRaw(requestParameters: GetWorkspaceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspaceByIdResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling getWorkspaceById().'
            );
        }

        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling getWorkspaceById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organizationId}/workspaces/{workspaceId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkspaceByIdResponseFromJSON(jsonValue));
    }

    /**
     * Returns details of a specific workspace within the organization
     * Get a specific workspace by ID
     */
    async getWorkspaceById(requestParameters: GetWorkspaceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspaceByIdResponse> {
        const response = await this.getWorkspaceByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all workspaces that belong to the specified organization with pagination support
     * Get all workspaces in an organization
     */
    async getWorkspacesRaw(requestParameters: GetWorkspacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspacesResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling getWorkspaces().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['nextToken'] != null) {
            queryParameters['nextToken'] = requestParameters['nextToken'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organizationId}/workspaces`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkspacesResponseFromJSON(jsonValue));
    }

    /**
     * Returns all workspaces that belong to the specified organization with pagination support
     * Get all workspaces in an organization
     */
    async getWorkspaces(requestParameters: GetWorkspacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspacesResponse> {
        const response = await this.getWorkspacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
