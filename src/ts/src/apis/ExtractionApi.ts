/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API (Beta)
 * API documentation for Vectorize services
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExtractionResultResponse,
  GetPipelines400Response,
  StartExtractionResponse,
} from '../models/index';
import {
    ExtractionResultResponseFromJSON,
    ExtractionResultResponseToJSON,
    GetPipelines400ResponseFromJSON,
    GetPipelines400ResponseToJSON,
    StartExtractionResponseFromJSON,
    StartExtractionResponseToJSON,
} from '../models/index';

export interface GetExtractionResultRequest {
    organization: string;
    extractionId: string;
}

export interface StartExtractionRequest {
    organization: string;
    file: Blob;
    type?: StartExtractionTypeEnum;
    chunkingStrategy?: StartExtractionChunkingStrategyEnum;
    chunkSize?: number;
    chunkOverlap?: number;
}

/**
 * 
 */
export class ExtractionApi extends runtime.BaseAPI {

    /**
     * Get extraction result
     */
    async getExtractionResultRaw(requestParameters: GetExtractionResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtractionResultResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getExtractionResult().'
            );
        }

        if (requestParameters['extractionId'] == null) {
            throw new runtime.RequiredError(
                'extractionId',
                'Required parameter "extractionId" was null or undefined when calling getExtractionResult().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/extraction/{extractionId}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"extractionId"}}`, encodeURIComponent(String(requestParameters['extractionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtractionResultResponseFromJSON(jsonValue));
    }

    /**
     * Get extraction result
     */
    async getExtractionResult(requestParameters: GetExtractionResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtractionResultResponse> {
        const response = await this.getExtractionResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start content extraction from a file
     */
    async startExtractionRaw(requestParameters: StartExtractionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StartExtractionResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling startExtraction().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling startExtraction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['type'] != null) {
            formParams.append('type', requestParameters['type'] as any);
        }

        if (requestParameters['chunkingStrategy'] != null) {
            formParams.append('chunkingStrategy', requestParameters['chunkingStrategy'] as any);
        }

        if (requestParameters['chunkSize'] != null) {
            formParams.append('chunkSize', requestParameters['chunkSize'] as any);
        }

        if (requestParameters['chunkOverlap'] != null) {
            formParams.append('chunkOverlap', requestParameters['chunkOverlap'] as any);
        }

        const response = await this.request({
            path: `/org/{organization}/extraction`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StartExtractionResponseFromJSON(jsonValue));
    }

    /**
     * Start content extraction from a file
     */
    async startExtraction(requestParameters: StartExtractionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StartExtractionResponse> {
        const response = await this.startExtractionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const StartExtractionTypeEnum = {
    Iris: 'iris'
} as const;
export type StartExtractionTypeEnum = typeof StartExtractionTypeEnum[keyof typeof StartExtractionTypeEnum];
/**
 * @export
 */
export const StartExtractionChunkingStrategyEnum = {
    Markdown: 'markdown'
} as const;
export type StartExtractionChunkingStrategyEnum = typeof StartExtractionChunkingStrategyEnum[keyof typeof StartExtractionChunkingStrategyEnum];
