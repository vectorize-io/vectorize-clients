/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddUserFromSourceConnectorResponse,
  AddUserToSourceConnectorRequest,
  CreateSourceConnectorRequest,
  CreateSourceConnectorResponse,
  DeleteSourceConnectorResponse,
  GetSourceConnectors200Response,
  GetWorkspaces400Response,
  RemoveUserFromSourceConnectorRequest,
  RemoveUserFromSourceConnectorResponse,
  SourceConnector,
  UpdateSourceConnectorRequest,
  UpdateSourceConnectorResponse,
  UpdateUserInSourceConnectorRequest,
  UpdateUserInSourceConnectorResponse,
} from '../models/index';
import {
    AddUserFromSourceConnectorResponseFromJSON,
    AddUserFromSourceConnectorResponseToJSON,
    AddUserToSourceConnectorRequestFromJSON,
    AddUserToSourceConnectorRequestToJSON,
    CreateSourceConnectorRequestFromJSON,
    CreateSourceConnectorRequestToJSON,
    CreateSourceConnectorResponseFromJSON,
    CreateSourceConnectorResponseToJSON,
    DeleteSourceConnectorResponseFromJSON,
    DeleteSourceConnectorResponseToJSON,
    GetSourceConnectors200ResponseFromJSON,
    GetSourceConnectors200ResponseToJSON,
    GetWorkspaces400ResponseFromJSON,
    GetWorkspaces400ResponseToJSON,
    RemoveUserFromSourceConnectorRequestFromJSON,
    RemoveUserFromSourceConnectorRequestToJSON,
    RemoveUserFromSourceConnectorResponseFromJSON,
    RemoveUserFromSourceConnectorResponseToJSON,
    SourceConnectorFromJSON,
    SourceConnectorToJSON,
    UpdateSourceConnectorRequestFromJSON,
    UpdateSourceConnectorRequestToJSON,
    UpdateSourceConnectorResponseFromJSON,
    UpdateSourceConnectorResponseToJSON,
    UpdateUserInSourceConnectorRequestFromJSON,
    UpdateUserInSourceConnectorRequestToJSON,
    UpdateUserInSourceConnectorResponseFromJSON,
    UpdateUserInSourceConnectorResponseToJSON,
} from '../models/index';

export interface AddUserToSourceConnectorOperationRequest {
    organizationId: string;
    sourceConnectorId: string;
    addUserToSourceConnectorRequest: AddUserToSourceConnectorRequest;
}

export interface CreateSourceConnectorOperationRequest {
    organizationId: string;
    createSourceConnectorRequest: CreateSourceConnectorRequest;
    workspaceId?: string;
}

export interface DeleteSourceConnectorRequest {
    organizationId: string;
    sourceConnectorId: string;
}

export interface DeleteUserFromSourceConnectorRequest {
    organizationId: string;
    sourceConnectorId: string;
    removeUserFromSourceConnectorRequest: RemoveUserFromSourceConnectorRequest;
}

export interface GetSourceConnectorRequest {
    organizationId: string;
    sourceConnectorId: string;
}

export interface GetSourceConnectorsRequest {
    organizationId: string;
    workspaceId?: string;
    limit?: string;
    nextToken?: string;
}

export interface UpdateSourceConnectorOperationRequest {
    organizationId: string;
    sourceConnectorId: string;
    updateSourceConnectorRequest: UpdateSourceConnectorRequest;
}

export interface UpdateUserInSourceConnectorOperationRequest {
    organizationId: string;
    sourceConnectorId: string;
    updateUserInSourceConnectorRequest: UpdateUserInSourceConnectorRequest;
}

/**
 * 
 */
export class SourceConnectorsApi extends runtime.BaseAPI {

    /**
     * **⚠️ SDK Recommended**: We strongly recommend using the Vectorize Connect SDK which handles OAuth flows and token management for you.  This endpoint adds a user to a multi-user OAuth connector (types ending with \'_OAUTH_MULTI\' or \'_OAUTH_MULTI_CUSTOM\').  **Direct API usage is only recommended if:** - Your programming language doesn\'t have SDK support (e.g., PHP, Ruby) - You have existing OAuth infrastructure - You need custom OAuth flow control  **Requirements:** - Valid OAuth tokens from the provider\'s OAuth flow - For Dropbox/Google Drive: Refresh token from OAuth callback - For Notion: Access token from OAuth callback - The selectedFiles object from the OAuth callback response  **Note:** The userId should be YOUR application\'s user identifier, not the provider\'s user ID.
     * Add a user to a multi-user OAuth source connector
     */
    async addUserToSourceConnectorRaw(requestParameters: AddUserToSourceConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddUserFromSourceConnectorResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling addUserToSourceConnector().'
            );
        }

        if (requestParameters['sourceConnectorId'] == null) {
            throw new runtime.RequiredError(
                'sourceConnectorId',
                'Required parameter "sourceConnectorId" was null or undefined when calling addUserToSourceConnector().'
            );
        }

        if (requestParameters['addUserToSourceConnectorRequest'] == null) {
            throw new runtime.RequiredError(
                'addUserToSourceConnectorRequest',
                'Required parameter "addUserToSourceConnectorRequest" was null or undefined when calling addUserToSourceConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organizationId}/connectors/sources/{sourceConnectorId}/users`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"sourceConnectorId"}}`, encodeURIComponent(String(requestParameters['sourceConnectorId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddUserToSourceConnectorRequestToJSON(requestParameters['addUserToSourceConnectorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddUserFromSourceConnectorResponseFromJSON(jsonValue));
    }

    /**
     * **⚠️ SDK Recommended**: We strongly recommend using the Vectorize Connect SDK which handles OAuth flows and token management for you.  This endpoint adds a user to a multi-user OAuth connector (types ending with \'_OAUTH_MULTI\' or \'_OAUTH_MULTI_CUSTOM\').  **Direct API usage is only recommended if:** - Your programming language doesn\'t have SDK support (e.g., PHP, Ruby) - You have existing OAuth infrastructure - You need custom OAuth flow control  **Requirements:** - Valid OAuth tokens from the provider\'s OAuth flow - For Dropbox/Google Drive: Refresh token from OAuth callback - For Notion: Access token from OAuth callback - The selectedFiles object from the OAuth callback response  **Note:** The userId should be YOUR application\'s user identifier, not the provider\'s user ID.
     * Add a user to a multi-user OAuth source connector
     */
    async addUserToSourceConnector(requestParameters: AddUserToSourceConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddUserFromSourceConnectorResponse> {
        const response = await this.addUserToSourceConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new source connector for data ingestion. The specific configuration fields required depend on the connector type selected.
     * Create a new source connector
     */
    async createSourceConnectorRaw(requestParameters: CreateSourceConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSourceConnectorResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling createSourceConnector().'
            );
        }

        if (requestParameters['createSourceConnectorRequest'] == null) {
            throw new runtime.RequiredError(
                'createSourceConnectorRequest',
                'Required parameter "createSourceConnectorRequest" was null or undefined when calling createSourceConnector().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['workspaceId'] != null) {
            queryParameters['workspaceId'] = requestParameters['workspaceId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organizationId}/connectors/sources`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSourceConnectorRequestToJSON(requestParameters['createSourceConnectorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSourceConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new source connector for data ingestion. The specific configuration fields required depend on the connector type selected.
     * Create a new source connector
     */
    async createSourceConnector(requestParameters: CreateSourceConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSourceConnectorResponse> {
        const response = await this.createSourceConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a source connector
     * Delete a source connector
     */
    async deleteSourceConnectorRaw(requestParameters: DeleteSourceConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteSourceConnectorResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling deleteSourceConnector().'
            );
        }

        if (requestParameters['sourceConnectorId'] == null) {
            throw new runtime.RequiredError(
                'sourceConnectorId',
                'Required parameter "sourceConnectorId" was null or undefined when calling deleteSourceConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organizationId}/connectors/sources/{sourceConnectorId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"sourceConnectorId"}}`, encodeURIComponent(String(requestParameters['sourceConnectorId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteSourceConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Delete a source connector
     * Delete a source connector
     */
    async deleteSourceConnector(requestParameters: DeleteSourceConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteSourceConnectorResponse> {
        const response = await this.deleteSourceConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a user from a multi-user OAuth connector (types ending with \'_OAUTH_MULTI\' or \'_OAUTH_MULTI_CUSTOM\').  This endpoint is simpler than add/update as it doesn\'t require OAuth tokens - only the userId that was used when adding the user.  **Note:** While the Vectorize Connect SDK is recommended for consistency, this endpoint can be easily used directly since it doesn\'t require OAuth token management.
     * Remove a user from a multi-user OAuth source connector
     */
    async deleteUserFromSourceConnectorRaw(requestParameters: DeleteUserFromSourceConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemoveUserFromSourceConnectorResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling deleteUserFromSourceConnector().'
            );
        }

        if (requestParameters['sourceConnectorId'] == null) {
            throw new runtime.RequiredError(
                'sourceConnectorId',
                'Required parameter "sourceConnectorId" was null or undefined when calling deleteUserFromSourceConnector().'
            );
        }

        if (requestParameters['removeUserFromSourceConnectorRequest'] == null) {
            throw new runtime.RequiredError(
                'removeUserFromSourceConnectorRequest',
                'Required parameter "removeUserFromSourceConnectorRequest" was null or undefined when calling deleteUserFromSourceConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organizationId}/connectors/sources/{sourceConnectorId}/users`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"sourceConnectorId"}}`, encodeURIComponent(String(requestParameters['sourceConnectorId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveUserFromSourceConnectorRequestToJSON(requestParameters['removeUserFromSourceConnectorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemoveUserFromSourceConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Remove a user from a multi-user OAuth connector (types ending with \'_OAUTH_MULTI\' or \'_OAUTH_MULTI_CUSTOM\').  This endpoint is simpler than add/update as it doesn\'t require OAuth tokens - only the userId that was used when adding the user.  **Note:** While the Vectorize Connect SDK is recommended for consistency, this endpoint can be easily used directly since it doesn\'t require OAuth token management.
     * Remove a user from a multi-user OAuth source connector
     */
    async deleteUserFromSourceConnector(requestParameters: DeleteUserFromSourceConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemoveUserFromSourceConnectorResponse> {
        const response = await this.deleteUserFromSourceConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a source connector
     * Get a source connector
     */
    async getSourceConnectorRaw(requestParameters: GetSourceConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SourceConnector>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling getSourceConnector().'
            );
        }

        if (requestParameters['sourceConnectorId'] == null) {
            throw new runtime.RequiredError(
                'sourceConnectorId',
                'Required parameter "sourceConnectorId" was null or undefined when calling getSourceConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organizationId}/connectors/sources/{sourceConnectorId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"sourceConnectorId"}}`, encodeURIComponent(String(requestParameters['sourceConnectorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceConnectorFromJSON(jsonValue));
    }

    /**
     * Get a source connector
     * Get a source connector
     */
    async getSourceConnector(requestParameters: GetSourceConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SourceConnector> {
        const response = await this.getSourceConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all existing source connectors with pagination support
     * Get all existing source connectors
     */
    async getSourceConnectorsRaw(requestParameters: GetSourceConnectorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSourceConnectors200Response>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling getSourceConnectors().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['workspaceId'] != null) {
            queryParameters['workspaceId'] = requestParameters['workspaceId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['nextToken'] != null) {
            queryParameters['nextToken'] = requestParameters['nextToken'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organizationId}/connectors/sources`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSourceConnectors200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all existing source connectors with pagination support
     * Get all existing source connectors
     */
    async getSourceConnectors(requestParameters: GetSourceConnectorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSourceConnectors200Response> {
        const response = await this.getSourceConnectorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a source connector
     * Update a source connector
     */
    async updateSourceConnectorRaw(requestParameters: UpdateSourceConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateSourceConnectorResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling updateSourceConnector().'
            );
        }

        if (requestParameters['sourceConnectorId'] == null) {
            throw new runtime.RequiredError(
                'sourceConnectorId',
                'Required parameter "sourceConnectorId" was null or undefined when calling updateSourceConnector().'
            );
        }

        if (requestParameters['updateSourceConnectorRequest'] == null) {
            throw new runtime.RequiredError(
                'updateSourceConnectorRequest',
                'Required parameter "updateSourceConnectorRequest" was null or undefined when calling updateSourceConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organizationId}/connectors/sources/{sourceConnectorId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"sourceConnectorId"}}`, encodeURIComponent(String(requestParameters['sourceConnectorId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSourceConnectorRequestToJSON(requestParameters['updateSourceConnectorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateSourceConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Update a source connector
     * Update a source connector
     */
    async updateSourceConnector(requestParameters: UpdateSourceConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateSourceConnectorResponse> {
        const response = await this.updateSourceConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * **⚠️ SDK Recommended**: We strongly recommend using the Vectorize Connect SDK which handles OAuth flows and token management for you.  This endpoint updates a user\'s configuration in a multi-user OAuth connector (types ending with \'_OAUTH_MULTI\' or \'_OAUTH_MULTI_CUSTOM\').  **Direct API usage is only recommended if:** - Your programming language doesn\'t have SDK support (e.g., PHP, Ruby) - You have existing OAuth infrastructure - You need custom OAuth flow control  **Requirements when updating tokens/files:** - Valid OAuth tokens from a fresh OAuth flow - For Dropbox/Google Drive: New refresh token - For Notion: New access token - Updated selectedFiles from the new OAuth callback  **Note:** The userId should match the one used when adding the user.
     * Update a user in a multi-user OAuth source connector
     */
    async updateUserInSourceConnectorRaw(requestParameters: UpdateUserInSourceConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserInSourceConnectorResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling updateUserInSourceConnector().'
            );
        }

        if (requestParameters['sourceConnectorId'] == null) {
            throw new runtime.RequiredError(
                'sourceConnectorId',
                'Required parameter "sourceConnectorId" was null or undefined when calling updateUserInSourceConnector().'
            );
        }

        if (requestParameters['updateUserInSourceConnectorRequest'] == null) {
            throw new runtime.RequiredError(
                'updateUserInSourceConnectorRequest',
                'Required parameter "updateUserInSourceConnectorRequest" was null or undefined when calling updateUserInSourceConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organizationId}/connectors/sources/{sourceConnectorId}/users`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"sourceConnectorId"}}`, encodeURIComponent(String(requestParameters['sourceConnectorId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserInSourceConnectorRequestToJSON(requestParameters['updateUserInSourceConnectorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserInSourceConnectorResponseFromJSON(jsonValue));
    }

    /**
     * **⚠️ SDK Recommended**: We strongly recommend using the Vectorize Connect SDK which handles OAuth flows and token management for you.  This endpoint updates a user\'s configuration in a multi-user OAuth connector (types ending with \'_OAUTH_MULTI\' or \'_OAUTH_MULTI_CUSTOM\').  **Direct API usage is only recommended if:** - Your programming language doesn\'t have SDK support (e.g., PHP, Ruby) - You have existing OAuth infrastructure - You need custom OAuth flow control  **Requirements when updating tokens/files:** - Valid OAuth tokens from a fresh OAuth flow - For Dropbox/Google Drive: New refresh token - For Notion: New access token - Updated selectedFiles from the new OAuth callback  **Note:** The userId should match the one used when adding the user.
     * Update a user in a multi-user OAuth source connector
     */
    async updateUserInSourceConnector(requestParameters: UpdateUserInSourceConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserInSourceConnectorResponse> {
        const response = await this.updateUserInSourceConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
