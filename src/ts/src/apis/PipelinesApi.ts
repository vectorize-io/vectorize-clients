/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API (Beta)
 * API documentation for Vectorize services
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePipelineResponse,
  GetPipelinesResponse,
  PipelineConfigurationSchema,
  RequestError,
} from '../models/index';
import {
    CreatePipelineResponseFromJSON,
    CreatePipelineResponseToJSON,
    GetPipelinesResponseFromJSON,
    GetPipelinesResponseToJSON,
    PipelineConfigurationSchemaFromJSON,
    PipelineConfigurationSchemaToJSON,
    RequestErrorFromJSON,
    RequestErrorToJSON,
} from '../models/index';

export interface CreatePipelineRequest {
    organization: string;
    pipelineConfigurationSchema?: PipelineConfigurationSchema;
}

export interface GetPipelinesRequest {
    organization: string;
}

/**
 * 
 */
export class PipelinesApi extends runtime.BaseAPI {

    /**
     * Create a new pipeline
     */
    async createPipelineRaw(requestParameters: CreatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePipelineResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling createPipeline().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/pipelines`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PipelineConfigurationSchemaToJSON(requestParameters['pipelineConfigurationSchema']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePipelineResponseFromJSON(jsonValue));
    }

    /**
     * Create a new pipeline
     */
    async createPipeline(requestParameters: CreatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePipelineResponse> {
        const response = await this.createPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all existing pipelines
     */
    async getPipelinesRaw(requestParameters: GetPipelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPipelinesResponse>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelines().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organization}/pipelines`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPipelinesResponseFromJSON(jsonValue));
    }

    /**
     * Get all existing pipelines
     */
    async getPipelines(requestParameters: GetPipelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPipelinesResponse> {
        const response = await this.getPipelinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
