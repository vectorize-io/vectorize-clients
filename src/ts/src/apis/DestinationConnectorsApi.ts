/* tslint:disable */
/* eslint-disable */
/**
 * Vectorize API
 * API for Vectorize services (Beta)
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDestinationConnectorRequest,
  CreateDestinationConnectorResponse,
  DeleteDestinationConnectorResponse,
  DestinationConnector,
  GetDestinationConnectors200Response,
  GetPipelines400Response,
  UpdateDestinationConnectorRequest,
  UpdateDestinationConnectorResponse,
} from '../models/index';
import {
    CreateDestinationConnectorRequestFromJSON,
    CreateDestinationConnectorRequestToJSON,
    CreateDestinationConnectorResponseFromJSON,
    CreateDestinationConnectorResponseToJSON,
    DeleteDestinationConnectorResponseFromJSON,
    DeleteDestinationConnectorResponseToJSON,
    DestinationConnectorFromJSON,
    DestinationConnectorToJSON,
    GetDestinationConnectors200ResponseFromJSON,
    GetDestinationConnectors200ResponseToJSON,
    GetPipelines400ResponseFromJSON,
    GetPipelines400ResponseToJSON,
    UpdateDestinationConnectorRequestFromJSON,
    UpdateDestinationConnectorRequestToJSON,
    UpdateDestinationConnectorResponseFromJSON,
    UpdateDestinationConnectorResponseToJSON,
} from '../models/index';

export interface CreateDestinationConnectorOperationRequest {
    organizationId: string;
    createDestinationConnectorRequest: CreateDestinationConnectorRequest;
}

export interface DeleteDestinationConnectorRequest {
    organizationId: string;
    destinationConnectorId: string;
}

export interface GetDestinationConnectorRequest {
    organizationId: string;
    destinationConnectorId: string;
}

export interface GetDestinationConnectorsRequest {
    organizationId: string;
}

export interface UpdateDestinationConnectorOperationRequest {
    organizationId: string;
    destinationConnectorId: string;
    updateDestinationConnectorRequest: UpdateDestinationConnectorRequest;
}

/**
 * 
 */
export class DestinationConnectorsApi extends runtime.BaseAPI {

    /**
     * Creates a new destination connector for data storage. The specific configuration fields required depend on the connector type selected.
     * Create a new destination connector
     */
    async createDestinationConnectorRaw(requestParameters: CreateDestinationConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateDestinationConnectorResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling createDestinationConnector().'
            );
        }

        if (requestParameters['createDestinationConnectorRequest'] == null) {
            throw new runtime.RequiredError(
                'createDestinationConnectorRequest',
                'Required parameter "createDestinationConnectorRequest" was null or undefined when calling createDestinationConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organizationId}/connectors/destinations`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDestinationConnectorRequestToJSON(requestParameters['createDestinationConnectorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateDestinationConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new destination connector for data storage. The specific configuration fields required depend on the connector type selected.
     * Create a new destination connector
     */
    async createDestinationConnector(requestParameters: CreateDestinationConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateDestinationConnectorResponse> {
        const response = await this.createDestinationConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a destination connector
     * Delete a destination connector
     */
    async deleteDestinationConnectorRaw(requestParameters: DeleteDestinationConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteDestinationConnectorResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling deleteDestinationConnector().'
            );
        }

        if (requestParameters['destinationConnectorId'] == null) {
            throw new runtime.RequiredError(
                'destinationConnectorId',
                'Required parameter "destinationConnectorId" was null or undefined when calling deleteDestinationConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organizationId}/connectors/destinations/{destinationConnectorId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"destinationConnectorId"}}`, encodeURIComponent(String(requestParameters['destinationConnectorId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteDestinationConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Delete a destination connector
     * Delete a destination connector
     */
    async deleteDestinationConnector(requestParameters: DeleteDestinationConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteDestinationConnectorResponse> {
        const response = await this.deleteDestinationConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a destination connector
     * Get a destination connector
     */
    async getDestinationConnectorRaw(requestParameters: GetDestinationConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestinationConnector>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling getDestinationConnector().'
            );
        }

        if (requestParameters['destinationConnectorId'] == null) {
            throw new runtime.RequiredError(
                'destinationConnectorId',
                'Required parameter "destinationConnectorId" was null or undefined when calling getDestinationConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organizationId}/connectors/destinations/{destinationConnectorId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"destinationConnectorId"}}`, encodeURIComponent(String(requestParameters['destinationConnectorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationConnectorFromJSON(jsonValue));
    }

    /**
     * Get a destination connector
     * Get a destination connector
     */
    async getDestinationConnector(requestParameters: GetDestinationConnectorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestinationConnector> {
        const response = await this.getDestinationConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all existing destination connectors
     * Get all existing destination connectors
     */
    async getDestinationConnectorsRaw(requestParameters: GetDestinationConnectorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDestinationConnectors200Response>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling getDestinationConnectors().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organizationId}/connectors/destinations`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDestinationConnectors200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all existing destination connectors
     * Get all existing destination connectors
     */
    async getDestinationConnectors(requestParameters: GetDestinationConnectorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDestinationConnectors200Response> {
        const response = await this.getDestinationConnectorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a destination connector
     * Update a destination connector
     */
    async updateDestinationConnectorRaw(requestParameters: UpdateDestinationConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateDestinationConnectorResponse>> {
        if (requestParameters['organizationId'] == null) {
            throw new runtime.RequiredError(
                'organizationId',
                'Required parameter "organizationId" was null or undefined when calling updateDestinationConnector().'
            );
        }

        if (requestParameters['destinationConnectorId'] == null) {
            throw new runtime.RequiredError(
                'destinationConnectorId',
                'Required parameter "destinationConnectorId" was null or undefined when calling updateDestinationConnector().'
            );
        }

        if (requestParameters['updateDestinationConnectorRequest'] == null) {
            throw new runtime.RequiredError(
                'updateDestinationConnectorRequest',
                'Required parameter "updateDestinationConnectorRequest" was null or undefined when calling updateDestinationConnector().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/org/{organizationId}/connectors/destinations/{destinationConnectorId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters['organizationId']))).replace(`{${"destinationConnectorId"}}`, encodeURIComponent(String(requestParameters['destinationConnectorId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDestinationConnectorRequestToJSON(requestParameters['updateDestinationConnectorRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateDestinationConnectorResponseFromJSON(jsonValue));
    }

    /**
     * Update a destination connector
     * Update a destination connector
     */
    async updateDestinationConnector(requestParameters: UpdateDestinationConnectorOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateDestinationConnectorResponse> {
        const response = await this.updateDestinationConnectorRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
