# coding: utf-8

"""
    Vectorize API

    API for Vectorize services (Beta)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from vectorize_client.models.azureaisearch_config import AZUREAISEARCHConfig
from vectorize_client.models.capella_config import CAPELLAConfig
from vectorize_client.models.datastax_config import DATASTAXConfig
from vectorize_client.models.elastic_config import ELASTICConfig
from vectorize_client.models.milvus_config import MILVUSConfig
from vectorize_client.models.pinecone_config import PINECONEConfig
from vectorize_client.models.postgresql_config import POSTGRESQLConfig
from vectorize_client.models.qdrant_config import QDRANTConfig
from vectorize_client.models.singlestore_config import SINGLESTOREConfig
from vectorize_client.models.supabase_config import SUPABASEConfig
from vectorize_client.models.turbopuffer_config import TURBOPUFFERConfig
from vectorize_client.models.weaviate_config import WEAVIATEConfig
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

DESTINATIONCONNECTORINPUTCONFIG_ONE_OF_SCHEMAS = ["AZUREAISEARCHConfig", "CAPELLAConfig", "DATASTAXConfig", "ELASTICConfig", "MILVUSConfig", "PINECONEConfig", "POSTGRESQLConfig", "QDRANTConfig", "SINGLESTOREConfig", "SUPABASEConfig", "TURBOPUFFERConfig", "WEAVIATEConfig"]

class DestinationConnectorInputConfig(BaseModel):
    """
    Configuration specific to the connector type
    """
    # data type: CAPELLAConfig
    oneof_schema_1_validator: Optional[CAPELLAConfig] = None
    # data type: DATASTAXConfig
    oneof_schema_2_validator: Optional[DATASTAXConfig] = None
    # data type: ELASTICConfig
    oneof_schema_3_validator: Optional[ELASTICConfig] = None
    # data type: PINECONEConfig
    oneof_schema_4_validator: Optional[PINECONEConfig] = None
    # data type: SINGLESTOREConfig
    oneof_schema_5_validator: Optional[SINGLESTOREConfig] = None
    # data type: MILVUSConfig
    oneof_schema_6_validator: Optional[MILVUSConfig] = None
    # data type: POSTGRESQLConfig
    oneof_schema_7_validator: Optional[POSTGRESQLConfig] = None
    # data type: QDRANTConfig
    oneof_schema_8_validator: Optional[QDRANTConfig] = None
    # data type: SUPABASEConfig
    oneof_schema_9_validator: Optional[SUPABASEConfig] = None
    # data type: WEAVIATEConfig
    oneof_schema_10_validator: Optional[WEAVIATEConfig] = None
    # data type: AZUREAISEARCHConfig
    oneof_schema_11_validator: Optional[AZUREAISEARCHConfig] = None
    # data type: TURBOPUFFERConfig
    oneof_schema_12_validator: Optional[TURBOPUFFERConfig] = None
    actual_instance: Optional[Union[AZUREAISEARCHConfig, CAPELLAConfig, DATASTAXConfig, ELASTICConfig, MILVUSConfig, PINECONEConfig, POSTGRESQLConfig, QDRANTConfig, SINGLESTOREConfig, SUPABASEConfig, TURBOPUFFERConfig, WEAVIATEConfig]] = None
    one_of_schemas: Set[str] = { "AZUREAISEARCHConfig", "CAPELLAConfig", "DATASTAXConfig", "ELASTICConfig", "MILVUSConfig", "PINECONEConfig", "POSTGRESQLConfig", "QDRANTConfig", "SINGLESTOREConfig", "SUPABASEConfig", "TURBOPUFFERConfig", "WEAVIATEConfig" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = DestinationConnectorInputConfig.model_construct()
        error_messages = []
        match = 0
        # validate data type: CAPELLAConfig
        if not isinstance(v, CAPELLAConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CAPELLAConfig`")
        else:
            match += 1
        # validate data type: DATASTAXConfig
        if not isinstance(v, DATASTAXConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DATASTAXConfig`")
        else:
            match += 1
        # validate data type: ELASTICConfig
        if not isinstance(v, ELASTICConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ELASTICConfig`")
        else:
            match += 1
        # validate data type: PINECONEConfig
        if not isinstance(v, PINECONEConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PINECONEConfig`")
        else:
            match += 1
        # validate data type: SINGLESTOREConfig
        if not isinstance(v, SINGLESTOREConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SINGLESTOREConfig`")
        else:
            match += 1
        # validate data type: MILVUSConfig
        if not isinstance(v, MILVUSConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MILVUSConfig`")
        else:
            match += 1
        # validate data type: POSTGRESQLConfig
        if not isinstance(v, POSTGRESQLConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `POSTGRESQLConfig`")
        else:
            match += 1
        # validate data type: QDRANTConfig
        if not isinstance(v, QDRANTConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `QDRANTConfig`")
        else:
            match += 1
        # validate data type: SUPABASEConfig
        if not isinstance(v, SUPABASEConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SUPABASEConfig`")
        else:
            match += 1
        # validate data type: WEAVIATEConfig
        if not isinstance(v, WEAVIATEConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WEAVIATEConfig`")
        else:
            match += 1
        # validate data type: AZUREAISEARCHConfig
        if not isinstance(v, AZUREAISEARCHConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AZUREAISEARCHConfig`")
        else:
            match += 1
        # validate data type: TURBOPUFFERConfig
        if not isinstance(v, TURBOPUFFERConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TURBOPUFFERConfig`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in DestinationConnectorInputConfig with oneOf schemas: AZUREAISEARCHConfig, CAPELLAConfig, DATASTAXConfig, ELASTICConfig, MILVUSConfig, PINECONEConfig, POSTGRESQLConfig, QDRANTConfig, SINGLESTOREConfig, SUPABASEConfig, TURBOPUFFERConfig, WEAVIATEConfig. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in DestinationConnectorInputConfig with oneOf schemas: AZUREAISEARCHConfig, CAPELLAConfig, DATASTAXConfig, ELASTICConfig, MILVUSConfig, PINECONEConfig, POSTGRESQLConfig, QDRANTConfig, SINGLESTOREConfig, SUPABASEConfig, TURBOPUFFERConfig, WEAVIATEConfig. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into CAPELLAConfig
        try:
            instance.actual_instance = CAPELLAConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DATASTAXConfig
        try:
            instance.actual_instance = DATASTAXConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ELASTICConfig
        try:
            instance.actual_instance = ELASTICConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PINECONEConfig
        try:
            instance.actual_instance = PINECONEConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SINGLESTOREConfig
        try:
            instance.actual_instance = SINGLESTOREConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MILVUSConfig
        try:
            instance.actual_instance = MILVUSConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into POSTGRESQLConfig
        try:
            instance.actual_instance = POSTGRESQLConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into QDRANTConfig
        try:
            instance.actual_instance = QDRANTConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SUPABASEConfig
        try:
            instance.actual_instance = SUPABASEConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WEAVIATEConfig
        try:
            instance.actual_instance = WEAVIATEConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AZUREAISEARCHConfig
        try:
            instance.actual_instance = AZUREAISEARCHConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TURBOPUFFERConfig
        try:
            instance.actual_instance = TURBOPUFFERConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into DestinationConnectorInputConfig with oneOf schemas: AZUREAISEARCHConfig, CAPELLAConfig, DATASTAXConfig, ELASTICConfig, MILVUSConfig, PINECONEConfig, POSTGRESQLConfig, QDRANTConfig, SINGLESTOREConfig, SUPABASEConfig, TURBOPUFFERConfig, WEAVIATEConfig. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into DestinationConnectorInputConfig with oneOf schemas: AZUREAISEARCHConfig, CAPELLAConfig, DATASTAXConfig, ELASTICConfig, MILVUSConfig, PINECONEConfig, POSTGRESQLConfig, QDRANTConfig, SINGLESTOREConfig, SUPABASEConfig, TURBOPUFFERConfig, WEAVIATEConfig. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AZUREAISEARCHConfig, CAPELLAConfig, DATASTAXConfig, ELASTICConfig, MILVUSConfig, PINECONEConfig, POSTGRESQLConfig, QDRANTConfig, SINGLESTOREConfig, SUPABASEConfig, TURBOPUFFERConfig, WEAVIATEConfig]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


