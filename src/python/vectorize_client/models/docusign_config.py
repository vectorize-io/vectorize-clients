# coding: utf-8

"""
    Vectorize API

    API for Vectorize services (Beta)

    The version of the OpenAPI document: 0.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DOCUSIGNConfig(BaseModel):
    """
    Configuration for DocuSign connector
    """ # noqa: E501
    envelope_statuses: Optional[List[StrictStr]] = Field(default=None, description="Envelope Statuses. Filter envelopes by status", alias="envelope-statuses")
    from_date: date = Field(description="Created From Date. Include envelopes created on or after this date. Example: Enter start date (YYYY-MM-DD)", alias="from-date")
    to_date: Optional[date] = Field(default=None, description="Created To Date. Include envelopes that were last updated up to this date. Example: Enter end date (YYYY-MM-DD)", alias="to-date")
    folder_ids: Optional[List[StrictStr]] = Field(default=None, description="Folder Names. Select which DocuSign folders to include in the import")
    max_documents: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Max Documents. Leave blank for no limit, or specify a maximum number. Example: Enter maximum number of documents to retrieve (leave blank for no limit)", alias="max-documents")
    search_text: Optional[StrictStr] = Field(default=None, description="Search Text. Filter envelopes containing this text in their content. Example: Enter text to search within envelope content", alias="search-text")
    __properties: ClassVar[List[str]] = ["envelope-statuses", "from-date", "to-date", "folder_ids", "max-documents", "search-text"]

    @field_validator('envelope_statuses')
    def envelope_statuses_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['completed', 'correct', 'created', 'declined', 'delivered', 'sent', 'signed', 'voided', 'all']):
                raise ValueError("each list item must be one of ('completed', 'correct', 'created', 'declined', 'delivered', 'sent', 'signed', 'voided', 'all')")
        return value

    @field_validator('folder_ids')
    def folder_ids_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['inbox', 'sentitems', 'draft', 'recyclebin', 'awaiting_my_signature', 'completed', 'out_for_signature', 'waiting_for_others', 'expiring_soon', 'all']):
                raise ValueError("each list item must be one of ('inbox', 'sentitems', 'draft', 'recyclebin', 'awaiting_my_signature', 'completed', 'out_for_signature', 'waiting_for_others', 'expiring_soon', 'all')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DOCUSIGNConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DOCUSIGNConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "envelope-statuses": obj.get("envelope-statuses"),
            "from-date": obj.get("from-date"),
            "to-date": obj.get("to-date"),
            "folder_ids": obj.get("folder_ids"),
            "max-documents": obj.get("max-documents"),
            "search-text": obj.get("search-text")
        })
        return _obj


