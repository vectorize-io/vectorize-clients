# coding: utf-8

"""
    Vectorize API

    API for Vectorize services (Beta)

    The version of the OpenAPI document: 0.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from vectorize_client.models.awss3_config import AWSS3Config
from vectorize_client.models.azureblob_config import AZUREBLOBConfig
from vectorize_client.models.confluence_config import CONFLUENCEConfig
from vectorize_client.models.discord_config import DISCORDConfig
from vectorize_client.models.docusign_config import DOCUSIGNConfig
from vectorize_client.models.dropbox_config import DROPBOXConfig
from vectorize_client.models.firecrawl_config import FIRECRAWLConfig
from vectorize_client.models.fireflies_config import FIREFLIESConfig
from vectorize_client.models.gcs_config import GCSConfig
from vectorize_client.models.github_config import GITHUBConfig
from vectorize_client.models.gmail_config import GMAILConfig
from vectorize_client.models.googledrive_config import GOOGLEDRIVEConfig
from vectorize_client.models.googledriveoauth_config import GOOGLEDRIVEOAUTHConfig
from vectorize_client.models.googledriveoauthmulti_config import GOOGLEDRIVEOAUTHMULTIConfig
from vectorize_client.models.googledriveoauthmulticustom_config import GOOGLEDRIVEOAUTHMULTICUSTOMConfig
from vectorize_client.models.intercom_config import INTERCOMConfig
from vectorize_client.models.notion_config import NOTIONConfig
from vectorize_client.models.onedrive_config import ONEDRIVEConfig
from vectorize_client.models.sharepoint_config import SHAREPOINTConfig
from vectorize_client.models.webcrawler_config import WEBCRAWLERConfig
from vectorize_client.models.zoom_config import ZOOMConfig
from vectorize_client.models.zoomadmin_config import ZOOMADMINConfig
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

SOURCECONNECTORINPUTCONFIG_ONE_OF_SCHEMAS = ["AWSS3Config", "AZUREBLOBConfig", "CONFLUENCEConfig", "DISCORDConfig", "DOCUSIGNConfig", "DROPBOXConfig", "FIRECRAWLConfig", "FIREFLIESConfig", "GCSConfig", "GITHUBConfig", "GMAILConfig", "GOOGLEDRIVEConfig", "GOOGLEDRIVEOAUTHConfig", "GOOGLEDRIVEOAUTHMULTICUSTOMConfig", "GOOGLEDRIVEOAUTHMULTIConfig", "INTERCOMConfig", "NOTIONConfig", "ONEDRIVEConfig", "SHAREPOINTConfig", "WEBCRAWLERConfig", "ZOOMADMINConfig", "ZOOMConfig"]

class SourceConnectorInputConfig(BaseModel):
    """
    Configuration specific to the connector type
    """
    # data type: AWSS3Config
    oneof_schema_1_validator: Optional[AWSS3Config] = None
    # data type: AZUREBLOBConfig
    oneof_schema_2_validator: Optional[AZUREBLOBConfig] = None
    # data type: CONFLUENCEConfig
    oneof_schema_3_validator: Optional[CONFLUENCEConfig] = None
    # data type: DISCORDConfig
    oneof_schema_4_validator: Optional[DISCORDConfig] = None
    # data type: DROPBOXConfig
    oneof_schema_5_validator: Optional[DROPBOXConfig] = None
    # data type: GOOGLEDRIVEOAUTHConfig
    oneof_schema_6_validator: Optional[GOOGLEDRIVEOAUTHConfig] = None
    # data type: GOOGLEDRIVEConfig
    oneof_schema_7_validator: Optional[GOOGLEDRIVEConfig] = None
    # data type: GOOGLEDRIVEOAUTHMULTIConfig
    oneof_schema_8_validator: Optional[GOOGLEDRIVEOAUTHMULTIConfig] = None
    # data type: GOOGLEDRIVEOAUTHMULTICUSTOMConfig
    oneof_schema_9_validator: Optional[GOOGLEDRIVEOAUTHMULTICUSTOMConfig] = None
    # data type: FIRECRAWLConfig
    oneof_schema_10_validator: Optional[FIRECRAWLConfig] = None
    # data type: GCSConfig
    oneof_schema_11_validator: Optional[GCSConfig] = None
    # data type: ZOOMConfig
    oneof_schema_12_validator: Optional[ZOOMConfig] = None
    # data type: ZOOMADMINConfig
    oneof_schema_13_validator: Optional[ZOOMADMINConfig] = None
    # data type: INTERCOMConfig
    oneof_schema_14_validator: Optional[INTERCOMConfig] = None
    # data type: NOTIONConfig
    oneof_schema_15_validator: Optional[NOTIONConfig] = None
    # data type: ONEDRIVEConfig
    oneof_schema_16_validator: Optional[ONEDRIVEConfig] = None
    # data type: SHAREPOINTConfig
    oneof_schema_17_validator: Optional[SHAREPOINTConfig] = None
    # data type: WEBCRAWLERConfig
    oneof_schema_18_validator: Optional[WEBCRAWLERConfig] = None
    # data type: GITHUBConfig
    oneof_schema_19_validator: Optional[GITHUBConfig] = None
    # data type: FIREFLIESConfig
    oneof_schema_20_validator: Optional[FIREFLIESConfig] = None
    # data type: DOCUSIGNConfig
    oneof_schema_21_validator: Optional[DOCUSIGNConfig] = None
    # data type: GMAILConfig
    oneof_schema_22_validator: Optional[GMAILConfig] = None
    actual_instance: Optional[Union[AWSS3Config, AZUREBLOBConfig, CONFLUENCEConfig, DISCORDConfig, DOCUSIGNConfig, DROPBOXConfig, FIRECRAWLConfig, FIREFLIESConfig, GCSConfig, GITHUBConfig, GMAILConfig, GOOGLEDRIVEConfig, GOOGLEDRIVEOAUTHConfig, GOOGLEDRIVEOAUTHMULTICUSTOMConfig, GOOGLEDRIVEOAUTHMULTIConfig, INTERCOMConfig, NOTIONConfig, ONEDRIVEConfig, SHAREPOINTConfig, WEBCRAWLERConfig, ZOOMADMINConfig, ZOOMConfig]] = None
    one_of_schemas: Set[str] = { "AWSS3Config", "AZUREBLOBConfig", "CONFLUENCEConfig", "DISCORDConfig", "DOCUSIGNConfig", "DROPBOXConfig", "FIRECRAWLConfig", "FIREFLIESConfig", "GCSConfig", "GITHUBConfig", "GMAILConfig", "GOOGLEDRIVEConfig", "GOOGLEDRIVEOAUTHConfig", "GOOGLEDRIVEOAUTHMULTICUSTOMConfig", "GOOGLEDRIVEOAUTHMULTIConfig", "INTERCOMConfig", "NOTIONConfig", "ONEDRIVEConfig", "SHAREPOINTConfig", "WEBCRAWLERConfig", "ZOOMADMINConfig", "ZOOMConfig" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SourceConnectorInputConfig.model_construct()
        error_messages = []
        match = 0
        # validate data type: AWSS3Config
        if not isinstance(v, AWSS3Config):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AWSS3Config`")
        else:
            match += 1
        # validate data type: AZUREBLOBConfig
        if not isinstance(v, AZUREBLOBConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AZUREBLOBConfig`")
        else:
            match += 1
        # validate data type: CONFLUENCEConfig
        if not isinstance(v, CONFLUENCEConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CONFLUENCEConfig`")
        else:
            match += 1
        # validate data type: DISCORDConfig
        if not isinstance(v, DISCORDConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DISCORDConfig`")
        else:
            match += 1
        # validate data type: DROPBOXConfig
        if not isinstance(v, DROPBOXConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DROPBOXConfig`")
        else:
            match += 1
        # validate data type: GOOGLEDRIVEOAUTHConfig
        if not isinstance(v, GOOGLEDRIVEOAUTHConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GOOGLEDRIVEOAUTHConfig`")
        else:
            match += 1
        # validate data type: GOOGLEDRIVEConfig
        if not isinstance(v, GOOGLEDRIVEConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GOOGLEDRIVEConfig`")
        else:
            match += 1
        # validate data type: GOOGLEDRIVEOAUTHMULTIConfig
        if not isinstance(v, GOOGLEDRIVEOAUTHMULTIConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GOOGLEDRIVEOAUTHMULTIConfig`")
        else:
            match += 1
        # validate data type: GOOGLEDRIVEOAUTHMULTICUSTOMConfig
        if not isinstance(v, GOOGLEDRIVEOAUTHMULTICUSTOMConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GOOGLEDRIVEOAUTHMULTICUSTOMConfig`")
        else:
            match += 1
        # validate data type: FIRECRAWLConfig
        if not isinstance(v, FIRECRAWLConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FIRECRAWLConfig`")
        else:
            match += 1
        # validate data type: GCSConfig
        if not isinstance(v, GCSConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GCSConfig`")
        else:
            match += 1
        # validate data type: ZOOMConfig
        if not isinstance(v, ZOOMConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ZOOMConfig`")
        else:
            match += 1
        # validate data type: ZOOMADMINConfig
        if not isinstance(v, ZOOMADMINConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ZOOMADMINConfig`")
        else:
            match += 1
        # validate data type: INTERCOMConfig
        if not isinstance(v, INTERCOMConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `INTERCOMConfig`")
        else:
            match += 1
        # validate data type: NOTIONConfig
        if not isinstance(v, NOTIONConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NOTIONConfig`")
        else:
            match += 1
        # validate data type: ONEDRIVEConfig
        if not isinstance(v, ONEDRIVEConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ONEDRIVEConfig`")
        else:
            match += 1
        # validate data type: SHAREPOINTConfig
        if not isinstance(v, SHAREPOINTConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SHAREPOINTConfig`")
        else:
            match += 1
        # validate data type: WEBCRAWLERConfig
        if not isinstance(v, WEBCRAWLERConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WEBCRAWLERConfig`")
        else:
            match += 1
        # validate data type: GITHUBConfig
        if not isinstance(v, GITHUBConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GITHUBConfig`")
        else:
            match += 1
        # validate data type: FIREFLIESConfig
        if not isinstance(v, FIREFLIESConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FIREFLIESConfig`")
        else:
            match += 1
        # validate data type: DOCUSIGNConfig
        if not isinstance(v, DOCUSIGNConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DOCUSIGNConfig`")
        else:
            match += 1
        # validate data type: GMAILConfig
        if not isinstance(v, GMAILConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GMAILConfig`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SourceConnectorInputConfig with oneOf schemas: AWSS3Config, AZUREBLOBConfig, CONFLUENCEConfig, DISCORDConfig, DOCUSIGNConfig, DROPBOXConfig, FIRECRAWLConfig, FIREFLIESConfig, GCSConfig, GITHUBConfig, GMAILConfig, GOOGLEDRIVEConfig, GOOGLEDRIVEOAUTHConfig, GOOGLEDRIVEOAUTHMULTICUSTOMConfig, GOOGLEDRIVEOAUTHMULTIConfig, INTERCOMConfig, NOTIONConfig, ONEDRIVEConfig, SHAREPOINTConfig, WEBCRAWLERConfig, ZOOMADMINConfig, ZOOMConfig. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SourceConnectorInputConfig with oneOf schemas: AWSS3Config, AZUREBLOBConfig, CONFLUENCEConfig, DISCORDConfig, DOCUSIGNConfig, DROPBOXConfig, FIRECRAWLConfig, FIREFLIESConfig, GCSConfig, GITHUBConfig, GMAILConfig, GOOGLEDRIVEConfig, GOOGLEDRIVEOAUTHConfig, GOOGLEDRIVEOAUTHMULTICUSTOMConfig, GOOGLEDRIVEOAUTHMULTIConfig, INTERCOMConfig, NOTIONConfig, ONEDRIVEConfig, SHAREPOINTConfig, WEBCRAWLERConfig, ZOOMADMINConfig, ZOOMConfig. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AWSS3Config
        try:
            instance.actual_instance = AWSS3Config.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AZUREBLOBConfig
        try:
            instance.actual_instance = AZUREBLOBConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CONFLUENCEConfig
        try:
            instance.actual_instance = CONFLUENCEConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DISCORDConfig
        try:
            instance.actual_instance = DISCORDConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DROPBOXConfig
        try:
            instance.actual_instance = DROPBOXConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GOOGLEDRIVEOAUTHConfig
        try:
            instance.actual_instance = GOOGLEDRIVEOAUTHConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GOOGLEDRIVEConfig
        try:
            instance.actual_instance = GOOGLEDRIVEConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GOOGLEDRIVEOAUTHMULTIConfig
        try:
            instance.actual_instance = GOOGLEDRIVEOAUTHMULTIConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GOOGLEDRIVEOAUTHMULTICUSTOMConfig
        try:
            instance.actual_instance = GOOGLEDRIVEOAUTHMULTICUSTOMConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FIRECRAWLConfig
        try:
            instance.actual_instance = FIRECRAWLConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GCSConfig
        try:
            instance.actual_instance = GCSConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ZOOMConfig
        try:
            instance.actual_instance = ZOOMConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ZOOMADMINConfig
        try:
            instance.actual_instance = ZOOMADMINConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into INTERCOMConfig
        try:
            instance.actual_instance = INTERCOMConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NOTIONConfig
        try:
            instance.actual_instance = NOTIONConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ONEDRIVEConfig
        try:
            instance.actual_instance = ONEDRIVEConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SHAREPOINTConfig
        try:
            instance.actual_instance = SHAREPOINTConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WEBCRAWLERConfig
        try:
            instance.actual_instance = WEBCRAWLERConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GITHUBConfig
        try:
            instance.actual_instance = GITHUBConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FIREFLIESConfig
        try:
            instance.actual_instance = FIREFLIESConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DOCUSIGNConfig
        try:
            instance.actual_instance = DOCUSIGNConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GMAILConfig
        try:
            instance.actual_instance = GMAILConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SourceConnectorInputConfig with oneOf schemas: AWSS3Config, AZUREBLOBConfig, CONFLUENCEConfig, DISCORDConfig, DOCUSIGNConfig, DROPBOXConfig, FIRECRAWLConfig, FIREFLIESConfig, GCSConfig, GITHUBConfig, GMAILConfig, GOOGLEDRIVEConfig, GOOGLEDRIVEOAUTHConfig, GOOGLEDRIVEOAUTHMULTICUSTOMConfig, GOOGLEDRIVEOAUTHMULTIConfig, INTERCOMConfig, NOTIONConfig, ONEDRIVEConfig, SHAREPOINTConfig, WEBCRAWLERConfig, ZOOMADMINConfig, ZOOMConfig. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SourceConnectorInputConfig with oneOf schemas: AWSS3Config, AZUREBLOBConfig, CONFLUENCEConfig, DISCORDConfig, DOCUSIGNConfig, DROPBOXConfig, FIRECRAWLConfig, FIREFLIESConfig, GCSConfig, GITHUBConfig, GMAILConfig, GOOGLEDRIVEConfig, GOOGLEDRIVEOAUTHConfig, GOOGLEDRIVEOAUTHMULTICUSTOMConfig, GOOGLEDRIVEOAUTHMULTIConfig, INTERCOMConfig, NOTIONConfig, ONEDRIVEConfig, SHAREPOINTConfig, WEBCRAWLERConfig, ZOOMADMINConfig, ZOOMConfig. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AWSS3Config, AZUREBLOBConfig, CONFLUENCEConfig, DISCORDConfig, DOCUSIGNConfig, DROPBOXConfig, FIRECRAWLConfig, FIREFLIESConfig, GCSConfig, GITHUBConfig, GMAILConfig, GOOGLEDRIVEConfig, GOOGLEDRIVEOAUTHConfig, GOOGLEDRIVEOAUTHMULTICUSTOMConfig, GOOGLEDRIVEOAUTHMULTIConfig, INTERCOMConfig, NOTIONConfig, ONEDRIVEConfig, SHAREPOINTConfig, WEBCRAWLERConfig, ZOOMADMINConfig, ZOOMConfig]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


