# coding: utf-8

"""
    Vectorize API

    API for Vectorize services (Beta)

    The version of the OpenAPI document: 0.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from vectorize_client.models.aws_s3 import AwsS3
from vectorize_client.models.azure_blob import AzureBlob
from vectorize_client.models.confluence import Confluence
from vectorize_client.models.discord import Discord
from vectorize_client.models.file_upload import FileUpload
from vectorize_client.models.firecrawl import Firecrawl
from vectorize_client.models.fireflies import Fireflies
from vectorize_client.models.gcs import Gcs
from vectorize_client.models.github import Github
from vectorize_client.models.google_drive import GoogleDrive
from vectorize_client.models.one_drive import OneDrive
from vectorize_client.models.sharepoint import Sharepoint
from vectorize_client.models.web_crawler import WebCrawler
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

CREATESOURCECONNECTORREQUEST_ONE_OF_SCHEMAS = ["AwsS3", "AzureBlob", "Confluence", "Discord", "FileUpload", "Firecrawl", "Fireflies", "Gcs", "Github", "GoogleDrive", "OneDrive", "Sharepoint", "WebCrawler"]

class CreateSourceConnectorRequest(BaseModel):
    """
    CreateSourceConnectorRequest
    """
    # data type: AwsS3
    oneof_schema_1_validator: Optional[AwsS3] = None
    # data type: AzureBlob
    oneof_schema_2_validator: Optional[AzureBlob] = None
    # data type: Confluence
    oneof_schema_3_validator: Optional[Confluence] = None
    # data type: Discord
    oneof_schema_4_validator: Optional[Discord] = None
    # data type: FileUpload
    oneof_schema_5_validator: Optional[FileUpload] = None
    # data type: GoogleDrive
    oneof_schema_6_validator: Optional[GoogleDrive] = None
    # data type: Firecrawl
    oneof_schema_7_validator: Optional[Firecrawl] = None
    # data type: Gcs
    oneof_schema_8_validator: Optional[Gcs] = None
    # data type: OneDrive
    oneof_schema_9_validator: Optional[OneDrive] = None
    # data type: Sharepoint
    oneof_schema_10_validator: Optional[Sharepoint] = None
    # data type: WebCrawler
    oneof_schema_11_validator: Optional[WebCrawler] = None
    # data type: Github
    oneof_schema_12_validator: Optional[Github] = None
    # data type: Fireflies
    oneof_schema_13_validator: Optional[Fireflies] = None
    actual_instance: Optional[Union[AwsS3, AzureBlob, Confluence, Discord, FileUpload, Firecrawl, Fireflies, Gcs, Github, GoogleDrive, OneDrive, Sharepoint, WebCrawler]] = None
    one_of_schemas: Set[str] = { "AwsS3", "AzureBlob", "Confluence", "Discord", "FileUpload", "Firecrawl", "Fireflies", "Gcs", "Github", "GoogleDrive", "OneDrive", "Sharepoint", "WebCrawler" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = CreateSourceConnectorRequest.model_construct()
        error_messages = []
        match = 0
        # validate data type: AwsS3
        if not isinstance(v, AwsS3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AwsS3`")
        else:
            match += 1
        # validate data type: AzureBlob
        if not isinstance(v, AzureBlob):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AzureBlob`")
        else:
            match += 1
        # validate data type: Confluence
        if not isinstance(v, Confluence):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Confluence`")
        else:
            match += 1
        # validate data type: Discord
        if not isinstance(v, Discord):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Discord`")
        else:
            match += 1
        # validate data type: FileUpload
        if not isinstance(v, FileUpload):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FileUpload`")
        else:
            match += 1
        # validate data type: GoogleDrive
        if not isinstance(v, GoogleDrive):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleDrive`")
        else:
            match += 1
        # validate data type: Firecrawl
        if not isinstance(v, Firecrawl):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Firecrawl`")
        else:
            match += 1
        # validate data type: Gcs
        if not isinstance(v, Gcs):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Gcs`")
        else:
            match += 1
        # validate data type: OneDrive
        if not isinstance(v, OneDrive):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OneDrive`")
        else:
            match += 1
        # validate data type: Sharepoint
        if not isinstance(v, Sharepoint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Sharepoint`")
        else:
            match += 1
        # validate data type: WebCrawler
        if not isinstance(v, WebCrawler):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebCrawler`")
        else:
            match += 1
        # validate data type: Github
        if not isinstance(v, Github):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Github`")
        else:
            match += 1
        # validate data type: Fireflies
        if not isinstance(v, Fireflies):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Fireflies`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in CreateSourceConnectorRequest with oneOf schemas: AwsS3, AzureBlob, Confluence, Discord, FileUpload, Firecrawl, Fireflies, Gcs, Github, GoogleDrive, OneDrive, Sharepoint, WebCrawler. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in CreateSourceConnectorRequest with oneOf schemas: AwsS3, AzureBlob, Confluence, Discord, FileUpload, Firecrawl, Fireflies, Gcs, Github, GoogleDrive, OneDrive, Sharepoint, WebCrawler. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AwsS3
        try:
            instance.actual_instance = AwsS3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AzureBlob
        try:
            instance.actual_instance = AzureBlob.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Confluence
        try:
            instance.actual_instance = Confluence.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Discord
        try:
            instance.actual_instance = Discord.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FileUpload
        try:
            instance.actual_instance = FileUpload.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleDrive
        try:
            instance.actual_instance = GoogleDrive.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Firecrawl
        try:
            instance.actual_instance = Firecrawl.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Gcs
        try:
            instance.actual_instance = Gcs.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OneDrive
        try:
            instance.actual_instance = OneDrive.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Sharepoint
        try:
            instance.actual_instance = Sharepoint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WebCrawler
        try:
            instance.actual_instance = WebCrawler.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Github
        try:
            instance.actual_instance = Github.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Fireflies
        try:
            instance.actual_instance = Fireflies.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into CreateSourceConnectorRequest with oneOf schemas: AwsS3, AzureBlob, Confluence, Discord, FileUpload, Firecrawl, Fireflies, Gcs, Github, GoogleDrive, OneDrive, Sharepoint, WebCrawler. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into CreateSourceConnectorRequest with oneOf schemas: AwsS3, AzureBlob, Confluence, Discord, FileUpload, Firecrawl, Fireflies, Gcs, Github, GoogleDrive, OneDrive, Sharepoint, WebCrawler. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AwsS3, AzureBlob, Confluence, Discord, FileUpload, Firecrawl, Fireflies, Gcs, Github, GoogleDrive, OneDrive, Sharepoint, WebCrawler]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


