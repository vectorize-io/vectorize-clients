# coding: utf-8

"""
    Vectorize API

    API for Vectorize services (Beta)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from vectorize_client.models.azureaisearch1 import Azureaisearch1
from vectorize_client.models.capella1 import Capella1
from vectorize_client.models.datastax1 import Datastax1
from vectorize_client.models.elastic1 import Elastic1
from vectorize_client.models.milvus1 import Milvus1
from vectorize_client.models.pinecone1 import Pinecone1
from vectorize_client.models.postgresql1 import Postgresql1
from vectorize_client.models.qdrant1 import Qdrant1
from vectorize_client.models.singlestore1 import Singlestore1
from vectorize_client.models.supabase1 import Supabase1
from vectorize_client.models.turbopuffer1 import Turbopuffer1
from vectorize_client.models.weaviate1 import Weaviate1
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

UPDATEDESTINATIONCONNECTORREQUEST_ONE_OF_SCHEMAS = ["Azureaisearch1", "Capella1", "Datastax1", "Elastic1", "Milvus1", "Pinecone1", "Postgresql1", "Qdrant1", "Singlestore1", "Supabase1", "Turbopuffer1", "Weaviate1"]

class UpdateDestinationConnectorRequest(BaseModel):
    """
    UpdateDestinationConnectorRequest
    """
    # data type: Capella1
    oneof_schema_1_validator: Optional[Capella1] = None
    # data type: Datastax1
    oneof_schema_2_validator: Optional[Datastax1] = None
    # data type: Elastic1
    oneof_schema_3_validator: Optional[Elastic1] = None
    # data type: Pinecone1
    oneof_schema_4_validator: Optional[Pinecone1] = None
    # data type: Singlestore1
    oneof_schema_5_validator: Optional[Singlestore1] = None
    # data type: Milvus1
    oneof_schema_6_validator: Optional[Milvus1] = None
    # data type: Postgresql1
    oneof_schema_7_validator: Optional[Postgresql1] = None
    # data type: Qdrant1
    oneof_schema_8_validator: Optional[Qdrant1] = None
    # data type: Supabase1
    oneof_schema_9_validator: Optional[Supabase1] = None
    # data type: Weaviate1
    oneof_schema_10_validator: Optional[Weaviate1] = None
    # data type: Azureaisearch1
    oneof_schema_11_validator: Optional[Azureaisearch1] = None
    # data type: Turbopuffer1
    oneof_schema_12_validator: Optional[Turbopuffer1] = None
    actual_instance: Optional[Union[Azureaisearch1, Capella1, Datastax1, Elastic1, Milvus1, Pinecone1, Postgresql1, Qdrant1, Singlestore1, Supabase1, Turbopuffer1, Weaviate1]] = None
    one_of_schemas: Set[str] = { "Azureaisearch1", "Capella1", "Datastax1", "Elastic1", "Milvus1", "Pinecone1", "Postgresql1", "Qdrant1", "Singlestore1", "Supabase1", "Turbopuffer1", "Weaviate1" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = UpdateDestinationConnectorRequest.model_construct()
        error_messages = []
        match = 0
        # validate data type: Capella1
        if not isinstance(v, Capella1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Capella1`")
        else:
            match += 1
        # validate data type: Datastax1
        if not isinstance(v, Datastax1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Datastax1`")
        else:
            match += 1
        # validate data type: Elastic1
        if not isinstance(v, Elastic1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Elastic1`")
        else:
            match += 1
        # validate data type: Pinecone1
        if not isinstance(v, Pinecone1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Pinecone1`")
        else:
            match += 1
        # validate data type: Singlestore1
        if not isinstance(v, Singlestore1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Singlestore1`")
        else:
            match += 1
        # validate data type: Milvus1
        if not isinstance(v, Milvus1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Milvus1`")
        else:
            match += 1
        # validate data type: Postgresql1
        if not isinstance(v, Postgresql1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Postgresql1`")
        else:
            match += 1
        # validate data type: Qdrant1
        if not isinstance(v, Qdrant1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Qdrant1`")
        else:
            match += 1
        # validate data type: Supabase1
        if not isinstance(v, Supabase1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Supabase1`")
        else:
            match += 1
        # validate data type: Weaviate1
        if not isinstance(v, Weaviate1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Weaviate1`")
        else:
            match += 1
        # validate data type: Azureaisearch1
        if not isinstance(v, Azureaisearch1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Azureaisearch1`")
        else:
            match += 1
        # validate data type: Turbopuffer1
        if not isinstance(v, Turbopuffer1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Turbopuffer1`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in UpdateDestinationConnectorRequest with oneOf schemas: Azureaisearch1, Capella1, Datastax1, Elastic1, Milvus1, Pinecone1, Postgresql1, Qdrant1, Singlestore1, Supabase1, Turbopuffer1, Weaviate1. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in UpdateDestinationConnectorRequest with oneOf schemas: Azureaisearch1, Capella1, Datastax1, Elastic1, Milvus1, Pinecone1, Postgresql1, Qdrant1, Singlestore1, Supabase1, Turbopuffer1, Weaviate1. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into Capella1
        try:
            instance.actual_instance = Capella1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Datastax1
        try:
            instance.actual_instance = Datastax1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Elastic1
        try:
            instance.actual_instance = Elastic1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Pinecone1
        try:
            instance.actual_instance = Pinecone1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Singlestore1
        try:
            instance.actual_instance = Singlestore1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Milvus1
        try:
            instance.actual_instance = Milvus1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Postgresql1
        try:
            instance.actual_instance = Postgresql1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Qdrant1
        try:
            instance.actual_instance = Qdrant1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Supabase1
        try:
            instance.actual_instance = Supabase1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Weaviate1
        try:
            instance.actual_instance = Weaviate1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Azureaisearch1
        try:
            instance.actual_instance = Azureaisearch1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Turbopuffer1
        try:
            instance.actual_instance = Turbopuffer1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into UpdateDestinationConnectorRequest with oneOf schemas: Azureaisearch1, Capella1, Datastax1, Elastic1, Milvus1, Pinecone1, Postgresql1, Qdrant1, Singlestore1, Supabase1, Turbopuffer1, Weaviate1. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into UpdateDestinationConnectorRequest with oneOf schemas: Azureaisearch1, Capella1, Datastax1, Elastic1, Milvus1, Pinecone1, Postgresql1, Qdrant1, Singlestore1, Supabase1, Turbopuffer1, Weaviate1. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], Azureaisearch1, Capella1, Datastax1, Elastic1, Milvus1, Pinecone1, Postgresql1, Qdrant1, Singlestore1, Supabase1, Turbopuffer1, Weaviate1]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


