# coding: utf-8

"""
    Vectorize API

    API for Vectorize services (Beta)

    The version of the OpenAPI document: 0.1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from vectorize_client.models.aws_s31 import AwsS31
from vectorize_client.models.azure_blob1 import AzureBlob1
from vectorize_client.models.confluence1 import Confluence1
from vectorize_client.models.discord1 import Discord1
from vectorize_client.models.file_upload1 import FileUpload1
from vectorize_client.models.firecrawl1 import Firecrawl1
from vectorize_client.models.fireflies1 import Fireflies1
from vectorize_client.models.gcs1 import Gcs1
from vectorize_client.models.github1 import Github1
from vectorize_client.models.google_drive1 import GoogleDrive1
from vectorize_client.models.one_drive1 import OneDrive1
from vectorize_client.models.sharepoint1 import Sharepoint1
from vectorize_client.models.web_crawler1 import WebCrawler1
from vectorize_client.models.zoom1 import Zoom1
from vectorize_client.models.zoom_admin1 import ZoomAdmin1
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

UPDATESOURCECONNECTORREQUEST_ONE_OF_SCHEMAS = ["AwsS31", "AzureBlob1", "Confluence1", "Discord1", "FileUpload1", "Firecrawl1", "Fireflies1", "Gcs1", "Github1", "GoogleDrive1", "OneDrive1", "Sharepoint1", "WebCrawler1", "Zoom1", "ZoomAdmin1"]

class UpdateSourceConnectorRequest(BaseModel):
    """
    UpdateSourceConnectorRequest
    """
    # data type: AwsS31
    oneof_schema_1_validator: Optional[AwsS31] = None
    # data type: AzureBlob1
    oneof_schema_2_validator: Optional[AzureBlob1] = None
    # data type: Confluence1
    oneof_schema_3_validator: Optional[Confluence1] = None
    # data type: Discord1
    oneof_schema_4_validator: Optional[Discord1] = None
    # data type: FileUpload1
    oneof_schema_5_validator: Optional[FileUpload1] = None
    # data type: GoogleDrive1
    oneof_schema_6_validator: Optional[GoogleDrive1] = None
    # data type: Firecrawl1
    oneof_schema_7_validator: Optional[Firecrawl1] = None
    # data type: Gcs1
    oneof_schema_8_validator: Optional[Gcs1] = None
    # data type: Zoom1
    oneof_schema_9_validator: Optional[Zoom1] = None
    # data type: ZoomAdmin1
    oneof_schema_10_validator: Optional[ZoomAdmin1] = None
    # data type: OneDrive1
    oneof_schema_11_validator: Optional[OneDrive1] = None
    # data type: Sharepoint1
    oneof_schema_12_validator: Optional[Sharepoint1] = None
    # data type: WebCrawler1
    oneof_schema_13_validator: Optional[WebCrawler1] = None
    # data type: Github1
    oneof_schema_14_validator: Optional[Github1] = None
    # data type: Fireflies1
    oneof_schema_15_validator: Optional[Fireflies1] = None
    actual_instance: Optional[Union[AwsS31, AzureBlob1, Confluence1, Discord1, FileUpload1, Firecrawl1, Fireflies1, Gcs1, Github1, GoogleDrive1, OneDrive1, Sharepoint1, WebCrawler1, Zoom1, ZoomAdmin1]] = None
    one_of_schemas: Set[str] = { "AwsS31", "AzureBlob1", "Confluence1", "Discord1", "FileUpload1", "Firecrawl1", "Fireflies1", "Gcs1", "Github1", "GoogleDrive1", "OneDrive1", "Sharepoint1", "WebCrawler1", "Zoom1", "ZoomAdmin1" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = UpdateSourceConnectorRequest.model_construct()
        error_messages = []
        match = 0
        # validate data type: AwsS31
        if not isinstance(v, AwsS31):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AwsS31`")
        else:
            match += 1
        # validate data type: AzureBlob1
        if not isinstance(v, AzureBlob1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AzureBlob1`")
        else:
            match += 1
        # validate data type: Confluence1
        if not isinstance(v, Confluence1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Confluence1`")
        else:
            match += 1
        # validate data type: Discord1
        if not isinstance(v, Discord1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Discord1`")
        else:
            match += 1
        # validate data type: FileUpload1
        if not isinstance(v, FileUpload1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FileUpload1`")
        else:
            match += 1
        # validate data type: GoogleDrive1
        if not isinstance(v, GoogleDrive1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleDrive1`")
        else:
            match += 1
        # validate data type: Firecrawl1
        if not isinstance(v, Firecrawl1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Firecrawl1`")
        else:
            match += 1
        # validate data type: Gcs1
        if not isinstance(v, Gcs1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Gcs1`")
        else:
            match += 1
        # validate data type: Zoom1
        if not isinstance(v, Zoom1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Zoom1`")
        else:
            match += 1
        # validate data type: ZoomAdmin1
        if not isinstance(v, ZoomAdmin1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ZoomAdmin1`")
        else:
            match += 1
        # validate data type: OneDrive1
        if not isinstance(v, OneDrive1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OneDrive1`")
        else:
            match += 1
        # validate data type: Sharepoint1
        if not isinstance(v, Sharepoint1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Sharepoint1`")
        else:
            match += 1
        # validate data type: WebCrawler1
        if not isinstance(v, WebCrawler1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WebCrawler1`")
        else:
            match += 1
        # validate data type: Github1
        if not isinstance(v, Github1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Github1`")
        else:
            match += 1
        # validate data type: Fireflies1
        if not isinstance(v, Fireflies1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Fireflies1`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in UpdateSourceConnectorRequest with oneOf schemas: AwsS31, AzureBlob1, Confluence1, Discord1, FileUpload1, Firecrawl1, Fireflies1, Gcs1, Github1, GoogleDrive1, OneDrive1, Sharepoint1, WebCrawler1, Zoom1, ZoomAdmin1. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in UpdateSourceConnectorRequest with oneOf schemas: AwsS31, AzureBlob1, Confluence1, Discord1, FileUpload1, Firecrawl1, Fireflies1, Gcs1, Github1, GoogleDrive1, OneDrive1, Sharepoint1, WebCrawler1, Zoom1, ZoomAdmin1. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AwsS31
        try:
            instance.actual_instance = AwsS31.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AzureBlob1
        try:
            instance.actual_instance = AzureBlob1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Confluence1
        try:
            instance.actual_instance = Confluence1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Discord1
        try:
            instance.actual_instance = Discord1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FileUpload1
        try:
            instance.actual_instance = FileUpload1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleDrive1
        try:
            instance.actual_instance = GoogleDrive1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Firecrawl1
        try:
            instance.actual_instance = Firecrawl1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Gcs1
        try:
            instance.actual_instance = Gcs1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Zoom1
        try:
            instance.actual_instance = Zoom1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ZoomAdmin1
        try:
            instance.actual_instance = ZoomAdmin1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OneDrive1
        try:
            instance.actual_instance = OneDrive1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Sharepoint1
        try:
            instance.actual_instance = Sharepoint1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WebCrawler1
        try:
            instance.actual_instance = WebCrawler1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Github1
        try:
            instance.actual_instance = Github1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Fireflies1
        try:
            instance.actual_instance = Fireflies1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into UpdateSourceConnectorRequest with oneOf schemas: AwsS31, AzureBlob1, Confluence1, Discord1, FileUpload1, Firecrawl1, Fireflies1, Gcs1, Github1, GoogleDrive1, OneDrive1, Sharepoint1, WebCrawler1, Zoom1, ZoomAdmin1. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into UpdateSourceConnectorRequest with oneOf schemas: AwsS31, AzureBlob1, Confluence1, Discord1, FileUpload1, Firecrawl1, Fireflies1, Gcs1, Github1, GoogleDrive1, OneDrive1, Sharepoint1, WebCrawler1, Zoom1, ZoomAdmin1. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AwsS31, AzureBlob1, Confluence1, Discord1, FileUpload1, Firecrawl1, Fireflies1, Gcs1, Github1, GoogleDrive1, OneDrive1, Sharepoint1, WebCrawler1, Zoom1, ZoomAdmin1]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


