# coding: utf-8

"""
    Vectorize API

    API for Vectorize services (Beta)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class GITHUBConfig(BaseModel):
    """
    Configuration for GitHub connector
    """ # noqa: E501
    repositories: Annotated[str, Field(strict=True)] = Field(description="Repositories. Example: Example: owner1/repo1")
    include_pull_requests: StrictBool = Field(description="Include Pull Requests", alias="include-pull-requests")
    pull_request_status: StrictStr = Field(description="Pull Request Status", alias="pull-request-status")
    pull_request_labels: Optional[StrictStr] = Field(default=None, description="Pull Request Labels. Example: Optionally filter by label. E.g. fix", alias="pull-request-labels")
    include_issues: StrictBool = Field(description="Include Issues", alias="include-issues")
    issue_status: StrictStr = Field(description="Issue Status", alias="issue-status")
    issue_labels: Optional[StrictStr] = Field(default=None, description="Issue Labels. Example: Optionally filter by label. E.g. bug", alias="issue-labels")
    max_items: Union[StrictFloat, StrictInt] = Field(description="Max Items. Example: Enter maximum number of items to fetch", alias="max-items")
    created_after: Optional[date] = Field(default=None, description="Created After. Filter for items created after this date. Example: Enter a date: Example 2012-12-31", alias="created-after")
    __properties: ClassVar[List[str]] = ["repositories", "include-pull-requests", "pull-request-status", "pull-request-labels", "include-issues", "issue-status", "issue-labels", "max-items", "created-after"]

    @field_validator('repositories')
    def repositories_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9-]+\/[a-zA-Z0-9-]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9-]+\/[a-zA-Z0-9-]+$/")
        return value

    @field_validator('pull_request_status')
    def pull_request_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['all', 'open', 'closed', 'merged']):
            raise ValueError("must be one of enum values ('all', 'open', 'closed', 'merged')")
        return value

    @field_validator('issue_status')
    def issue_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['all', 'open', 'closed']):
            raise ValueError("must be one of enum values ('all', 'open', 'closed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GITHUBConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GITHUBConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "repositories": obj.get("repositories"),
            "include-pull-requests": obj.get("include-pull-requests") if obj.get("include-pull-requests") is not None else True,
            "pull-request-status": obj.get("pull-request-status") if obj.get("pull-request-status") is not None else 'all',
            "pull-request-labels": obj.get("pull-request-labels"),
            "include-issues": obj.get("include-issues") if obj.get("include-issues") is not None else True,
            "issue-status": obj.get("issue-status") if obj.get("issue-status") is not None else 'all',
            "issue-labels": obj.get("issue-labels"),
            "max-items": obj.get("max-items") if obj.get("max-items") is not None else 1000,
            "created-after": obj.get("created-after")
        })
        return _obj


